Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 99, 112, 115, 203, 205, 232, 235, 245, 521, 594], "refer": [0, 88, 89, 90, 200, 232, 393, 449, 521, 762, 823, 859], "input": [0, 54, 88, 89, 90, 370, 378, 429, 472, 490, 497, 498, 501, 521, 530, 744, 803, 859], "output": [0, 24, 26, 27, 64, 90, 106, 115, 136, 137, 159, 161, 196, 232, 241, 245, 372, 373, 377, 467, 472, 497, 508, 521, 530, 551, 552, 561, 592, 594, 600, 609, 848, 859], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 105, 106, 108, 112, 115, 121, 129, 131, 133, 134, 138, 141, 142, 144, 146, 151, 152, 155, 166, 167, 173, 181, 185, 190, 191, 200, 201, 204, 232, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 265, 266, 273, 274, 277, 278, 282, 283, 287, 288, 300, 301, 303, 306, 309, 311, 313, 316, 320, 322, 325, 326, 329, 330, 338, 339, 344, 345, 349, 351, 353, 354, 355, 356, 357, 359, 360, 361, 371, 372, 389, 393, 394, 395, 396, 397, 399, 412, 415, 418, 419, 426, 443, 449, 453, 458, 459, 460, 461, 466, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 484, 490, 491, 494, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 511, 512, 513, 521, 530, 547, 574, 588, 589, 600, 852, 855, 858, 862, 863, 864], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 104, 106, 107, 230, 231, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 484, 487, 488, 489, 492, 507, 510, 511, 514, 521, 530, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 600, 608, 628, 644, 648, 663, 806, 808, 819, 820, 830, 839, 840, 848, 859], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 98, 99, 100, 101, 102, 104, 108, 149, 160, 232, 342, 521, 530, 599, 865], "express": [0, 59, 61, 64, 106, 108, 109, 115, 127, 129, 135, 157, 161, 169, 179, 201, 203, 205, 232, 241, 242, 244, 245, 262, 284, 285, 286, 289, 295, 297, 317, 336, 342, 349, 351, 355, 358, 363, 366, 371, 372, 373, 377, 378, 389, 390, 391, 396, 410, 411, 412, 414, 421, 434, 449, 455, 458, 464, 466, 469, 473, 476, 477, 481, 482, 483, 484, 488, 489, 490, 491, 492, 496, 497, 503, 505, 506, 507, 508, 510, 511, 514, 520, 530, 536, 544, 547, 568, 576, 577, 579, 588, 589, 590, 593, 594, 600, 628, 652, 653, 654, 662, 690, 780, 787, 808, 859], "extend": [0, 232, 339, 521, 530, 608, 713, 859], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 90, 98, 107, 115, 124, 131, 154, 160, 161, 192, 195, 205, 215, 232, 242, 245, 278, 295, 320, 333, 334, 335, 372, 373, 387, 399, 400, 401, 402, 403, 404, 406, 407, 408, 420, 462, 470, 472, 482, 483, 490, 491, 497, 505, 521, 530, 561, 565, 567, 594, 600, 609, 644, 662, 693, 707, 708, 709, 710, 768, 782, 783, 789, 794, 859], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 95, 96, 97, 98, 104, 105, 107, 108, 109, 116, 117, 126, 136, 147, 149, 160, 164, 170, 171, 177, 184, 188, 189, 230, 232, 281, 300, 321, 329, 350, 357, 359, 393, 409, 410, 420, 462, 464, 476, 508, 521, 530, 534, 535, 544, 551, 567, 593, 600, 608, 646, 651, 655, 667, 669, 702, 705, 762, 778, 779, 789, 794, 841, 842, 844, 846, 850, 858, 859], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 79, 82, 84, 86, 88, 89, 90, 92, 96, 98, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 123, 125, 131, 136, 137, 138, 152, 172, 184, 188, 189, 191, 193, 194, 232, 245, 266, 278, 281, 282, 284, 285, 286, 301, 303, 306, 309, 311, 313, 316, 322, 330, 336, 347, 351, 353, 355, 356, 372, 396, 444, 445, 446, 449, 462, 472, 473, 477, 485, 486, 487, 489, 490, 496, 497, 521, 530, 536, 542, 544, 551, 552, 561, 568, 573, 577, 584, 585, 594, 600, 609, 632, 644, 646, 648, 652, 653, 654, 670, 672, 675, 681, 683, 686, 689, 695, 703, 705, 720, 722, 789, 818, 819, 820, 823, 841, 842, 844, 851, 859], "config": [0, 201, 232, 530, 589, 600], "except": [0, 148, 232, 530, 557, 600, 842, 850, 859], "test": [0, 90, 530, 553, 560, 600], "util": [0, 530, 544, 600], "sql": [0, 42, 97, 147, 232, 530], "These": [1, 520], "allow": [1, 45, 68, 98, 100, 101, 102, 108, 109, 148, 149, 171, 232, 317, 395, 410, 449, 521, 556, 557, 561, 590, 600, 690, 764, 779, 781, 823, 859], "you": [1, 28, 54, 78, 86, 88, 89, 90, 95, 98, 112, 115, 122, 126, 148, 157, 188, 192, 205, 215, 232, 245, 262, 284, 285, 286, 336, 342, 372, 395, 400, 401, 402, 403, 404, 406, 407, 408, 435, 438, 473, 482, 491, 521, 536, 541, 553, 557, 560, 577, 594, 600, 608, 628, 652, 653, 654, 764, 809, 812, 842, 850, 859], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 115, 205, 232, 245, 278, 372, 399, 472, 497, 521, 561, 594, 600, 609, 644, 768, 859], "dedic": 1, "namespac": [1, 231, 235, 520, 530, 599], "underli": [1, 65, 72, 95, 108, 109, 126, 184, 232, 300, 301, 302, 305, 307, 308, 310, 312, 314, 315, 318, 319, 321, 327, 328, 329, 331, 395, 409, 521, 608, 669, 670, 671, 674, 676, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 702, 704, 764, 778, 789, 837, 838, 842, 859], "polar": [1, 232, 520, 521, 530, 600, 859, 865, 866], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 106, 107, 123, 172, 188, 189, 232, 521, 530, 542, 573, 600, 705, 841, 842, 859, 865], "without": [1, 63, 92, 96, 99, 195, 232, 295, 320, 400, 401, 402, 403, 404, 406, 407, 408, 507, 521, 662, 667, 693, 859], "requir": [1, 28, 81, 104, 105, 159, 189, 193, 201, 232, 333, 334, 335, 415, 449, 464, 521, 584, 589, 600, 708, 709, 710, 788, 823, 842, 846, 859], "subclass": [1, 232], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 122, 125, 127, 129, 135, 136, 137, 147, 157, 161, 169, 173, 179, 200, 201, 203, 232, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 521, 522, 525, 526, 527, 541, 543, 545, 547, 550, 551, 552, 556, 574, 576, 579, 588, 589, 593, 600, 628, 662, 714, 787, 833, 859], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 95, 97, 98, 100, 101, 104, 105, 107, 108, 111, 115, 122, 124, 127, 131, 136, 137, 148, 149, 154, 169, 185, 189, 196, 232, 242, 278, 293, 294, 298, 299, 320, 325, 332, 353, 355, 356, 357, 359, 360, 361, 364, 393, 396, 397, 399, 405, 420, 422, 423, 435, 438, 456, 473, 474, 479, 508, 515, 517, 520, 521, 522, 525, 526, 527, 530, 541, 545, 551, 552, 553, 557, 560, 561, 565, 568, 590, 600, 606, 608, 644, 660, 661, 693, 698, 706, 707, 717, 719, 728, 731, 732, 733, 734, 735, 736, 740, 762, 766, 768, 774, 794, 809, 812, 831, 842, 850, 852, 855, 859, 862, 863, 864], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 90, 91, 95, 98, 100, 101, 106, 107, 109, 122, 128, 144, 146, 149, 152, 154, 156, 157, 164, 178, 187, 196, 232, 243, 244, 262, 266, 276, 280, 289, 295, 336, 346, 347, 350, 353, 356, 360, 361, 363, 366, 368, 372, 373, 382, 386, 390, 393, 398, 415, 421, 428, 433, 434, 439, 440, 455, 467, 477, 489, 510, 521, 530, 536, 541, 544, 546, 561, 565, 568, 578, 600, 628, 632, 642, 662, 726, 738, 762, 795, 802, 807, 808, 813, 814, 859], "support": [1, 28, 62, 77, 90, 97, 106, 109, 178, 201, 232, 274, 421, 443, 521, 578, 589, 600, 640, 795, 817, 859], "target": [1, 60, 432, 449, 806, 823], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 115, 122, 124, 126, 131, 135, 136, 137, 138, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 171, 173, 176, 178, 180, 181, 184, 186, 188, 189, 192, 193, 195, 196, 197, 198, 202, 203, 205, 231, 232, 235, 242, 244, 245, 254, 256, 262, 266, 282, 289, 295, 300, 301, 307, 317, 320, 326, 329, 336, 338, 339, 344, 349, 350, 351, 355, 366, 371, 372, 377, 378, 384, 385, 387, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 414, 415, 416, 421, 422, 423, 436, 441, 452, 453, 463, 464, 465, 466, 467, 470, 473, 478, 480, 482, 484, 489, 490, 491, 507, 511, 521, 530, 531, 533, 536, 541, 544, 550, 551, 552, 554, 557, 561, 565, 568, 574, 576, 577, 578, 584, 590, 591, 592, 594, 599, 600, 608, 609, 618, 621, 628, 632, 648, 662, 667, 669, 670, 676, 690, 693, 699, 702, 705, 707, 712, 713, 719, 724, 725, 730, 731, 737, 739, 741, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 775, 776, 777, 779, 782, 783, 784, 785, 787, 788, 789, 790, 795, 796, 798, 810, 815, 826, 827, 830, 831, 838, 840, 841, 842, 843, 845, 846, 849, 850, 859], "featur": [1, 28, 45, 60, 232], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 84, 85, 88, 89, 91, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 115, 122, 124, 132, 135, 136, 137, 138, 142, 143, 145, 148, 149, 152, 154, 157, 159, 160, 161, 169, 171, 178, 181, 184, 186, 192, 193, 195, 196, 201, 203, 205, 215, 231, 232, 235, 242, 243, 244, 245, 262, 264, 274, 295, 317, 320, 325, 333, 334, 335, 338, 344, 347, 349, 351, 364, 372, 378, 387, 393, 395, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 416, 420, 421, 422, 423, 428, 432, 433, 434, 436, 441, 443, 446, 449, 452, 467, 473, 474, 478, 480, 482, 483, 484, 491, 496, 507, 511, 521, 536, 541, 544, 550, 551, 552, 555, 557, 559, 561, 565, 568, 577, 578, 584, 589, 592, 594, 600, 607, 608, 609, 628, 630, 640, 662, 690, 693, 698, 707, 708, 709, 710, 712, 719, 720, 723, 724, 725, 727, 737, 739, 740, 762, 764, 766, 779, 780, 781, 782, 783, 784, 794, 795, 798, 802, 806, 807, 808, 810, 815, 817, 820, 826, 838, 842, 848, 849, 850, 859], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 78, 80, 82, 84, 86, 88, 89, 90, 91, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 112, 115, 127, 128, 131, 136, 137, 148, 152, 154, 156, 157, 160, 161, 169, 171, 179, 181, 192, 193, 196, 203, 205, 215, 232, 240, 245, 262, 278, 282, 295, 298, 299, 329, 332, 333, 334, 335, 336, 341, 342, 350, 364, 372, 376, 393, 395, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 415, 416, 420, 422, 423, 429, 430, 431, 435, 436, 441, 443, 445, 447, 449, 472, 473, 474, 477, 479, 482, 484, 491, 496, 498, 501, 506, 511, 520, 521, 536, 545, 546, 550, 551, 552, 553, 557, 559, 560, 565, 579, 584, 588, 594, 600, 609, 628, 644, 648, 662, 702, 706, 708, 709, 710, 714, 715, 719, 740, 762, 764, 766, 779, 782, 783, 784, 788, 794, 798, 803, 804, 809, 810, 815, 817, 819, 823, 833, 841, 842, 849, 850, 859], "librari": [1, 65, 72, 372, 521, 866], "author": 1, "domain": 1, "specif": [1, 22, 97, 108, 399, 449, 510, 521, 768, 823, 859], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 97, 98, 122, 126, 179, 193, 232, 242, 353, 356, 357, 359, 360, 361, 378, 521, 541, 584, 592, 600, 608, 728, 732, 733, 734, 735, 736, 782, 859], "mai": [1, 28, 62, 63, 77, 88, 91, 99, 100, 115, 124, 126, 148, 175, 176, 195, 232, 273, 295, 300, 307, 320, 336, 339, 400, 401, 402, 403, 404, 406, 407, 408, 413, 414, 482, 483, 491, 505, 521, 561, 575, 576, 591, 594, 600, 608, 639, 662, 669, 676, 693, 707, 713, 786, 787, 859], "exist": [1, 108, 600], "belong": [1, 136, 232, 551, 600], "core": [1, 81, 189, 232], "cannot": [1, 88, 89, 115, 171, 205, 232, 245, 410, 445, 521, 577, 594, 600, 779, 819, 859], "overrid": [1, 78, 106, 107, 109, 232], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 131, 133, 135, 136, 137, 139, 141, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 165, 166, 167, 168, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 240, 241, 245, 259, 260, 264, 265, 266, 274, 277, 278, 297, 301, 317, 320, 323, 325, 326, 330, 336, 339, 340, 342, 344, 349, 355, 358, 373, 377, 379, 387, 390, 396, 398, 400, 401, 402, 403, 404, 406, 407, 408, 414, 415, 422, 423, 453, 454, 455, 458, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 521, 525, 536, 537, 538, 539, 540, 541, 543, 544, 547, 549, 550, 551, 552, 554, 556, 557, 561, 565, 568, 570, 571, 573, 574, 576, 577, 578, 579, 584, 585, 589, 590, 591, 592, 594, 595, 596, 600, 605, 626, 632, 644, 646, 663, 670, 690, 693, 696, 698, 699, 703, 713, 715, 717, 745, 748, 752, 753, 754, 765, 782, 783, 827, 829, 840, 859, 862], "dt": [1, 54, 137, 232, 527, 552, 600, 864], "attempt": [1, 188, 232, 842, 859], "do": [1, 54, 61, 98, 126, 148, 184, 192, 195, 215, 232, 262, 295, 470, 521, 536, 557, 561, 568, 577, 600, 608, 628, 662, 842, 850, 859], "so": [1, 45, 98, 136, 137, 161, 232, 264, 474, 551, 552, 600, 630], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 104, 105, 152, 169, 232, 377, 389, 449, 496, 521, 823, 842, 850, 859], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 90, 95, 97, 98, 100, 107, 108, 109, 115, 116, 117, 124, 127, 131, 136, 137, 148, 157, 159, 161, 167, 169, 184, 188, 195, 205, 215, 232, 241, 242, 245, 262, 264, 281, 284, 285, 286, 290, 291, 292, 293, 294, 295, 329, 342, 363, 372, 373, 378, 391, 399, 400, 401, 402, 403, 404, 406, 407, 408, 429, 433, 442, 448, 449, 458, 473, 477, 488, 496, 505, 507, 521, 530, 534, 535, 536, 544, 551, 552, 557, 561, 568, 577, 579, 590, 594, 600, 628, 630, 646, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 702, 707, 768, 769, 770, 771, 772, 773, 775, 776, 777, 782, 783, 803, 807, 811, 816, 822, 823, 842, 850, 859], "attributeerror": 1, "howev": [1, 124, 232, 707, 859], "can": [1, 54, 64, 69, 88, 89, 90, 91, 98, 99, 100, 107, 108, 109, 115, 123, 131, 135, 136, 157, 161, 179, 192, 195, 203, 205, 232, 245, 262, 278, 295, 317, 336, 350, 382, 395, 400, 401, 402, 403, 404, 406, 407, 408, 412, 415, 420, 434, 467, 470, 473, 477, 484, 489, 498, 511, 520, 521, 536, 551, 579, 591, 594, 600, 609, 628, 644, 662, 690, 749, 764, 782, 783, 784, 788, 794, 808, 859], "other": [1, 14, 64, 88, 89, 90, 98, 104, 105, 122, 126, 132, 147, 148, 154, 169, 230, 232, 244, 259, 284, 285, 286, 297, 355, 423, 462, 521, 530, 541, 556, 557, 565, 590, 600, 608, 625, 652, 653, 654, 665, 731, 781, 844, 851, 858, 859], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 90, 91, 95, 98, 100, 101, 102, 108, 109, 115, 122, 135, 148, 152, 179, 181, 232, 240, 283, 284, 285, 286, 317, 345, 395, 465, 506, 510, 521, 536, 541, 553, 557, 560, 579, 600, 649, 652, 653, 654, 690, 718, 764, 838, 859], "gener": [1, 97, 106, 107, 108, 109, 171, 192, 232, 278, 410, 416, 521, 644, 779, 790, 859], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 24, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 504, 507, 510, 511, 514, 521, 531, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 554, 555, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 600, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 627, 628, 631, 632, 634, 639, 640, 643, 644, 646, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 790, 791, 792, 793, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 823, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 859], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 107, 108, 109, 160, 192, 232, 567, 600], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 106], "self": [1, 55, 56, 57, 58, 61, 387, 521, 536, 544, 568, 577, 600, 608, 782, 783, 851, 859], "_expr": [1, 56], "hello": [1, 344, 470, 521, 632], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 98, 112, 115, 116, 120, 122, 123, 124, 125, 127, 128, 131, 139, 141, 147, 149, 150, 156, 157, 159, 160, 161, 169, 171, 182, 183, 189, 192, 193, 200, 203, 205, 208, 212, 218, 232, 242, 243, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 260, 264, 265, 266, 277, 287, 288, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 331, 338, 344, 348, 351, 353, 354, 355, 356, 357, 359, 360, 361, 367, 371, 378, 382, 396, 397, 410, 418, 419, 426, 428, 430, 432, 433, 434, 435, 436, 438, 441, 443, 444, 445, 446, 452, 457, 458, 459, 460, 461, 463, 465, 466, 467, 472, 473, 477, 485, 486, 487, 494, 496, 497, 507, 512, 514, 521, 536, 542, 544, 553, 559, 560, 561, 567, 568, 577, 583, 584, 592, 595, 596, 600, 605, 606, 607, 609, 616, 617, 619, 620, 623, 624, 626, 630, 631, 632, 643, 663, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 704, 707, 712, 717, 719, 721, 722, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 742, 749, 766, 767, 779, 781, 783, 800, 801, 802, 804, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 823, 826, 832, 834, 845, 847, 851, 859], "lit": [1, 86, 112, 363, 482, 484, 491, 511, 514, 521, 715, 859], "alia": [1, 54, 56, 58, 136, 137, 150, 194, 200, 201, 232, 245, 256, 262, 284, 285, 286, 290, 291, 292, 293, 294, 300, 302, 303, 304, 306, 309, 311, 313, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 330, 342, 344, 349, 354, 355, 363, 366, 367, 380, 387, 388, 395, 411, 427, 428, 431, 433, 435, 438, 443, 445, 446, 447, 462, 463, 469, 475, 476, 478, 479, 484, 487, 488, 492, 506, 510, 511, 521, 551, 552, 554, 560, 585, 588, 589, 593, 600, 621, 628, 669, 670, 673, 690, 697, 702, 703, 742, 819, 820, 859], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 344, 521, 632], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 91, 95, 97, 98, 99, 115, 148, 152, 157, 169, 178, 190, 194, 196, 232, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 347, 349, 350, 352, 353, 355, 356, 358, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 441, 442, 444, 445, 446, 448, 450, 451, 453, 454, 455, 456, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 472, 473, 477, 478, 484, 487, 489, 492, 510, 511, 521, 537, 554, 557, 578, 585, 590, 600, 628, 644, 782, 783, 795, 806, 808, 833, 859], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 159, 203, 232, 344, 445, 446, 521, 819, 820], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 97, 98, 107, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 484, 487, 488, 489, 492, 507, 510, 511, 514, 521, 534, 535, 536, 537, 541, 543, 544, 545, 546, 550, 551, 552, 554, 555, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 574, 575, 576, 578, 579, 580, 581, 585, 586, 588, 591, 594, 595, 596, 600, 628, 644, 648, 806, 808, 814, 819, 820, 840, 859], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 83, 85, 87, 88, 89, 91, 95, 97, 98, 107, 108, 109, 118, 123, 124, 125, 129, 134, 136, 141, 156, 159, 170, 179, 185, 186, 192, 193, 194, 195, 201, 204, 215, 232, 240, 259, 261, 262, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 336, 338, 344, 372, 378, 379, 387, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 414, 422, 423, 433, 444, 453, 454, 458, 478, 484, 488, 498, 501, 510, 511, 521, 537, 540, 541, 542, 543, 547, 551, 565, 584, 585, 589, 590, 600, 622, 625, 627, 628, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 707, 712, 716, 722, 731, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 807, 818, 829, 833, 841, 859], "with_row_count": [1, 232, 600, 783, 859], "name": [1, 12, 16, 18, 44, 55, 56, 57, 58, 63, 64, 67, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 95, 96, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 115, 118, 121, 122, 130, 133, 147, 148, 154, 161, 165, 172, 185, 191, 192, 194, 200, 201, 202, 232, 241, 278, 320, 325, 336, 363, 373, 377, 379, 390, 453, 454, 455, 470, 471, 477, 481, 484, 489, 494, 495, 503, 504, 506, 508, 511, 512, 521, 537, 540, 556, 557, 565, 571, 573, 579, 585, 589, 591, 593, 600, 605, 644, 651, 693, 698, 717, 765, 827, 829, 840, 843, 859], "n": [1, 9, 11, 19, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 98, 112, 115, 126, 136, 139, 150, 159, 171, 182, 183, 189, 208, 218, 232, 261, 265, 277, 295, 296, 300, 304, 324, 329, 339, 348, 367, 388, 396, 410, 420, 445, 446, 457, 459, 463, 494, 506, 512, 521, 536, 551, 553, 560, 582, 583, 595, 596, 600, 608, 627, 631, 643, 662, 664, 669, 673, 697, 702, 713, 721, 742, 757, 779, 794, 798, 819, 820, 832, 834, 837, 845, 849, 859], "filter": [1, 55, 98, 99, 122, 145, 205, 232, 431, 447, 469, 473, 521, 541, 544, 554, 594, 600, 782, 859], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 98, 107, 108, 115, 129, 135, 136, 137, 145, 157, 160, 169, 173, 179, 194, 200, 201, 203, 232, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 357, 358, 359, 362, 363, 364, 365, 369, 370, 371, 374, 375, 376, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 478, 479, 484, 487, 490, 492, 493, 504, 510, 511, 514, 521, 547, 550, 551, 552, 554, 567, 574, 585, 588, 589, 590, 593, 600, 628, 644, 648, 690, 766, 782, 783, 806, 808, 823, 859], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 97, 98, 99, 103, 104, 105, 108, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 241, 243, 244, 245, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 303, 305, 306, 309, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 325, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 426, 428, 431, 433, 434, 435, 438, 439, 440, 443, 445, 446, 447, 450, 451, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 476, 477, 478, 479, 484, 487, 488, 489, 492, 496, 507, 510, 511, 514, 521, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 554, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 600, 605, 608, 609, 611, 615, 616, 617, 618, 619, 620, 627, 628, 631, 632, 634, 639, 640, 643, 644, 648, 649, 650, 655, 656, 659, 660, 661, 662, 663, 665, 674, 678, 679, 685, 687, 692, 693, 694, 698, 701, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 790, 792, 794, 795, 796, 797, 798, 800, 802, 807, 808, 812, 813, 814, 819, 820, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 859], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 88, 89, 90, 91, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 115, 116, 117, 119, 120, 123, 127, 128, 131, 132, 134, 136, 138, 142, 147, 151, 152, 153, 155, 156, 157, 158, 162, 163, 167, 171, 172, 173, 176, 178, 179, 180, 181, 187, 190, 192, 193, 195, 196, 197, 200, 201, 202, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 235, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 262, 264, 270, 281, 283, 285, 286, 287, 288, 290, 295, 298, 299, 305, 309, 311, 312, 316, 321, 322, 333, 334, 335, 337, 340, 341, 345, 347, 350, 353, 356, 357, 359, 360, 361, 363, 364, 369, 370, 372, 374, 375, 376, 381, 384, 385, 386, 388, 389, 392, 393, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 415, 417, 418, 419, 420, 424, 425, 432, 452, 456, 460, 461, 462, 468, 473, 476, 478, 482, 484, 488, 491, 504, 511, 514, 521, 534, 535, 542, 545, 546, 551, 556, 559, 564, 568, 569, 573, 574, 576, 577, 579, 580, 586, 588, 589, 591, 594, 600, 610, 611, 612, 613, 614, 615, 616, 618, 620, 628, 630, 646, 649, 651, 656, 657, 662, 663, 665, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 694, 695, 706, 708, 709, 710, 714, 718, 720, 728, 730, 732, 733, 734, 735, 736, 740, 746, 747, 757, 761, 762, 768, 770, 771, 773, 774, 775, 777, 779, 791, 792, 793, 797, 798, 800, 806, 808, 826, 835, 836, 839, 843, 844, 849, 850, 859], "drop": [1, 115, 121, 122, 193, 232, 261, 296, 298, 299, 521, 541, 584, 600, 627, 664, 666, 859], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 45, 54, 55, 56, 57, 62, 63, 67, 71, 78, 79, 80, 81, 82, 83, 87, 88, 89, 91, 92, 95, 96, 97, 98, 100, 101, 102, 104, 108, 115, 120, 121, 122, 123, 124, 125, 130, 133, 135, 136, 137, 141, 142, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 172, 173, 179, 180, 181, 185, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 215, 232, 242, 243, 245, 254, 256, 259, 302, 305, 307, 308, 310, 312, 314, 315, 318, 319, 321, 327, 328, 331, 336, 342, 363, 377, 379, 387, 390, 394, 396, 400, 401, 402, 403, 404, 406, 407, 408, 415, 422, 423, 445, 446, 449, 455, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 521, 540, 541, 542, 543, 550, 551, 552, 556, 557, 561, 562, 563, 564, 565, 566, 569, 571, 573, 574, 579, 580, 581, 584, 585, 586, 588, 589, 590, 591, 600, 606, 607, 625, 671, 674, 676, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 704, 788, 819, 820, 840, 859], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 98, 106, 123, 124, 131, 172, 188, 232, 266, 338, 344, 426, 430, 432, 433, 434, 435, 443, 444, 445, 446, 449, 479, 521, 542, 573, 600, 632, 696, 712, 739, 800, 804, 806, 807, 808, 809, 817, 818, 819, 820, 823, 842, 859], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 533, 535, 540, 541, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 600], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 137, 160, 232, 245, 262, 281, 282, 284, 285, 286, 347, 350, 351, 354, 357, 359, 360, 361, 363, 387, 388, 431, 435, 438, 439, 440, 443, 445, 446, 447, 449, 452, 454, 462, 473, 476, 478, 479, 484, 488, 510, 511, 514, 521, 552, 567, 600, 628, 648, 823], "tp": [1, 57], "cast": [1, 56, 57, 77, 111, 131, 136, 137, 152, 160, 189, 232, 244, 282, 293, 294, 300, 301, 395, 434, 452, 456, 462, 479, 521, 551, 552, 567, 600, 648, 660, 661, 669, 670, 764, 808, 831, 840, 844, 859], "int64": [1, 56, 57, 123, 131, 136, 137, 160, 172, 184, 232, 293, 294, 303, 306, 309, 311, 313, 316, 322, 336, 395, 456, 462, 473, 489, 521, 542, 551, 552, 567, 573, 600, 660, 661, 672, 675, 681, 683, 686, 689, 695, 705, 764, 781, 831, 842, 843, 844, 859], "int8": [1, 57, 131, 232, 293, 294, 456, 521, 660, 661, 767, 831, 859], "int16": [1, 57, 293, 294, 456, 521, 660, 661, 831, 859], "int32": [1, 57, 79, 108, 109, 136, 137, 232, 281, 307, 331, 462, 521, 551, 552, 600, 676, 704, 844, 859], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 86, 88, 89, 98, 99, 103, 104, 105, 106, 108, 109, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 484, 485, 486, 487, 488, 489, 492, 496, 503, 504, 507, 508, 509, 510, 511, 513, 514, 521, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 600, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 627, 628, 630, 631, 634, 639, 640, 643, 644, 646, 648, 649, 650, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 765, 766, 767, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 806, 808, 819, 820, 823, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 859], "b": [1, 24, 45, 57, 62, 77, 78, 79, 80, 81, 82, 90, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 141, 142, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 241, 244, 245, 255, 259, 262, 266, 268, 280, 281, 282, 289, 297, 298, 299, 336, 338, 340, 341, 342, 346, 347, 350, 353, 356, 357, 358, 359, 360, 361, 363, 366, 368, 373, 382, 386, 390, 398, 415, 421, 439, 453, 454, 455, 465, 467, 469, 470, 476, 479, 481, 484, 488, 489, 492, 503, 508, 510, 511, 521, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 595, 596, 600, 608, 628, 648, 663, 665, 706, 707, 715, 731, 739, 765, 781, 813, 847, 859], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 90, 98, 99, 103, 104, 105, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 240, 241, 242, 245, 254, 255, 256, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 312, 314, 318, 319, 320, 321, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 366, 368, 369, 370, 371, 373, 382, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 422, 423, 424, 427, 429, 430, 431, 432, 435, 437, 438, 442, 443, 444, 445, 446, 447, 448, 453, 454, 455, 457, 458, 459, 463, 465, 466, 467, 469, 470, 476, 477, 478, 479, 484, 488, 489, 492, 496, 507, 510, 511, 514, 521, 534, 535, 536, 537, 541, 542, 543, 544, 547, 550, 551, 552, 554, 555, 556, 557, 559, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 600, 605, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 627, 628, 631, 634, 639, 640, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 683, 684, 685, 687, 689, 691, 693, 694, 697, 698, 701, 702, 703, 705, 707, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 725, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 765, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 790, 792, 793, 794, 795, 796, 798, 803, 804, 805, 806, 809, 812, 817, 821, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 846, 847, 848, 849, 851, 859], "4": [1, 11, 19, 24, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 98, 103, 104, 105, 109, 115, 116, 117, 119, 122, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 159, 160, 161, 162, 166, 170, 173, 174, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 244, 245, 255, 261, 262, 265, 273, 274, 277, 280, 281, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 302, 306, 312, 313, 314, 318, 319, 320, 321, 322, 325, 327, 328, 331, 337, 338, 340, 341, 345, 346, 348, 349, 350, 351, 360, 361, 363, 366, 368, 370, 373, 387, 389, 390, 392, 393, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 414, 417, 421, 422, 423, 424, 427, 435, 436, 438, 441, 443, 445, 446, 449, 455, 457, 458, 459, 462, 463, 476, 479, 484, 488, 510, 511, 514, 521, 534, 535, 536, 541, 543, 544, 545, 546, 550, 551, 552, 555, 556, 557, 559, 562, 563, 564, 565, 566, 567, 568, 569, 574, 575, 576, 578, 580, 581, 583, 585, 586, 587, 588, 589, 591, 594, 595, 596, 600, 608, 611, 618, 627, 628, 631, 639, 640, 643, 649, 650, 652, 662, 663, 665, 674, 675, 680, 682, 685, 686, 687, 688, 692, 693, 694, 695, 696, 698, 700, 701, 712, 714, 715, 723, 726, 731, 733, 734, 735, 736, 738, 750, 757, 758, 759, 762, 771, 773, 774, 775, 776, 777, 779, 781, 791, 795, 796, 801, 809, 810, 812, 815, 817, 819, 820, 823, 833, 834, 844, 851, 859], "c": [1, 24, 28, 45, 55, 57, 79, 81, 90, 98, 107, 116, 117, 118, 119, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 135, 136, 139, 141, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 188, 189, 190, 192, 193, 195, 197, 198, 201, 206, 207, 208, 209, 210, 211, 213, 215, 217, 218, 232, 245, 259, 266, 268, 363, 415, 445, 449, 465, 467, 470, 476, 479, 484, 492, 510, 511, 521, 534, 535, 536, 537, 541, 542, 543, 544, 547, 550, 551, 556, 559, 565, 568, 573, 574, 578, 579, 589, 590, 595, 596, 600, 663, 739, 819, 823, 847, 859], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 54, 55, 57, 58, 59, 63, 77, 79, 80, 81, 82, 85, 89, 103, 108, 109, 115, 116, 117, 119, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 145, 148, 150, 152, 154, 156, 157, 161, 162, 163, 166, 170, 174, 182, 183, 184, 185, 186, 191, 193, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 240, 262, 265, 270, 276, 277, 281, 282, 283, 284, 285, 286, 295, 297, 303, 321, 322, 327, 330, 335, 336, 338, 339, 345, 348, 351, 354, 357, 359, 360, 361, 363, 368, 387, 388, 390, 392, 393, 397, 398, 399, 400, 401, 403, 407, 409, 411, 417, 428, 434, 435, 438, 452, 455, 457, 459, 463, 478, 484, 487, 488, 489, 511, 521, 534, 535, 536, 543, 544, 545, 546, 550, 551, 552, 553, 555, 559, 560, 563, 564, 565, 568, 575, 576, 578, 580, 581, 582, 583, 587, 588, 589, 591, 594, 595, 596, 600, 608, 611, 615, 618, 628, 631, 634, 643, 648, 650, 652, 658, 662, 663, 665, 670, 671, 672, 694, 695, 700, 701, 703, 710, 713, 723, 750, 757, 758, 759, 761, 762, 768, 769, 770, 772, 773, 776, 779, 781, 791, 797, 802, 808, 809, 845, 851, 859], "6": [1, 24, 55, 57, 77, 79, 80, 81, 82, 115, 118, 120, 121, 122, 123, 125, 126, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 147, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 200, 201, 202, 203, 208, 215, 217, 218, 232, 245, 280, 281, 293, 294, 297, 317, 319, 321, 332, 338, 340, 341, 346, 348, 350, 368, 387, 391, 393, 394, 397, 400, 401, 402, 403, 404, 406, 407, 408, 411, 422, 423, 428, 435, 438, 457, 459, 470, 484, 488, 510, 511, 521, 536, 537, 541, 542, 543, 544, 547, 550, 551, 552, 555, 556, 565, 568, 573, 574, 575, 576, 578, 579, 583, 585, 587, 588, 589, 591, 595, 596, 600, 608, 650, 656, 660, 661, 663, 665, 690, 701, 712, 750, 762, 771, 773, 774, 775, 777, 781, 802, 809, 831, 859], "7": [1, 24, 55, 57, 64, 118, 119, 120, 121, 123, 125, 129, 130, 132, 136, 137, 139, 141, 143, 147, 151, 152, 153, 155, 158, 163, 165, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 188, 189, 190, 195, 196, 197, 198, 232, 294, 302, 318, 320, 325, 328, 331, 337, 348, 350, 387, 397, 401, 407, 457, 459, 510, 521, 537, 542, 543, 547, 551, 552, 555, 556, 569, 573, 574, 579, 583, 600, 615, 671, 676, 693, 698, 701, 776, 859], "float32": [1, 24, 57, 131, 232, 727, 859], "lazi": [1, 57, 62, 64, 86, 98, 108, 112, 148, 160, 203, 232, 245, 387, 473, 521, 530, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 594, 600], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 656, 792, 835, 859], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 109, 120, 122, 124, 135, 136, 142, 147, 148, 166, 167, 183, 203, 232, 261, 265, 266, 273, 274, 277, 304, 336, 364, 378, 382, 384, 385, 387, 388, 395, 399, 423, 435, 436, 438, 441, 443, 444, 446, 449, 452, 454, 484, 487, 489, 492, 498, 501, 503, 511, 521, 541, 550, 551, 557, 583, 593, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 627, 631, 632, 634, 639, 640, 643, 646, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 670, 673, 693, 698, 705, 707, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 753, 754, 757, 758, 759, 761, 762, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 790, 791, 792, 793, 795, 796, 798, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 815, 817, 820, 821, 823, 826, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 859], "_": [1, 54, 58, 445, 819], "squar": [1, 58, 205, 364, 424, 521, 594, 740, 797, 859], "cube": [1, 58], "s2": [1, 105, 131, 232, 608, 650, 665, 731, 750, 781, 851, 859], "renam": [1, 88, 89, 232, 241, 373, 380, 454, 521, 600, 829, 840, 859], "n2": 1, "in_plac": [1, 141, 177, 198, 232, 763, 765, 789, 796, 859], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 116, 117, 119, 122, 128, 131, 132, 134, 136, 142, 144, 145, 146, 148, 152, 156, 157, 159, 161, 162, 179, 185, 192, 193, 194, 195, 196, 201, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 232, 240, 242, 243, 244, 245, 260, 281, 290, 291, 292, 293, 294, 320, 321, 325, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 395, 405, 410, 415, 420, 422, 423, 427, 429, 431, 434, 444, 445, 447, 449, 453, 454, 458, 463, 464, 467, 472, 473, 506, 508, 510, 514, 521, 534, 535, 536, 538, 541, 544, 546, 550, 551, 556, 557, 559, 561, 568, 577, 579, 584, 585, 589, 600, 606, 607, 608, 609, 619, 646, 650, 651, 693, 694, 698, 706, 708, 709, 710, 716, 719, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 750, 758, 759, 764, 774, 781, 794, 796, 801, 803, 805, 808, 818, 819, 821, 823, 842, 845, 850, 851, 859], "s3": [1, 99, 859], "n3": 1, "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 160, 189, 232, 492, 567, 600, 609, 842, 859], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 78, 79, 80, 82, 88, 89, 98, 106, 108, 109, 115, 122, 126, 128, 129, 131, 159, 160, 169, 170, 185, 186, 188, 189, 195, 232, 245, 259, 262, 281, 321, 341, 355, 372, 380, 397, 399, 414, 422, 449, 458, 472, 490, 496, 508, 521, 541, 546, 567, 600, 608, 609, 625, 628, 665, 694, 715, 731, 766, 768, 783, 823, 833, 841, 842, 859], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 160, 189, 201, 232, 567, 589, 600, 842, 859], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 521, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859, 865], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 90, 106, 122, 143, 157, 163, 216, 232, 242, 326, 392, 393, 400, 401, 402, 403, 404, 406, 407, 408, 465, 504, 515, 517, 521, 522, 525, 526, 527, 530, 541, 555, 569, 600, 609, 699, 723, 761, 762, 773, 844, 852, 855, 859, 862, 863, 864], "A": [4, 24, 42, 61, 64, 83, 88, 89, 95, 98, 131, 136, 148, 159, 161, 185, 187, 195, 196, 215, 232, 239, 278, 303, 306, 309, 311, 313, 316, 322, 353, 356, 357, 359, 372, 373, 378, 390, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 427, 428, 432, 433, 434, 452, 455, 477, 478, 488, 492, 521, 551, 557, 579, 600, 644, 672, 675, 681, 683, 686, 689, 695, 768, 769, 770, 772, 775, 776, 777, 801, 802, 806, 807, 808, 813, 814, 823, 826, 859], "encod": [4, 53, 88, 89, 98, 187, 232, 429, 803], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 90, 91, 95, 98, 100, 101, 102, 104, 105, 107, 108, 109, 118, 138, 148, 154, 171, 178, 192, 232, 245, 274, 329, 330, 347, 355, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 416, 420, 421, 443, 521, 530, 537, 556, 557, 561, 565, 578, 592, 594, 600, 608, 609, 640, 702, 703, 717, 720, 731, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 783, 794, 795, 817, 842, 859], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 98, 106, 107, 109, 111, 131, 136, 137, 148, 152, 179, 195, 196, 232, 266, 282, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 426, 427, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 452, 477, 479, 492, 521, 538, 539, 549, 551, 552, 557, 592, 600, 632, 648, 690, 693, 698, 799, 800, 801, 805, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 859], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 549, 570, 600], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 530], "share": [5, 45, 124, 232, 707, 859], "option": [5, 6, 7, 54, 64, 78, 79, 86, 88, 90, 91, 95, 100, 102, 103, 106, 107, 108, 109, 112, 115, 122, 148, 154, 157, 185, 187, 192, 196, 201, 232, 245, 364, 372, 399, 400, 401, 402, 403, 404, 406, 407, 408, 420, 442, 443, 448, 470, 473, 496, 521, 530, 556, 557, 565, 589, 594, 600, 609, 740, 768, 769, 770, 771, 772, 773, 775, 776, 777, 783, 794, 811, 816, 817, 822, 840, 859], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 112, 115, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 148, 150, 152, 154, 156, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 173, 175, 176, 178, 179, 180, 181, 182, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 208, 215, 216, 218, 232, 241, 244, 245, 254, 256, 259, 260, 261, 262, 264, 265, 266, 273, 274, 277, 278, 280, 281, 282, 284, 285, 286, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 317, 320, 324, 325, 326, 329, 330, 332, 333, 334, 335, 336, 339, 341, 342, 346, 347, 348, 351, 355, 364, 367, 369, 372, 373, 387, 388, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 457, 458, 463, 464, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 510, 511, 512, 521, 536, 540, 541, 544, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 560, 561, 565, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 605, 608, 609, 618, 621, 625, 626, 627, 628, 630, 631, 632, 639, 640, 643, 644, 646, 648, 652, 653, 654, 658, 659, 660, 661, 662, 664, 665, 669, 670, 673, 690, 693, 697, 698, 699, 702, 703, 706, 707, 708, 709, 710, 713, 714, 715, 716, 720, 721, 740, 742, 757, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 794, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 829, 832, 833, 840, 841, 842, 845, 846, 848, 849, 850, 851, 859], "json": [5, 7, 26, 27, 93, 94, 101, 232, 434, 530, 549, 570, 592, 600, 808], "produc": [5, 108, 109, 377, 497], "reset": 6, "default": [6, 14, 22, 23, 24, 25, 26, 27, 28, 77, 78, 80, 81, 82, 86, 88, 89, 95, 98, 106, 107, 108, 109, 112, 124, 135, 137, 138, 148, 154, 161, 171, 202, 232, 274, 278, 282, 332, 347, 351, 369, 384, 385, 388, 393, 410, 416, 432, 443, 449, 473, 474, 496, 508, 521, 550, 552, 557, 565, 592, 600, 640, 644, 648, 706, 707, 720, 753, 754, 757, 762, 779, 798, 806, 817, 849, 859], "state": [6, 61, 72, 482, 530, 536, 544, 568, 577, 600], "note": [6, 14, 54, 64, 80, 82, 86, 88, 95, 97, 107, 108, 109, 112, 115, 127, 135, 136, 137, 147, 148, 152, 157, 160, 169, 186, 188, 192, 193, 196, 215, 232, 235, 262, 293, 294, 298, 299, 317, 320, 325, 357, 359, 400, 401, 402, 403, 404, 406, 407, 408, 420, 435, 438, 449, 456, 482, 491, 505, 521, 536, 544, 545, 551, 552, 553, 560, 577, 584, 600, 628, 660, 661, 690, 782, 783, 789, 794, 809, 812, 831, 842, 859], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 95, 115, 126, 131, 135, 142, 149, 157, 159, 160, 164, 184, 188, 189, 192, 195, 203, 215, 232, 240, 290, 291, 292, 293, 294, 295, 363, 380, 393, 395, 470, 471, 488, 521, 544, 550, 553, 556, 560, 600, 608, 658, 659, 660, 661, 662, 762, 764, 838, 841, 842, 850, 859], "remov": [6, 120, 232, 235, 336, 437, 442, 448, 489, 521, 540, 600, 811, 816, 822], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 119, 120, 124, 126, 136, 137, 148, 149, 154, 165, 169, 171, 173, 192, 193, 195, 196, 232, 290, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 336, 350, 364, 384, 385, 388, 410, 422, 423, 432, 449, 465, 467, 476, 485, 486, 487, 489, 496, 508, 520, 521, 540, 541, 544, 549, 551, 552, 565, 570, 571, 574, 584, 590, 600, 608, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 707, 725, 740, 753, 754, 755, 757, 779, 806, 848, 851, 859], "environ": [6, 22], "local": [6, 326, 699, 758, 759, 859], "flag": [6, 106, 201, 232, 412, 521, 561, 589, 600, 784, 859], "back": [6, 54, 126, 232, 608, 859], "valu": [6, 9, 22, 24, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 97, 98, 104, 105, 106, 107, 108, 109, 111, 115, 122, 126, 127, 128, 132, 136, 137, 138, 143, 151, 152, 153, 154, 155, 157, 159, 161, 162, 163, 165, 171, 175, 176, 179, 180, 181, 185, 195, 196, 197, 206, 207, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 232, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 267, 269, 270, 271, 273, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 296, 298, 299, 302, 314, 318, 327, 333, 334, 335, 337, 339, 340, 341, 343, 345, 346, 347, 349, 350, 352, 353, 354, 356, 357, 359, 360, 361, 362, 365, 366, 370, 371, 372, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 440, 443, 445, 446, 447, 452, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 476, 479, 480, 482, 483, 484, 490, 491, 496, 498, 499, 500, 501, 502, 505, 506, 511, 514, 521, 541, 545, 546, 551, 552, 554, 555, 562, 563, 564, 565, 566, 569, 571, 575, 576, 579, 580, 581, 586, 593, 600, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 624, 627, 629, 630, 631, 633, 635, 636, 637, 639, 643, 645, 648, 649, 652, 653, 654, 656, 657, 662, 663, 664, 666, 667, 671, 687, 691, 700, 707, 708, 709, 710, 713, 714, 715, 717, 718, 719, 720, 723, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 745, 746, 748, 749, 751, 753, 754, 755, 756, 757, 760, 761, 762, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 786, 787, 792, 793, 794, 800, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 817, 819, 820, 821, 826, 831, 833, 834, 835, 836, 844, 847, 848, 850, 851, 859], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 24, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 85, 89, 90, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 484, 487, 488, 489, 492, 496, 507, 510, 511, 514, 521, 530, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 554, 555, 556, 559, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 600, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 627, 628, 631, 632, 634, 639, 640, 643, 644, 646, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 745, 746, 747, 748, 749, 750, 751, 757, 758, 759, 761, 762, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 790, 791, 792, 793, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 823, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 859], "current": [7, 22, 116, 117, 201, 232, 320, 388, 521, 530, 534, 535, 589, 600, 651, 655, 693, 757, 859], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 262, 628], "bool": [8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 54, 59, 61, 62, 77, 81, 88, 89, 91, 93, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 116, 117, 128, 129, 131, 132, 134, 135, 136, 141, 142, 144, 145, 146, 148, 152, 159, 161, 171, 177, 179, 185, 189, 192, 193, 194, 196, 198, 201, 207, 209, 211, 232, 242, 243, 244, 254, 256, 260, 262, 275, 281, 290, 291, 292, 293, 294, 295, 321, 332, 333, 334, 335, 339, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 372, 393, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 415, 420, 422, 423, 427, 429, 431, 439, 440, 444, 445, 447, 449, 453, 454, 463, 464, 467, 472, 473, 474, 476, 482, 496, 506, 508, 510, 514, 521, 534, 536, 538, 544, 546, 547, 550, 551, 556, 557, 561, 568, 577, 579, 584, 585, 589, 592, 600, 606, 607, 608, 609, 618, 621, 626, 628, 641, 646, 651, 658, 659, 660, 661, 662, 694, 706, 708, 709, 710, 713, 716, 717, 719, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 758, 759, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 783, 784, 789, 794, 796, 801, 803, 805, 813, 814, 818, 819, 821, 823, 841, 842, 845, 846, 848, 850, 859], "ascii": [8, 14, 436, 438, 441, 452, 810, 812, 815, 826], "charact": [8, 9, 14, 20, 24, 88, 89, 98, 232, 317, 344, 435, 436, 441, 442, 444, 445, 448, 452, 521, 568, 600, 690, 809, 810, 811, 815, 816, 818, 819, 822, 826], "print": [8, 9, 11, 13, 19, 103, 123, 135, 149, 232, 349, 521, 554, 600, 731, 768, 859], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 98, 161, 184, 189, 195, 215, 232], "outlin": 8, "fals": [8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 90, 91, 95, 98, 101, 102, 104, 105, 106, 107, 108, 109, 116, 117, 119, 131, 132, 134, 135, 136, 141, 142, 144, 145, 146, 148, 152, 156, 157, 159, 161, 162, 171, 177, 179, 185, 189, 192, 193, 196, 198, 201, 206, 207, 209, 210, 211, 213, 217, 232, 242, 243, 254, 256, 260, 262, 275, 290, 291, 292, 293, 294, 295, 321, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 372, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 415, 420, 422, 423, 427, 429, 431, 439, 440, 444, 445, 447, 449, 463, 464, 467, 473, 474, 482, 496, 506, 508, 510, 514, 521, 534, 535, 536, 538, 544, 550, 551, 556, 557, 559, 561, 568, 577, 579, 589, 600, 608, 618, 621, 628, 641, 646, 650, 651, 658, 659, 660, 661, 662, 694, 706, 708, 709, 710, 716, 724, 726, 728, 731, 732, 733, 734, 735, 736, 738, 740, 750, 758, 759, 762, 763, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 784, 789, 794, 796, 801, 803, 805, 813, 814, 818, 819, 821, 823, 841, 842, 845, 846, 848, 850, 851, 859], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 439, 813], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 428, 433, 802, 807, 840, 859], "shape": [8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 98, 99, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 479, 484, 487, 488, 489, 492, 507, 510, 511, 514, 521, 534, 536, 541, 543, 544, 545, 546, 547, 550, 551, 552, 555, 556, 562, 563, 564, 565, 566, 567, 568, 569, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 594, 595, 596, 600, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 627, 628, 631, 632, 634, 639, 640, 643, 644, 646, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 709, 710, 712, 713, 714, 715, 716, 718, 720, 721, 723, 726, 728, 731, 732, 733, 734, 735, 736, 738, 742, 749, 757, 758, 759, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 786, 790, 791, 792, 793, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 823, 832, 833, 834, 835, 836, 839, 840, 844, 846, 847, 848, 851, 859], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 99, 108, 116, 117, 119, 120, 122, 123, 127, 128, 131, 134, 142, 147, 148, 152, 153, 162, 163, 178, 179, 180, 193, 197, 200, 201, 207, 209, 210, 211, 212, 213, 216, 217, 232, 239, 246, 247, 248, 249, 250, 251, 270, 281, 283, 287, 288, 295, 298, 299, 321, 332, 333, 334, 335, 336, 337, 345, 350, 357, 359, 360, 361, 363, 364, 369, 370, 374, 375, 376, 381, 384, 385, 388, 389, 392, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 418, 419, 420, 424, 425, 460, 461, 468, 476, 478, 489, 521, 534, 541, 545, 546, 556, 563, 564, 569, 579, 580, 586, 588, 589, 600, 610, 611, 612, 613, 614, 615, 649, 656, 657, 662, 663, 694, 709, 710, 714, 718, 757, 768, 770, 771, 773, 774, 775, 777, 778, 792, 793, 797, 835, 836, 859], "int": [9, 11, 19, 20, 24, 28, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 95, 97, 98, 100, 101, 102, 106, 107, 108, 109, 110, 112, 115, 124, 127, 128, 130, 138, 139, 140, 142, 148, 150, 151, 152, 155, 156, 157, 167, 169, 171, 174, 175, 176, 178, 180, 181, 182, 183, 190, 195, 197, 199, 202, 208, 218, 232, 260, 261, 264, 265, 273, 274, 277, 278, 280, 284, 285, 286, 295, 296, 333, 334, 335, 339, 340, 341, 346, 347, 348, 351, 367, 388, 389, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 421, 425, 432, 436, 441, 443, 445, 446, 452, 453, 454, 457, 458, 459, 463, 468, 473, 476, 480, 484, 485, 486, 487, 494, 498, 500, 501, 502, 503, 506, 508, 509, 510, 511, 512, 513, 521, 544, 545, 546, 553, 557, 560, 568, 575, 576, 578, 580, 582, 583, 586, 587, 591, 595, 596, 600, 616, 617, 626, 627, 630, 631, 639, 640, 643, 644, 646, 650, 652, 653, 654, 662, 664, 707, 708, 709, 710, 713, 714, 715, 720, 721, 741, 742, 745, 746, 748, 750, 751, 753, 754, 755, 756, 757, 760, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 787, 790, 795, 798, 806, 810, 815, 817, 819, 820, 826, 831, 832, 833, 834, 845, 849, 859], "number": [9, 11, 19, 20, 24, 28, 54, 73, 85, 86, 88, 89, 90, 98, 101, 107, 108, 112, 124, 125, 127, 128, 139, 149, 150, 156, 157, 171, 175, 176, 182, 195, 206, 208, 218, 232, 261, 265, 273, 277, 278, 280, 289, 295, 296, 305, 307, 312, 314, 321, 327, 328, 331, 333, 334, 335, 339, 341, 346, 348, 357, 359, 366, 367, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 413, 414, 416, 435, 438, 445, 446, 457, 463, 480, 494, 508, 512, 521, 543, 544, 545, 546, 553, 560, 568, 575, 576, 582, 595, 596, 600, 627, 631, 639, 643, 644, 662, 664, 674, 676, 685, 687, 694, 700, 701, 704, 707, 708, 709, 710, 713, 715, 721, 730, 742, 750, 751, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 786, 787, 790, 798, 809, 812, 819, 820, 832, 845, 849, 859], "format": [10, 14, 24, 26, 87, 88, 89, 93, 98, 99, 125, 154, 230, 232, 320, 323, 325, 449, 543, 549, 565, 592, 600, 696, 823, 858], "liter": [10, 14, 59, 64, 90, 109, 151, 152, 155, 156, 159, 173, 181, 185, 232, 242, 243, 363, 394, 427, 439, 440, 473, 485, 486, 496, 506, 510, 514, 521, 546, 574, 600, 606, 607, 782, 783, 801, 813, 814, 859], "left": [10, 64, 104, 105, 136, 137, 147, 148, 232, 333, 334, 335, 350, 400, 401, 402, 403, 404, 406, 407, 408, 436, 452, 462, 476, 482, 483, 491, 505, 521, 551, 552, 556, 557, 600, 708, 709, 710, 810, 826, 844, 859], "center": [10, 333, 334, 335, 399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 708, 709, 710, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "right": [10, 12, 64, 88, 89, 104, 105, 136, 137, 147, 148, 232, 333, 334, 335, 400, 401, 402, 403, 404, 406, 407, 408, 420, 441, 476, 521, 551, 552, 556, 557, 600, 708, 709, 710, 794, 815, 859], "cell": 10, "align": [10, 54, 452, 826], "keyerror": [10, 14], "recognis": [10, 14, 106], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 78, 80, 81, 82, 88, 89, 90, 91, 95, 97, 98, 100, 101, 102, 115, 126, 136, 137, 148, 154, 157, 159, 171, 178, 188, 189, 192, 215, 232, 245, 274, 284, 285, 286, 342, 364, 372, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 416, 420, 421, 422, 423, 435, 438, 443, 444, 445, 446, 449, 463, 470, 472, 473, 474, 480, 482, 491, 496, 508, 521, 551, 552, 556, 557, 561, 565, 578, 592, 594, 600, 608, 609, 640, 652, 653, 654, 719, 740, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 784, 794, 795, 809, 812, 817, 818, 819, 820, 823, 838, 842, 845, 850, 859], "rang": [11, 63, 64, 97, 124, 136, 232, 302, 314, 318, 319, 320, 325, 327, 350, 473, 478, 485, 486, 521, 551, 600, 671, 687, 691, 692, 693, 698, 700, 707, 757, 859], "100": [11, 88, 89, 98, 101, 452, 473, 769, 770, 772, 859], "98": [11, 142, 232, 422, 423, 458, 463, 521], "99": [11, 127, 128, 142, 145, 232, 240, 339, 341, 422, 423, 458, 463, 476, 521, 545, 546, 600, 706, 713, 859], "imove": [12, 326, 333, 334, 335, 400, 401, 403, 407, 521, 699, 708, 709, 710, 769, 770, 772, 776, 859], "inlin": 12, "parenthes": 12, "below": [13, 122, 135, 232, 350, 514, 521, 541, 600], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 91, 95, 98, 100, 101, 108, 109, 111, 115, 123, 124, 126, 128, 131, 136, 160, 169, 173, 232, 284, 285, 286, 333, 334, 335, 341, 372, 378, 449, 482, 491, 521, 546, 551, 574, 600, 608, 652, 653, 654, 707, 708, 709, 710, 715, 782, 783, 859], "displai": [13, 17], "ascii_ful": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": 14, "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 428, 432, 433, 434, 802, 806, 807, 808], "style": [14, 161, 232], "border": 14, "line": [14, 88, 89, 90, 98], "dens": [14, 393, 521, 762, 859], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 90, 91, 95, 98, 100, 101, 102, 107, 108, 115, 122, 126, 129, 131, 136, 138, 139, 144, 146, 148, 149, 150, 154, 157, 178, 182, 183, 186, 193, 195, 202, 205, 208, 218, 232, 245, 338, 344, 348, 367, 388, 397, 421, 457, 482, 483, 491, 494, 505, 512, 521, 536, 541, 544, 547, 548, 551, 553, 557, 558, 560, 561, 565, 578, 582, 583, 584, 591, 594, 595, 596, 600, 608, 712, 721, 742, 757, 766, 795, 832, 859], "space": 14, "horizont": [14, 62, 131, 141, 195, 232, 479, 482, 483, 484, 488, 491, 498, 501, 505, 511], "markdown": 14, "compat": [14, 28, 232], "same": [14, 45, 54, 61, 104, 107, 115, 193, 205, 232, 239, 244, 245, 338, 344, 399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 584, 594, 600, 604, 608, 609, 712, 768, 769, 770, 771, 772, 773, 775, 776, 777, 851, 859], "No": 14, "The": [14, 28, 39, 46, 54, 60, 85, 88, 95, 97, 98, 115, 136, 137, 138, 143, 148, 169, 194, 196, 205, 215, 232, 245, 280, 302, 314, 317, 318, 320, 325, 327, 339, 344, 346, 347, 372, 393, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 420, 423, 426, 429, 430, 435, 436, 441, 452, 474, 515, 517, 521, 522, 525, 526, 527, 534, 550, 551, 552, 553, 555, 557, 560, 561, 568, 585, 594, 600, 651, 671, 687, 690, 691, 693, 698, 700, 713, 720, 723, 762, 768, 769, 770, 771, 772, 773, 775, 776, 777, 794, 800, 803, 804, 809, 810, 815, 826, 852, 855, 859, 862, 863, 864], "one": [14, 54, 70, 109, 128, 129, 136, 137, 154, 161, 169, 187, 191, 203, 204, 215, 232, 240, 341, 363, 399, 422, 423, 453, 458, 470, 510, 511, 521, 540, 546, 547, 551, 552, 565, 590, 600, 608, 715, 768, 827, 859], "more": [14, 26, 28, 54, 76, 95, 108, 109, 115, 135, 149, 154, 157, 169, 171, 193, 205, 232, 245, 284, 285, 286, 363, 364, 372, 410, 420, 464, 511, 521, 550, 565, 584, 594, 600, 609, 652, 653, 654, 740, 779, 794, 846, 859, 866], "semigraph": 14, "box": [14, 115, 232], "draw": [14, 19, 20], "found": [14, 24, 71, 123, 232, 434, 449, 454, 808], "unicod": 14, "block": [14, 591, 600, 782, 783, 859], "http": [14, 432, 806, 866], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 80, 82, 88, 91, 95, 100, 102, 473, 782, 783, 859], "inform": [17, 60, 79, 232, 284, 285, 286, 364, 420, 521, 568, 600, 652, 653, 654, 740, 794, 859], "separ": [18, 24, 192, 232, 266, 344, 479, 482, 483, 521, 632], "between": [18, 26, 62, 93, 106, 107, 108, 109, 163, 216, 232, 266, 281, 297, 351, 388, 392, 404, 426, 481, 503, 504, 508, 521, 569, 600, 632, 646, 665, 757, 761, 773, 800, 859], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 108, 109, 119, 128, 136, 137, 161, 232, 284, 285, 291, 341, 387, 393, 400, 412, 446, 521, 546, 551, 552, 593, 600, 652, 653, 658, 663, 715, 762, 769, 784, 820, 859], "both": [19, 24, 45, 64, 136, 137, 147, 148, 169, 232, 244, 351, 400, 401, 402, 403, 404, 406, 407, 408, 437, 442, 448, 521, 551, 552, 556, 557, 600], "element": [19, 86, 109, 112, 246, 247, 248, 249, 250, 251, 262, 287, 288, 290, 291, 292, 293, 294, 295, 337, 347, 355, 370, 388, 393, 396, 411, 417, 418, 419, 424, 445, 446, 460, 461, 463, 521, 609, 610, 611, 612, 613, 614, 615, 628, 656, 657, 658, 659, 660, 661, 662, 711, 716, 731, 744, 757, 762, 780, 791, 792, 793, 797, 798, 819, 820, 835, 836, 845, 846, 849, 859], "width": [20, 88, 89, 232, 436, 441, 452, 600, 810, 815, 826], "char": [20, 45, 438, 812], "enabl": [21, 412, 521, 784, 859], "addit": [21, 106, 107], "verbos": 21, "debug": [21, 536, 544, 561, 600], "log": [21, 56, 332, 463, 521, 706, 845, 859], "if_set": 22, "dict": [22, 28, 46, 55, 57, 60, 78, 79, 88, 89, 90, 91, 92, 95, 96, 98, 100, 102, 108, 159, 165, 172, 185, 186, 232, 561, 571, 573, 594, 600, 717, 859], "none": [22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 116, 119, 122, 127, 128, 136, 137, 138, 143, 147, 148, 154, 157, 158, 169, 171, 176, 178, 185, 187, 192, 193, 194, 195, 196, 201, 232, 241, 244, 245, 255, 264, 274, 278, 280, 284, 285, 286, 289, 298, 299, 320, 325, 330, 333, 334, 335, 336, 339, 340, 341, 346, 347, 350, 357, 358, 359, 360, 361, 366, 372, 386, 388, 394, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 414, 415, 416, 417, 421, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 441, 442, 443, 445, 446, 447, 448, 449, 452, 453, 454, 462, 470, 472, 473, 476, 479, 480, 486, 487, 489, 490, 496, 497, 506, 509, 510, 513, 521, 534, 535, 541, 545, 546, 551, 552, 555, 556, 557, 559, 561, 565, 576, 577, 578, 584, 585, 589, 590, 592, 594, 600, 609, 616, 617, 630, 640, 644, 651, 652, 663, 665, 693, 698, 703, 706, 708, 709, 710, 713, 714, 715, 719, 720, 722, 723, 735, 736, 740, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 787, 790, 791, 794, 795, 798, 800, 801, 803, 804, 805, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 822, 823, 837, 840, 841, 844, 849, 850, 859], "show": [22, 122, 149, 158, 232, 541, 568, 577, 600], "variabl": [22, 83, 154, 187, 232, 565, 600, 839, 859], "chang": [22, 54, 63, 88, 89, 99, 195, 196, 232, 295, 320, 388, 400, 401, 402, 403, 404, 406, 407, 408, 521, 662, 670, 693, 757, 789, 859], "restrict": [22, 446, 820], "dictionari": [22, 78, 79, 82, 88, 89, 92, 96, 98, 159, 185, 186, 232, 663, 717, 859], "includ": [22, 24, 60, 108, 124, 136, 192, 195, 232, 321, 351, 444, 445, 482, 521, 551, 600, 694, 707, 818, 819, 850, 859], "those": [22, 393, 521, 762, 859], "_have_": 22, "been": [22, 235, 393, 521, 762, 859], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 126, 232, 544, 570, 592, 600, 608, 859], "binaryio": [23, 25, 87, 88, 90, 91, 92, 95, 96, 232], "bytesio": [23, 24, 25, 28, 87, 88, 89, 90, 91, 95, 232], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 232, 412, 434, 521, 570, 592, 600, 784, 808, 859], "compress": [23, 25, 28, 232], "avrocompress": [23, 232], "uncompress": [23, 25, 28, 91, 100, 232], "write": [23, 24, 25, 26, 28, 232, 284, 285, 286, 521, 559, 577, 592, 600, 652, 653, 654, 859], "apach": [23, 28, 87, 232], "avro": [23, 87, 232, 530], "should": [23, 24, 25, 26, 27, 28, 86, 106, 107, 109, 112, 115, 136, 148, 205, 232, 240, 245, 262, 282, 295, 329, 357, 359, 399, 400, 401, 402, 403, 404, 406, 407, 408, 411, 420, 442, 448, 496, 521, 540, 551, 556, 557, 561, 577, 592, 594, 600, 609, 628, 648, 662, 702, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 794, 811, 816, 822, 859], "written": [23, 24, 25, 26, 27, 28, 232, 592, 600], "snappi": [23, 28, 232], "deflat": [23, 232], "has_head": [24, 88, 89, 90, 98, 232], "sep": [24, 85, 88, 89, 98, 232, 479], "quot": [24, 88, 89, 98, 232], "batch_siz": [24, 88, 89, 101, 232], "1024": [24, 28, 88, 89, 101, 232], "datetime_format": [24, 232], "date_format": [24, 232], "time_format": [24, 232], "float_precis": [24, 232], "null_valu": [24, 88, 89, 98, 232], "textio": [24, 88, 232], "_io": [24, 87, 90, 91, 232], "pathlib": [24, 26, 27, 87, 90, 91, 92, 93, 94, 96, 98, 100, 101, 232, 570, 592, 600], "comma": [24, 232], "csv": [24, 88, 89, 90, 98, 232, 530, 593], "result": [24, 26, 27, 54, 78, 80, 82, 97, 98, 100, 102, 109, 126, 136, 157, 176, 203, 232, 333, 334, 335, 364, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 412, 414, 444, 445, 473, 482, 483, 484, 497, 511, 521, 533, 551, 561, 568, 576, 592, 600, 608, 708, 709, 710, 740, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 784, 787, 818, 819, 842, 859], "instead": [24, 26, 27, 86, 95, 108, 112, 115, 136, 152, 157, 159, 232, 254, 256, 435, 473, 511, 521, 545, 550, 551, 592, 600, 618, 621, 782, 783, 809, 859], "whether": [24, 59, 64, 80, 82, 109, 136, 137, 232, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 600], "header": [24, 28, 88, 89, 90, 98, 123, 161, 192, 232], "field": [24, 46, 194, 232, 278, 445, 446, 454, 482, 483, 585, 600, 644, 819, 820, 829], "symbol": [24, 232], "byte": [24, 88, 89, 90, 91, 92, 95, 96, 98, 124, 232, 435, 438, 707, 809, 812, 859], "process": [24, 232], "per": [24, 107, 108, 157, 158, 212, 214, 216, 219, 220, 221, 222, 223, 224, 225, 226, 232, 262, 264, 628, 630], "thread": [24, 85, 88, 89, 97, 110, 232, 262, 628], "specifi": [24, 54, 64, 71, 78, 80, 82, 108, 124, 128, 232, 333, 334, 335, 341, 396, 436, 441, 521, 546, 600, 707, 708, 709, 710, 715, 810, 815, 859], "defin": [24, 31, 64, 106, 107, 108, 115, 136, 137, 157, 160, 205, 232, 245, 400, 401, 402, 403, 404, 406, 407, 408, 472, 496, 521, 551, 552, 567, 594, 600, 609, 859], "chrono": [24, 232, 323, 449, 696, 823], "rust": [24, 28, 72, 91, 95, 115, 205, 232, 245, 521, 594], "crate": [24, 232], "fraction": [24, 104, 105, 171, 232, 321, 388, 410, 449, 521, 694, 757, 779, 859], "second": [24, 64, 136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 449, 474, 486, 487, 521, 551, 552, 557, 600, 690, 693, 698], "precis": [24, 232, 300, 449, 669], "infer": [24, 79, 80, 82, 88, 89, 90, 98, 101, 106, 115, 232, 397, 449, 521, 766, 859], "maximum": [24, 88, 89, 98, 107, 108, 109, 151, 232, 257, 284, 285, 374, 384, 393, 498, 521, 562, 600, 623, 652, 653, 677, 745, 753, 758, 762, 859], "timeunit": [24, 31, 32, 64, 232, 300, 324, 329, 669, 697, 702, 837, 859], "frame": [24, 54, 90, 108, 115, 157, 160, 189, 195, 232, 567, 600], "datetim": [24, 64, 81, 119, 136, 137, 148, 196, 232, 260, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 351, 400, 401, 402, 403, 404, 406, 407, 408, 449, 462, 476, 487, 496, 501, 521, 551, 552, 557, 600, 626, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 725, 745, 748, 753, 754, 783, 823, 837, 844, 859], "decim": [24, 232, 409, 521, 778, 859], "place": [24, 121, 141, 142, 166, 175, 176, 179, 198, 232, 254, 256, 266, 273, 413, 414, 521, 575, 576, 579, 600, 618, 621, 632, 639, 763, 765, 786, 787, 796, 859], "appli": [24, 59, 62, 98, 106, 108, 109, 122, 131, 160, 203, 232, 302, 305, 307, 308, 310, 312, 314, 315, 318, 319, 321, 327, 328, 331, 334, 335, 372, 387, 399, 400, 401, 403, 407, 470, 473, 482, 483, 491, 497, 505, 521, 541, 553, 560, 561, 567, 600, 671, 674, 676, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 704, 709, 710, 768, 769, 770, 772, 776, 859], "float64": [24, 86, 108, 112, 123, 124, 131, 172, 232, 246, 247, 248, 249, 250, 251, 281, 287, 288, 321, 336, 357, 359, 418, 419, 460, 461, 476, 489, 521, 542, 573, 600, 694], "datatyp": [24, 39, 46, 52, 79, 84, 86, 88, 89, 90, 92, 96, 106, 107, 108, 109, 112, 115, 123, 131, 172, 232, 245, 281, 336, 372, 415, 449, 462, 472, 473, 477, 489, 496, 497, 521, 530, 542, 561, 573, 594, 600, 609, 646, 663, 705, 722, 725, 737, 739, 788, 823, 844, 859], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 232, 357, 359, 477, 496, 521, 783, 798, 849, 859], "null": [24, 54, 62, 79, 88, 89, 98, 119, 122, 128, 131, 132, 143, 147, 152, 153, 158, 163, 175, 176, 179, 180, 181, 185, 194, 197, 211, 232, 241, 244, 254, 256, 261, 263, 264, 267, 273, 278, 280, 284, 285, 286, 289, 296, 298, 299, 303, 306, 309, 311, 313, 316, 322, 333, 334, 335, 336, 339, 340, 341, 342, 346, 350, 357, 358, 359, 360, 361, 366, 386, 388, 394, 399, 400, 401, 402, 403, 404, 406, 407, 408, 413, 414, 415, 417, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 443, 445, 446, 447, 452, 462, 469, 470, 476, 478, 479, 489, 496, 510, 521, 541, 546, 555, 556, 575, 576, 579, 585, 590, 600, 609, 618, 621, 627, 639, 644, 652, 664, 667, 672, 675, 681, 683, 686, 689, 695, 708, 709, 710, 713, 715, 719, 735, 736, 756, 757, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 786, 787, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 819, 820, 821, 842, 844, 850, 859], "empti": [24, 69, 90, 116, 117, 145, 154, 232, 507, 534, 535, 565, 600, 651, 655, 727, 859], "import": [24, 31, 64, 77, 80, 81, 97, 98, 99, 104, 105, 106, 107, 108, 109, 119, 136, 148, 189, 195, 196, 232, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 487, 496, 551, 561, 600, 656, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 725, 728, 732, 733, 734, 768, 792, 835, 859], "foo": [24, 115, 118, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 147, 150, 151, 152, 153, 155, 158, 159, 161, 163, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 194, 197, 198, 199, 203, 215, 232, 241, 260, 263, 264, 267, 268, 284, 285, 286, 317, 344, 348, 349, 389, 397, 413, 414, 426, 428, 429, 430, 433, 437, 442, 444, 446, 448, 450, 451, 457, 459, 470, 473, 477, 493, 496, 504, 507, 514, 521, 537, 541, 542, 547, 554, 555, 556, 573, 574, 579, 585, 587, 589, 590, 600, 632, 652, 690, 802, 803, 804, 807, 820, 859], "bar": [24, 115, 118, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 139, 141, 142, 143, 145, 147, 150, 151, 152, 153, 155, 158, 159, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 194, 197, 198, 203, 215, 232, 241, 268, 349, 420, 429, 430, 444, 446, 470, 507, 514, 521, 537, 541, 542, 547, 554, 555, 556, 573, 574, 579, 585, 587, 600, 632, 794, 803, 804, 820, 859], "8": [24, 38, 51, 53, 54, 55, 57, 58, 103, 107, 108, 115, 118, 119, 120, 121, 122, 123, 125, 129, 130, 132, 139, 141, 147, 151, 152, 153, 155, 163, 165, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 188, 189, 190, 195, 197, 198, 201, 232, 244, 255, 261, 262, 289, 295, 298, 299, 350, 366, 387, 389, 390, 397, 398, 401, 402, 404, 406, 408, 415, 421, 436, 441, 449, 455, 459, 484, 488, 510, 511, 521, 537, 541, 542, 543, 547, 556, 568, 573, 574, 579, 583, 589, 600, 627, 628, 662, 676, 757, 768, 771, 773, 774, 775, 777, 810, 815, 823, 859], "9": [24, 54, 115, 131, 137, 139, 143, 173, 182, 195, 198, 200, 201, 203, 217, 232, 244, 255, 272, 275, 289, 294, 298, 299, 302, 318, 327, 328, 350, 355, 363, 366, 387, 397, 399, 401, 407, 417, 421, 459, 476, 478, 510, 521, 552, 555, 574, 588, 589, 600, 671, 680, 682, 688, 693, 694, 698, 700, 712, 731, 768, 776, 778, 791, 859], "ham": [24, 118, 120, 121, 122, 123, 129, 130, 132, 138, 139, 141, 147, 151, 152, 153, 155, 158, 163, 165, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 187, 188, 189, 190, 197, 198, 232, 477, 537, 541, 542, 547, 556, 573, 574, 579, 590, 600], "d": [24, 45, 99, 119, 138, 139, 142, 147, 150, 182, 184, 195, 198, 201, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 304, 344, 415, 428, 433, 445, 449, 476, 521, 556, 589, 600, 673, 696, 802, 807, 819, 823], "e": [24, 45, 88, 89, 90, 91, 95, 100, 102, 119, 139, 150, 182, 184, 195, 201, 232, 332, 336, 344, 369, 412, 415, 420, 489, 521, 559, 589, 600, 706, 781, 784, 794, 842, 859], "dirpath": [24, 98, 232], "new_fil": [24, 232], "ipccompress": [25, 232], "arrow": [25, 65, 77, 91, 100, 184, 215, 232, 838, 842, 859], "ipc": [25, 91, 92, 99, 100, 232, 530], "binari": [25, 232], "stream": [25, 61, 232, 536, 538, 544, 568, 577, 600], "feather": [25, 91, 100, 232, 530], "lz4": [25, 28, 232], "zstd": [25, 28, 232], "pretti": [26, 232], "row_ori": [26, 232], "json_lin": [26, 93, 232], "to_str": [26, 232, 592, 600], "io": [26, 27, 93, 94, 232, 570, 592, 600, 866], "iobas": [26, 27, 93, 94, 232, 570, 592, 600], "serial": [26, 27, 232], "represent": [26, 27, 232, 282, 302, 305, 307, 308, 310, 312, 314, 315, 318, 319, 321, 327, 328, 331, 462, 521, 538, 539, 559, 600, 648, 671, 674, 676, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 704, 844, 859], "orient": [26, 55, 57, 80, 82, 232], "slower": [26, 80, 82, 115, 159, 196, 205, 232, 245, 521, 594], "common": [26, 232], "deprec": [26, 61, 93, 232, 235, 592, 600], "argument": [26, 28, 61, 88, 93, 95, 136, 137, 152, 160, 161, 181, 189, 196, 232, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 567, 592, 600, 693, 698, 859], "toggl": [26, 93, 111, 232], "ndjson": [26, 93, 232], "ignor": [26, 61, 108, 109, 152, 181, 232, 261, 296, 384, 385, 521, 592, 600, 627, 664, 753, 754, 859], "write_ndjson": [26, 232], "newlin": [27, 94, 101, 232], "delimit": [27, 88, 89, 94, 98, 101, 232, 426, 800], "parquetcompress": [28, 232], "compression_level": [28, 232], "statist": [28, 88, 89, 119, 232, 334, 335, 364, 400, 401, 402, 403, 404, 405, 406, 407, 408, 420, 521, 663, 709, 710, 740, 774, 794, 859], "row_group_s": [28, 232], "use_pyarrow": [28, 88, 91, 95, 232, 841, 859], "pyarrow_opt": [28, 95, 232], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 107, 108, 109, 149, 189, 232, 496, 530, 535, 550, 554, 559, 570, 600, 622, 647, 668, 799, 838, 859], "parquet": [28, 95, 96, 102, 232, 530], "gzip": [28, 232], "lzo": [28, 232], "brotli": [28, 232], "choos": [28, 232], "good": [28, 232], "perform": [28, 69, 88, 89, 91, 95, 98, 100, 101, 102, 115, 136, 137, 148, 164, 205, 232, 245, 521, 551, 552, 557, 591, 594, 600], "fast": [28, 232, 412, 521, 784, 859], "decompress": [28, 232], "backward": [28, 128, 148, 232, 280, 341, 521, 546, 557, 600, 715, 859], "guarante": [28, 88, 89, 232, 544, 600], "deal": [28, 232, 393, 449, 521, 762, 823, 859], "older": [28, 232], "reader": [28, 85, 88, 89, 91, 95, 232, 531], "level": [28, 98, 100, 101, 102, 108, 115, 131, 157, 232, 342, 521, 553, 560, 600], "higher": [28, 163, 216, 232, 392, 404, 504, 521, 569, 600, 761, 773, 859], "mean": [28, 83, 88, 89, 95, 98, 119, 128, 161, 187, 232, 338, 341, 344, 401, 420, 432, 475, 521, 546, 600, 663, 712, 715, 719, 770, 794, 806, 859], "smaller": [28, 124, 232, 544, 600, 707, 859], "disk": [28, 232, 577, 600], "min": [28, 108, 109, 119, 128, 136, 137, 161, 232, 284, 286, 292, 341, 393, 403, 507, 521, 546, 551, 552, 600, 652, 654, 659, 663, 715, 762, 772, 859], "11": [28, 135, 137, 232, 298, 299, 317, 320, 325, 350, 388, 407, 421, 452, 477, 511, 521, 536, 550, 552, 568, 600, 609, 690, 693, 698, 768, 859], "22": [28, 232, 320, 325, 329, 449, 477, 693, 698, 702, 823], "extra": [28, 88, 90, 91, 95, 100, 102, 126, 159, 232, 608, 859], "comput": [28, 61, 62, 66, 124, 148, 193, 216, 232, 239, 246, 247, 248, 249, 250, 251, 269, 270, 271, 287, 288, 290, 291, 292, 293, 294, 297, 332, 337, 364, 369, 370, 382, 388, 391, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 417, 418, 419, 420, 424, 460, 461, 481, 488, 503, 508, 521, 554, 556, 557, 584, 590, 600, 604, 610, 611, 612, 613, 614, 615, 635, 636, 637, 656, 657, 658, 659, 660, 661, 665, 706, 707, 711, 740, 743, 744, 749, 757, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 791, 792, 793, 794, 797, 835, 836, 859], "size": [28, 88, 89, 107, 108, 109, 110, 124, 136, 195, 232, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 473, 521, 551, 600, 707, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 859], "group": [28, 135, 136, 137, 157, 159, 161, 195, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232, 240, 245, 262, 387, 422, 423, 432, 458, 472, 521, 550, 551, 552, 593, 594, 595, 596, 600, 628, 806], "chunk": [28, 85, 88, 89, 98, 100, 101, 102, 108, 109, 126, 156, 232, 244, 394, 521, 608, 650, 750, 763, 838, 859], "reduc": [28, 88, 89, 95, 98, 100, 101, 102, 210, 211, 213, 217, 232, 415, 491, 521, 746, 760, 788, 831, 859], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 91, 95, 98, 100, 101, 102, 115, 126, 177, 205, 215, 232, 245, 394, 415, 521, 594, 608, 763, 788, 789, 859], "pressur": [28, 95, 101, 102, 232, 415, 521, 788, 859], "improv": [28, 91, 100, 232], "speed": [28, 232], "minimum": [28, 107, 108, 109, 131, 155, 232, 284, 286, 333, 334, 335, 381, 385, 393, 501, 521, 566, 600, 652, 654, 684, 708, 709, 710, 754, 759, 762, 859], "64": [28, 34, 37, 50, 56, 58, 232, 389, 521, 757, 859], "implement": [28, 115, 205, 232, 245, 521, 594, 782, 783, 859], "v": [28, 63, 124, 232, 411, 521, 780, 859], "At": [28, 232], "moment": [28, 232, 364, 420, 521, 740, 794, 859], "pass": [28, 54, 64, 78, 90, 107, 108, 109, 160, 232, 304, 349, 521, 554, 561, 567, 577, 600, 609, 673, 859], "pyarrow": [28, 77, 81, 88, 91, 95, 99, 103, 184, 188, 189, 232, 531, 838, 841, 842, 859], "write_t": [28, 232], "base": [29, 122, 129, 136, 137, 215, 232, 332, 369, 370, 498, 501, 521, 530, 541, 547, 551, 552, 600, 706, 743, 744, 851, 859], "calendar": [30, 31, 136, 137, 148, 196, 232, 307, 317, 320, 325, 331, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 676, 690, 693, 698, 704], "date": [31, 54, 64, 88, 89, 98, 99, 119, 136, 137, 148, 189, 232, 260, 300, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 351, 400, 401, 402, 403, 404, 406, 407, 408, 449, 462, 476, 501, 521, 530, 551, 552, 557, 600, 626, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 725, 745, 748, 753, 754, 783, 823, 844, 859], "time": [31, 32, 60, 61, 64, 98, 126, 136, 137, 148, 196, 232, 259, 260, 300, 301, 304, 317, 324, 326, 329, 330, 449, 462, 463, 478, 479, 485, 486, 487, 506, 521, 530, 536, 551, 552, 557, 568, 600, 608, 625, 669, 670, 673, 690, 697, 699, 702, 703, 823, 837, 844, 845, 859], "time_unit": [31, 32, 64, 329, 702, 859], "u": [31, 32, 64, 300, 304, 324, 329, 449, 506, 669, 673, 697, 702, 837, 859], "time_zon": [31, 64], "m": [31, 32, 64, 159, 232, 300, 304, 324, 329, 449, 487, 669, 673, 696, 697, 702, 823, 837, 859], "unit": [31, 32, 64, 108, 109, 124, 232, 300, 304, 324, 329, 371, 378, 466, 521, 568, 600, 669, 673, 697, 702, 707, 837, 859], "timezon": [31, 64], "zoneinfo": 31, "run": [31, 61, 115, 149, 205, 232, 245, 262, 295, 506, 507, 521, 536, 544, 568, 577, 594, 600, 628, 662, 859, 865], "available_timezon": 31, "full": [31, 60, 88, 89, 98], "attribut": [31, 32, 39, 106, 232, 515, 517, 522, 525, 526, 527, 600, 852, 855, 859, 862, 863, 864], "delta": [32, 503, 508, 798, 849, 859], "32": [33, 36, 49, 56, 103, 137, 232, 415, 521, 552, 600, 665, 691, 757, 773, 859], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 395, 427, 521, 764, 801, 859], "float": [33, 34, 63, 99, 104, 105, 106, 108, 109, 124, 127, 148, 163, 171, 176, 216, 232, 260, 283, 284, 285, 286, 298, 299, 321, 332, 333, 334, 335, 339, 340, 345, 350, 351, 353, 356, 357, 359, 360, 361, 369, 374, 381, 384, 385, 389, 392, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 414, 475, 476, 484, 498, 499, 500, 501, 504, 506, 509, 511, 513, 521, 545, 557, 569, 576, 577, 600, 626, 646, 649, 652, 653, 654, 665, 694, 706, 707, 708, 709, 710, 713, 714, 718, 730, 740, 743, 745, 746, 747, 748, 753, 754, 760, 761, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 794, 798, 831, 849, 859], "point": [33, 34, 108, 109, 127, 136, 149, 171, 232, 283, 298, 299, 321, 340, 345, 357, 359, 409, 410, 521, 545, 551, 561, 600, 649, 694, 714, 718, 730, 778, 779, 859], "16": [35, 48, 56, 103, 136, 137, 200, 201, 232, 350, 401, 487, 488, 521, 551, 552, 577, 588, 589, 600, 693, 698, 757, 792, 835, 859], "sign": [35, 36, 37, 38, 317, 395, 452, 521, 690, 764, 826, 859], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 107, 108, 136, 137, 232, 283, 321, 345, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 473, 496, 521, 551, 552, 600, 616, 617, 649, 694, 718, 764, 774, 783, 859], "inner": [39, 45, 147, 232, 266, 297, 521, 556, 600, 632, 665, 722, 859], "union": [39, 46, 54, 61, 62, 78, 79, 84, 86, 106, 107, 108, 109, 112, 115, 120, 122, 123, 125, 135, 151, 152, 154, 155, 157, 159, 165, 172, 173, 179, 181, 192, 194, 196, 201, 203, 232, 245, 281, 336, 355, 372, 449, 470, 471, 473, 474, 476, 477, 478, 479, 483, 484, 489, 497, 498, 501, 505, 507, 510, 511, 521, 536, 543, 544, 550, 561, 568, 573, 574, 577, 579, 589, 593, 594, 600, 609, 665, 731, 783, 823, 859], "nest": [39, 45, 124, 232, 530, 707, 859], "arrai": [39, 77, 80, 88, 89, 124, 184, 188, 232, 259, 268, 269, 270, 271, 272, 275, 276, 284, 285, 286, 290, 291, 292, 293, 294, 370, 400, 401, 403, 406, 407, 408, 412, 428, 430, 432, 433, 434, 478, 488, 521, 625, 634, 635, 636, 637, 638, 641, 642, 652, 653, 654, 658, 659, 660, 661, 665, 707, 744, 769, 770, 772, 775, 776, 777, 784, 789, 802, 804, 806, 807, 808, 838, 842, 850, 859], "within": [39, 104, 105, 148, 232, 557, 600], "wrap": 41, "arbitrari": [41, 108], "python": [41, 64, 88, 89, 103, 115, 170, 205, 232, 245, 372, 472, 521, 594, 609, 677, 678, 679, 684, 841, 859], "queri": [42, 61, 91, 97, 98, 100, 101, 102, 126, 149, 160, 232, 434, 536, 538, 539, 544, 553, 560, 568, 577, 591, 594, 600, 608, 808, 859, 865], "pars": [42, 88, 89, 90, 98, 100, 101, 449, 823], "given": [42, 44, 54, 63, 86, 88, 89, 98, 106, 107, 108, 109, 112, 115, 124, 160, 169, 175, 176, 232, 260, 273, 324, 332, 339, 369, 393, 396, 397, 400, 401, 403, 406, 407, 408, 413, 414, 433, 449, 463, 470, 521, 567, 575, 576, 600, 609, 626, 639, 697, 706, 707, 713, 743, 755, 762, 766, 769, 770, 772, 775, 776, 777, 786, 787, 807, 845, 851, 859], "transform": [42, 115, 232, 372, 450, 451, 521], "lf": [44, 542, 547, 573, 587, 600], "under": [44, 55, 56, 57, 58, 515, 517, 522, 525, 526, 527, 852, 855, 862, 863, 864], "add": [44, 115, 126, 136, 201, 202, 232, 390, 455, 487, 514, 521, 551, 556, 588, 589, 590, 591, 600, 608, 859], "context": [45, 157, 232, 240, 245, 262, 342, 377, 422, 423, 467, 472, 480, 490, 507, 520, 521, 590, 600, 628], "manag": 45, "categor": [45, 83, 111, 147, 232, 282, 462, 521, 647, 648, 844, 859], "temporarili": [45, 136, 137, 232, 551, 552, 600], "cach": [45, 61, 91, 98, 100, 102, 111, 400, 401, 402, 403, 404, 406, 407, 408, 521, 536, 544, 568, 577, 600], "categori": [45, 63, 111, 282, 648], "until": [45, 149, 232], "finish": [45, 66, 126, 232, 608, 859], "global": [45, 108, 111], "invalid": [45, 88, 89, 98, 429, 434, 803, 808], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 104, 126, 132, 198, 232], "color": [45, 205, 594], "red": [45, 205, 594], "green": [45, 205, 594], "blue": 45, "orang": [45, 118, 206, 207, 209, 210, 211, 213, 216, 217, 232], "uint8": [45, 106, 152, 232, 293, 294, 456, 521, 660, 661, 831, 859], "df2": [45, 54, 62, 104, 126, 132, 198, 232], "yellow": 45, "black": [45, 115, 232], "join": [45, 54, 61, 148, 232, 350, 387, 521, 536, 544, 557, 568, 577, 590, 600], "succe": [45, 88, 89, 98], "df_join": 45, "how": [45, 62, 79, 82, 97, 122, 147, 195, 232, 261, 282, 296, 350, 396, 429, 521, 541, 556, 600, 627, 648, 664, 803, 859], "cat": [45, 63, 427, 450, 451, 462, 479, 517, 521, 801, 855], "u8": [45, 187, 232, 839, 859], "sequenc": [46, 54, 61, 62, 78, 79, 80, 82, 85, 107, 108, 109, 120, 122, 125, 126, 135, 136, 137, 147, 148, 154, 157, 159, 160, 161, 173, 179, 187, 192, 193, 194, 195, 196, 201, 203, 232, 336, 355, 372, 470, 471, 472, 474, 476, 477, 478, 479, 482, 483, 484, 489, 491, 497, 498, 501, 505, 507, 510, 511, 521, 543, 550, 551, 552, 556, 557, 567, 574, 579, 589, 593, 600, 608, 665, 731, 783, 859], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 91, 95, 97, 100, 102, 135, 136, 137, 157, 164, 196, 232, 326, 334, 335, 396, 445, 452, 521, 550, 551, 552, 600, 699, 709, 710, 819, 826, 859], "up": [46, 148, 232, 283, 452, 521, 556, 557, 561, 600, 649, 826, 859], "dai": [47, 64, 136, 137, 148, 196, 232, 304, 314, 317, 318, 319, 320, 324, 325, 327, 328, 331, 400, 401, 402, 403, 404, 406, 407, 408, 485, 486, 487, 521, 551, 552, 557, 600, 690, 691, 693, 698, 701], "unsign": [48, 49, 50, 51, 395, 521, 764, 859], "could": [52, 66, 122, 136, 232, 281, 482, 491, 521, 541, 551, 600, 646, 859], "determin": [52, 54, 62, 79, 82, 88, 89, 90, 95, 102, 115, 131, 136, 137, 192, 196, 232, 278, 282, 377, 396, 400, 401, 402, 403, 404, 406, 407, 408, 420, 474, 521, 551, 552, 600, 644, 648, 794, 859], "static": [52, 594], "utf": 53, "intern": [54, 59, 64, 90, 185, 232, 473, 484, 498, 501, 506, 510, 511, 622, 647, 668, 799], "revers": [54, 124, 179, 232, 254, 256, 275, 290, 291, 292, 293, 294, 373, 390, 393, 412, 422, 423, 455, 463, 474, 521, 579, 600, 618, 621, 641, 658, 659, 660, 661, 762, 784, 796, 845, 859], "uiqu": 54, "kei": [54, 60, 136, 148, 159, 161, 165, 168, 215, 232, 551, 557, 571, 600], "contain": [54, 60, 78, 81, 157, 161, 232, 355, 428, 431, 432, 433, 434, 446, 447, 521, 568, 600, 717, 750, 802, 805, 806, 807, 808, 820, 821, 838, 859], "have": [54, 88, 89, 90, 104, 108, 109, 111, 126, 164, 215, 232, 295, 333, 334, 335, 378, 393, 521, 577, 591, 600, 608, 662, 670, 708, 709, 710, 719, 762, 859], "inject": 54, "fill": [54, 62, 86, 112, 127, 128, 176, 195, 232, 280, 339, 340, 341, 346, 350, 400, 401, 403, 406, 407, 408, 414, 436, 441, 452, 492, 521, 545, 546, 576, 600, 713, 714, 715, 755, 769, 770, 772, 775, 776, 777, 787, 810, 815, 826, 859], "non": [54, 154, 232, 388, 399, 400, 401, 402, 403, 404, 406, 407, 408, 428, 433, 476, 479, 521, 565, 600, 757, 768, 769, 770, 771, 772, 773, 775, 776, 777, 802, 807, 842, 859], "each": [54, 101, 104, 105, 107, 115, 148, 205, 206, 208, 218, 232, 245, 265, 277, 320, 325, 344, 393, 433, 445, 446, 472, 521, 557, 568, 594, 595, 596, 600, 631, 643, 650, 693, 698, 762, 807, 819, 820, 859], "sort": [54, 55, 135, 136, 137, 148, 159, 161, 196, 203, 208, 218, 232, 254, 256, 282, 342, 412, 423, 467, 469, 474, 521, 551, 552, 557, 568, 595, 596, 600, 618, 621, 648, 784, 846, 848, 859], "origin": [54, 88, 89, 193, 232, 363, 395, 428, 432, 433, 434, 436, 441, 452, 521, 584, 600, 802, 806, 807, 808, 810, 815, 826], "order": [54, 104, 135, 136, 137, 159, 160, 161, 171, 193, 196, 232, 254, 256, 282, 393, 410, 411, 412, 422, 423, 454, 464, 465, 474, 521, 550, 551, 552, 579, 584, 600, 618, 621, 648, 762, 767, 779, 780, 784, 829, 846, 847, 859], "unless": [54, 78, 850, 859], "case": [54, 102, 115, 126, 136, 137, 232, 372, 377, 378, 514, 521, 551, 552, 600, 608, 859], "final": [54, 102, 544, 600], "doe": [54, 73, 80, 82, 88, 89, 90, 98, 104, 105, 126, 232, 326, 329, 454, 465, 490, 521, 544, 550, 561, 600, 608, 699, 702, 719, 789, 850, 859], "receiv": [54, 115, 160, 232, 567, 600], "now": [54, 137, 232, 552, 600], "ha": [54, 196, 232, 235, 245, 295, 363, 378, 463, 472, 521, 534, 594, 600, 651, 662, 719, 730, 845, 859], "whose": [54, 148, 161, 232, 336, 489, 521, 557, 600], "uniqu": [54, 106, 107, 109, 146, 157, 214, 232, 255, 354, 362, 383, 465, 467, 502, 521, 600, 620, 663, 729, 738, 751, 847, 848, 859], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 179, 232, 254, 256, 412, 521, 579, 600, 618, 621, 784, 859], "singl": [54, 62, 88, 89, 97, 98, 107, 122, 126, 133, 179, 203, 232, 317, 342, 372, 394, 397, 426, 442, 448, 469, 472, 477, 497, 506, 521, 541, 579, 593, 600, 608, 690, 763, 766, 800, 811, 816, 822, 838, 859], "boolean": [54, 59, 129, 131, 152, 201, 232, 242, 243, 260, 342, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 469, 521, 547, 589, 600, 606, 607, 619, 626, 716, 724, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 758, 759, 782, 801, 851, 859], "associ": 54, "2022": [54, 64, 103, 119, 232, 449, 487, 676, 823], "x": [54, 88, 89, 98, 107, 108, 124, 141, 144, 146, 147, 154, 232, 245, 259, 266, 347, 372, 396, 420, 445, 462, 484, 511, 521, 556, 565, 578, 600, 605, 609, 715, 739, 794, 819, 844, 859], "y": [54, 107, 108, 124, 144, 146, 147, 154, 232, 259, 266, 396, 449, 484, 511, 521, 556, 565, 578, 600, 605, 696, 823, 859], "12": [54, 63, 64, 136, 137, 148, 196, 232, 293, 305, 314, 319, 320, 325, 331, 388, 415, 485, 486, 521, 551, 552, 557, 577, 600, 609, 687, 693, 698, 778, 859], "df3": [54, 232], "09": [54, 137, 232, 552, 600, 671], "01": [54, 64, 119, 136, 137, 196, 232, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 449, 487, 551, 552, 600, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 823], "02": [54, 64, 136, 137, 196, 232, 300, 304, 305, 306, 312, 313, 314, 321, 322, 324, 327, 329, 409, 487, 521, 551, 552, 600, 669, 673, 674, 675, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702], "03": [54, 64, 136, 137, 196, 232, 300, 303, 304, 306, 313, 314, 320, 321, 322, 324, 325, 327, 329, 330, 551, 552, 600, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 684, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 98, 159, 193, 196, 232, 363, 476, 521, 584, 600], "easili": 54, "calcul": [54, 136, 232, 261, 296, 333, 334, 335, 364, 371, 405, 420, 466, 521, 551, 600, 627, 664, 708, 709, 710, 740, 774, 794, 798, 849, 859], "wise": [54, 122, 131, 232, 246, 247, 248, 249, 250, 251, 287, 288, 337, 370, 417, 418, 419, 460, 461, 482, 483, 491, 505, 521, 541, 600, 610, 611, 612, 613, 614, 615, 656, 657, 711, 744, 791, 792, 793, 835, 836, 859], "dot": [54, 521, 577, 600, 859], "product": [54, 232, 293, 297, 521, 660, 665, 859], "fill_nul": [54, 127, 232, 449, 521, 545, 600, 823, 859], "sum": [54, 124, 131, 135, 137, 161, 203, 232, 245, 293, 294, 332, 342, 387, 400, 401, 403, 406, 407, 408, 469, 470, 482, 484, 491, 501, 521, 536, 544, 550, 552, 568, 600, 660, 661, 706, 707, 769, 770, 772, 775, 776, 777, 859], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 98, 115, 131, 160, 205, 232, 245, 278, 372, 373, 399, 472, 482, 483, 491, 497, 505, 521, 561, 567, 594, 600, 609, 644, 768, 859], "decor": [55, 56, 57, 58, 108, 109], "access": [55, 56, 57, 58, 590, 600], "by_first_letter_of_column_nam": 55, "f": [55, 115, 119, 122, 150, 184, 192, 195, 205, 232, 245, 278, 372, 373, 415, 449, 472, 478, 482, 483, 491, 497, 505, 521, 541, 561, 589, 594, 600, 644, 823], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 427, 431, 805], "slice": [55, 61, 124, 232, 265, 277, 399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 536, 544, 561, 568, 577, 600, 631, 643, 707, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "to_seri": [55, 59, 232, 278, 644], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 280, 393, 521, 762, 859], "p": 56, "ceil": [56, 521, 859], "previou": [56, 388, 521, 757, 859], "floor": [56, 521, 859], "nearest": [56, 148, 163, 216, 232, 283, 345, 392, 404, 504, 521, 557, 569, 600, 649, 718, 761, 773, 859], "round": [56, 283, 345, 460, 521, 649, 718, 859], "24": [56, 115, 124, 137, 232, 293, 295, 306, 521, 552, 600, 662, 675, 859], "55": 56, "001": [56, 309, 311, 316, 487, 681, 683, 689], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 757, 859], "split_by_column_dtyp": 57, "dtype": [57, 79, 86, 88, 89, 98, 106, 107, 108, 109, 112, 136, 137, 148, 189, 232, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 266, 281, 284, 285, 286, 287, 288, 293, 294, 303, 306, 309, 311, 313, 316, 322, 329, 336, 338, 344, 371, 372, 395, 396, 400, 401, 402, 403, 404, 406, 407, 408, 415, 418, 419, 426, 443, 456, 458, 460, 461, 462, 466, 467, 472, 473, 478, 480, 489, 496, 497, 510, 521, 551, 552, 557, 600, 623, 624, 625, 632, 646, 651, 652, 653, 654, 660, 661, 672, 675, 681, 683, 686, 689, 695, 702, 707, 712, 722, 727, 767, 781, 788, 800, 817, 823, 831, 842, 843, 844, 859], "collect": [57, 61, 99, 149, 184, 232, 245, 387, 473, 478, 506, 510, 521, 541, 543, 544, 545, 546, 547, 550, 551, 555, 556, 562, 563, 564, 565, 566, 567, 569, 574, 575, 576, 578, 579, 580, 581, 583, 586, 588, 589, 590, 591, 594, 600], "i16": [57, 415, 521], "i32": [57, 79, 108, 281, 331, 415, 514, 521, 676, 704], "f32": [57, 232, 262, 393, 415, 488, 521, 628, 762, 859], "31": [58, 103, 302, 303, 314, 327, 449, 485, 486, 671, 672, 823], "42": [58, 137, 138, 232, 552, 600, 720, 859], "25": [58, 64, 136, 137, 148, 196, 200, 201, 232, 320, 325, 331, 551, 552, 557, 563, 586, 588, 589, 600, 693, 698, 706, 757, 859], "961": 58, "1764": 58, "4160": 58, "27": [58, 217, 319, 331, 389, 521], "125": [58, 757, 859], "condit": [59, 122, 129, 169, 232, 431, 447, 541, 547, 600], "eager": [59, 136, 195, 232, 473, 496, 506, 510, 520, 530, 551, 600], "indic": [59, 83, 87, 88, 89, 91, 95, 98, 106, 107, 109, 136, 137, 232, 353, 356, 357, 359, 360, 361, 400, 401, 402, 403, 404, 406, 407, 408, 411, 417, 458, 521, 551, 552, 600, 728, 732, 733, 734, 735, 736, 780, 791, 833, 859], "where": [59, 97, 122, 126, 154, 200, 232, 328, 332, 411, 420, 508, 514, 521, 565, 600, 608, 619, 701, 706, 780, 794, 798, 849, 851, 859], "evalu": [59, 127, 129, 148, 152, 201, 232, 295, 349, 351, 355, 471, 473, 488, 510, 521, 547, 554, 556, 557, 588, 589, 600, 619, 662, 851, 859], "eagerli": [59, 506], "oppos": 59, "lazili": [59, 88, 89, 98, 100, 101, 102], "u32": [59, 136, 158, 202, 206, 210, 213, 214, 217, 232, 240, 252, 253, 254, 255, 256, 257, 258, 268, 289, 290, 302, 305, 312, 314, 318, 319, 321, 327, 328, 366, 383, 386, 393, 411, 428, 435, 438, 462, 465, 521, 551, 591, 600, 618, 619, 620, 634, 646, 671, 674, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 762, 802, 809, 812, 844, 847, 848, 859], "build": 60, "wa": 60, "compil": [60, 257, 258, 623, 624], "gate": 60, "info": [60, 103], "otherwis": [60, 173, 232, 284, 285, 286, 333, 334, 335, 395, 514, 521, 574, 600, 609, 652, 653, 654, 708, 709, 710, 764, 782, 783, 859], "version": [60, 103, 235, 505], "follow": [60, 88, 89, 97, 98, 115, 136, 137, 148, 160, 196, 232, 245, 317, 320, 325, 344, 393, 400, 401, 402, 403, 404, 406, 407, 408, 472, 515, 517, 521, 522, 525, 526, 527, 550, 551, 552, 557, 567, 600, 690, 693, 698, 762, 782, 783, 852, 855, 859, 862, 863, 864, 866], "depend": [60, 103, 245, 257, 258, 377, 393, 472, 490, 521, 623, 624, 762, 859], "host": [60, 88, 91, 95, 100, 102], "git": 60, "lazy_fram": 61, "type_coercion": [61, 536, 538, 544, 568, 577, 600], "predicate_pushdown": [61, 536, 538, 544, 561, 568, 577, 600], "projection_pushdown": [61, 536, 538, 544, 561, 568, 577, 600], "simplify_express": [61, 536, 538, 544, 568, 577, 600], "string_cach": 61, "no_optim": [61, 536, 544, 561, 568, 600], "slice_pushdown": [61, 536, 538, 544, 561, 568, 577, 600], "common_subplan_elimin": [61, 536, 538, 544, 568, 577, 600], "allow_stream": [61, 544, 568, 600], "multipl": [61, 62, 88, 89, 98, 100, 102, 107, 109, 124, 126, 129, 136, 141, 159, 161, 179, 201, 203, 232, 336, 378, 382, 397, 400, 401, 402, 403, 404, 406, 407, 408, 423, 474, 482, 483, 489, 491, 497, 505, 514, 521, 540, 547, 551, 579, 589, 593, 600, 608, 707, 749, 766, 859], "graph": [61, 149, 232, 554, 590, 600], "parallel": [61, 62, 85, 95, 97, 102, 136, 148, 149, 160, 232, 262, 295, 521, 530, 551, 556, 557, 600, 628, 662, 859], "threadpool": 61, "coercion": [61, 396, 521, 536, 544, 568, 577, 600], "optim": [61, 95, 98, 100, 101, 102, 149, 160, 164, 232, 536, 538, 544, 561, 568, 577, 591, 600], "predic": [61, 98, 100, 101, 102, 129, 169, 232, 342, 469, 514, 521, 536, 544, 547, 561, 568, 577, 591, 600, 716, 782, 783, 859], "pushdown": [61, 536, 544, 561, 568, 577, 591, 600, 782, 783, 859], "project": [61, 98, 100, 101, 102, 245, 422, 423, 521, 536, 544, 561, 568, 577, 600], "simplifi": [61, 536, 544, 568, 577, 600], "turn": [61, 88, 89, 98, 111, 344, 467, 521, 536, 544, 561, 568, 600], "off": [61, 88, 89, 98, 111, 467, 521, 536, 544, 561, 568, 600], "Will": [61, 192, 232, 498, 501, 536, 544, 568, 577, 600, 859], "try": [61, 74, 75, 88, 89, 90, 91, 95, 98, 100, 102, 536, 544, 568, 577, 600], "branch": [61, 536, 544, 568, 577, 600], "subplan": [61, 536, 544, 568, 577, 600], "occur": [61, 382, 393, 521, 536, 544, 568, 577, 600, 749, 762, 859], "part": [61, 77, 445, 446, 536, 544, 568, 577, 590, 600, 671, 674, 680, 682, 685, 687, 688, 694, 704, 819, 820], "fashion": [61, 147, 232, 536, 544, 568, 577, 600], "alpha": [61, 333, 334, 335, 521, 536, 544, 568, 577, 600, 708, 709, 710, 859], "item": [62, 171, 232, 260, 264, 266, 338, 344, 410, 446, 521, 626, 630, 632, 712, 779, 820, 859], "rechunk": [62, 77, 81, 88, 89, 91, 95, 98, 100, 101, 102, 126, 232, 521, 608, 650, 750, 859], "concatmethod": 62, "vertic": [62, 126, 195, 198, 232, 426, 498, 800], "aggreg": [62, 88, 89, 131, 135, 136, 151, 152, 153, 155, 157, 161, 162, 163, 180, 181, 195, 197, 203, 204, 207, 209, 215, 232, 240, 342, 368, 372, 387, 399, 400, 401, 402, 403, 404, 406, 407, 408, 467, 482, 483, 484, 491, 495, 498, 501, 505, 511, 521, 551, 561, 562, 563, 564, 566, 569, 580, 581, 586, 593, 600, 768, 769, 770, 772, 775, 776, 777, 859], "concaten": [62, 131, 232, 650, 750, 859], "sure": [62, 77, 81, 88, 89, 91, 97, 135, 164, 232, 473, 550, 600], "contigu": [62, 77, 81, 88, 89, 91, 98, 100, 101, 102, 164, 232], "diagon": [62, 192, 232], "strategi": [62, 88, 106, 107, 108, 109, 128, 136, 147, 148, 156, 232, 278, 341, 521, 546, 551, 556, 557, 600, 644, 715, 859], "vstack": [62, 126, 232], "find": [62, 130, 232, 411, 474, 521, 780, 859], "schema": [62, 74, 79, 88, 89, 92, 96, 98, 101, 108, 115, 116, 117, 123, 232, 377, 534, 535, 542, 561, 594, 600, 655, 859], "miss": [62, 127, 232, 280, 346, 350, 357, 359, 508, 521, 545, 600, 850, 859], "stack": [62, 141, 198, 232], "length": [62, 63, 86, 101, 107, 112, 136, 137, 178, 232, 274, 295, 320, 325, 378, 399, 400, 401, 402, 403, 404, 406, 407, 408, 421, 436, 438, 441, 443, 452, 473, 521, 551, 552, 568, 578, 600, 640, 650, 662, 693, 698, 741, 755, 768, 769, 770, 771, 772, 773, 775, 776, 777, 795, 810, 812, 815, 817, 826, 859], "don": [62, 195, 232, 262, 295, 472, 521, 628, 662, 781, 850, 859], "t": [62, 90, 98, 115, 195, 232, 262, 295, 332, 333, 334, 335, 449, 472, 514, 521, 628, 662, 706, 708, 709, 710, 781, 823, 850, 859], "match": [62, 73, 78, 80, 82, 104, 105, 128, 148, 169, 232, 427, 428, 431, 433, 434, 437, 439, 440, 442, 447, 448, 449, 546, 557, 600, 801, 802, 805, 807, 808, 811, 813, 814, 816, 821, 822, 823], "relev": 62, "execut": [62, 149, 232, 262, 533, 568, 600, 628], "bin": 63, "label": [63, 78, 80, 82, 232, 399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 568, 600, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 261, 296, 332, 521, 627, 664, 706, 859], "creat": [63, 64, 77, 80, 82, 107, 108, 109, 116, 117, 136, 137, 158, 161, 196, 232, 320, 325, 394, 443, 467, 473, 478, 485, 486, 487, 521, 534, 535, 538, 539, 551, 552, 600, 651, 655, 667, 693, 698, 755, 763, 817, 842, 859], "assign": [63, 107, 136, 232, 393, 445, 446, 521, 551, 600, 762, 819, 820, 859], "must": [63, 78, 80, 82, 104, 136, 137, 148, 169, 232, 336, 372, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 561, 600, 859], "len": [63, 107, 108, 290, 397, 436, 441, 452, 521, 766, 810, 815, 826, 859], "breakpoint": 63, "experiment": [63, 99, 195, 201, 232, 295, 320, 400, 401, 402, 403, 404, 406, 407, 408, 521, 589, 600, 662, 693, 859], "being": [63, 88, 89, 98, 99, 195, 232, 295, 320, 400, 401, 402, 403, 404, 406, 407, 408, 514, 521, 662, 693, 859], "consid": [63, 99, 132, 154, 195, 201, 203, 215, 232, 284, 285, 286, 295, 320, 400, 401, 402, 403, 404, 406, 407, 408, 422, 482, 491, 521, 553, 560, 565, 589, 600, 652, 653, 654, 662, 693, 781, 782, 783, 859], "break": [63, 99, 195, 232, 295, 320, 400, 401, 402, 403, 404, 406, 407, 408, 521, 662, 693, 859], "30": [63, 126, 136, 141, 160, 166, 167, 185, 201, 232, 252, 253, 254, 256, 296, 303, 319, 320, 325, 331, 347, 415, 521, 551, 567, 589, 600, 672, 693, 698], "inf": [63, 108, 109, 251, 353, 356, 521, 615, 728, 732, 757, 859], "low": [64, 136, 232, 321, 473, 551, 600], "high": [64, 136, 232, 321, 473, 551, 600], "interv": [64, 136, 137, 196, 232, 320, 321, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 600, 671, 673, 674, 680, 682, 685, 687, 688, 691, 692, 693, 694, 696, 697, 698, 700, 701, 704], "timedelta": [64, 136, 137, 196, 232, 302, 304, 305, 312, 314, 317, 318, 319, 320, 321, 324, 325, 327, 328, 331, 400, 401, 402, 403, 404, 406, 407, 408, 476, 521, 551, 552, 600, 677, 679, 684, 690, 693, 698, 745, 748, 753, 754, 859], "close": [64, 136, 137, 232, 400, 401, 402, 403, 404, 406, 407, 408, 420, 521, 551, 552, 600, 794, 859], "closedwindow": [64, 136, 137, 232, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 600], "lower": [64, 98, 136, 163, 216, 232, 351, 371, 392, 395, 404, 473, 504, 521, 544, 551, 569, 600, 761, 764, 773, 859], "bound": [64, 88, 89, 124, 136, 232, 264, 351, 371, 466, 473, 521, 551, 600, 630, 707, 859], "upper": [64, 88, 89, 124, 136, 232, 351, 466, 473, 521, 551, 600, 707, 859], "period": [64, 136, 137, 175, 176, 232, 273, 320, 325, 333, 334, 335, 388, 413, 414, 521, 551, 552, 575, 576, 600, 639, 693, 698, 708, 709, 710, 757, 786, 787, 859], "It": [64, 115, 160, 205, 232, 245, 326, 377, 521, 561, 594, 600, 699, 782, 783, 859], "like": [64, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 147, 215, 232, 262, 380, 393, 521, 544, 570, 600, 628, 762, 859], "durat": [64, 148, 196, 232, 303, 306, 309, 311, 313, 316, 322, 329, 462, 521, 557, 600, 672, 675, 681, 683, 686, 689, 695, 702, 844, 859], "3d12h4m25": [64, 136, 137, 148, 196, 232, 320, 325, 551, 552, 557, 600, 693, 698], "hour": [64, 136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 486, 487, 521, 551, 552, 557, 600, 690, 693, 698], "minut": [64, 136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 486, 487, 521, 551, 552, 557, 600, 690, 693, 698], "tempor": [64, 136, 137, 232, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 600], "window": [64, 136, 137, 232, 295, 320, 325, 333, 334, 335, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 478, 521, 551, 552, 600, 662, 693, 698, 708, 709, 710, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 859], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 108, 109, 115, 135, 148, 169, 171, 195, 205, 232, 245, 363, 410, 420, 422, 436, 441, 446, 452, 508, 511, 521, 550, 557, 594, 600, 779, 794, 810, 815, 820, 826, 859], "1d": [64, 136, 137, 148, 196, 232, 300, 306, 313, 317, 320, 325, 329, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 669, 673, 675, 677, 678, 679, 684, 686, 690, 693, 696, 697, 698, 701, 702], "also": [64, 108, 109, 123, 135, 136, 137, 157, 179, 232, 301, 336, 350, 393, 400, 401, 402, 403, 404, 406, 407, 408, 482, 483, 491, 505, 520, 521, 551, 552, 590, 600, 670, 762, 859], "permut": 64, "1mo": [64, 136, 137, 148, 196, 232, 303, 317, 320, 325, 330, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 670, 672, 687, 690, 691, 692, 693, 698, 700, 703], "drang": 64, "1985": 64, "00": [64, 136, 148, 196, 232, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 449, 487, 551, 600, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 823], "04": [64, 99, 136, 196, 232, 302, 303, 306, 312, 313, 314, 318, 320, 321, 322, 327, 328, 329, 330, 449, 487, 551, 600, 670, 672, 675, 680, 682, 685, 686, 687, 688, 692, 694, 695, 696, 700, 701, 702, 703, 823], "05": [64, 99, 104, 105, 148, 196, 232, 303, 321, 330, 670, 671, 672, 693, 698, 701, 703], "07": [64, 302, 318, 320, 325, 328, 449, 671, 701, 823], "08": [64, 104, 105, 137, 232, 320, 449, 487, 552, 600, 693, 698, 823], "encount": [65, 136, 232, 384, 385, 434, 482, 491, 508, 521, 551, 600, 753, 754, 808, 859], "error": [65, 88, 89, 98, 169, 232, 266, 281, 363, 429, 434, 449, 521, 594, 632, 646, 803, 808, 823, 859], "duplic": [67, 144, 147, 148, 193, 232, 352, 474, 521, 556, 557, 584, 600, 726, 859], "certain": [68, 142, 196, 232, 336, 489, 521, 536, 568, 600, 859], "structur": [69, 74, 75, 126, 160, 232, 567, 600, 608, 859], "least": [70, 108, 388, 467, 521, 757, 848, 859], "expect": [70, 73, 76, 245, 472, 521, 559, 561, 600], "unexpect": [72, 232], "caus": [72, 88, 89, 98, 126, 232, 608, 859], "panic": 72, "combin": [74, 75, 136, 137, 138, 148, 196, 203, 232, 551, 552, 557, 577, 600], "mismatch": 74, "incompat": 75, "lib": [77, 838, 859], "chunkedarrai": [77, 156, 232, 665, 859], "zero": [77, 87, 88, 89, 91, 95, 128, 169, 184, 232, 340, 341, 411, 420, 452, 521, 546, 600, 715, 794, 826, 838, 842, 859], "copi": [77, 116, 117, 184, 232, 452, 534, 535, 600, 605, 651, 655, 667, 826, 838, 842, 859], "most": [77, 378, 382, 388, 446, 467, 521, 749, 757, 820, 848, 859], "closest": 77, "construct": [77, 78, 79, 80, 81, 82, 232, 549, 570, 600, 859], "pa": [77, 99, 232], "map": [78, 79, 88, 89, 91, 92, 95, 96, 98, 100, 115, 123, 165, 185, 232, 320, 325, 373, 467, 472, 521, 542, 571, 600, 693, 698], "clone": [78, 79, 80, 81, 82, 116, 188, 189, 232, 534, 600, 651, 841, 842, 850, 859], "two": [78, 80, 82, 97, 131, 154, 161, 191, 203, 204, 205, 215, 232, 240, 297, 422, 423, 458, 470, 481, 503, 508, 510, 521, 565, 594, 600, 665, 859], "dimension": [78, 80, 82, 232, 859], "alreadi": [78, 232, 262, 295, 521, 628, 662, 859], "present": [78, 108, 232, 355, 521, 850, 859], "dimens": [78, 80, 82, 232, 397, 521, 766, 859], "infer_schema_length": [79, 82, 88, 89, 90, 98, 101], "50": [79, 82, 126, 232, 284, 285, 286, 320, 325, 521, 652, 698, 859], "mani": [79, 82, 97, 126, 232, 608, 859], "scan": [79, 82, 88, 89, 95, 98, 99, 100, 101, 102, 544, 553, 560, 600], "slow": [79, 82, 88, 89, 98, 186, 232, 295, 521, 662, 859], "partial": 79, "overwrit": [79, 88, 89, 98, 201, 232, 544, 588, 589, 600], "first": [79, 88, 89, 90, 97, 98, 101, 115, 136, 139, 148, 150, 156, 160, 161, 192, 193, 196, 208, 215, 232, 254, 255, 256, 262, 264, 265, 295, 317, 320, 348, 354, 367, 432, 434, 439, 440, 474, 476, 482, 491, 494, 521, 536, 551, 553, 557, 560, 567, 584, 590, 595, 600, 618, 621, 628, 630, 631, 662, 663, 690, 693, 721, 729, 742, 806, 808, 813, 814, 859], "let": 79, "about": [79, 420, 521, 794, 859], "3rd": 79, "unknown": [79, 496], "np": [80, 232, 728, 732, 733, 734, 768, 859], "ndarrai": [80, 129, 188, 232, 458, 521, 665, 783, 833, 842, 859], "numpi": [80, 103, 129, 188, 232, 384, 385, 458, 521, 728, 732, 733, 734, 753, 754, 768, 833, 842, 850, 859], "columnar": [80, 82, 170, 232], "column_0": [80, 82, 115, 192, 232], "column_1": [80, 82, 115, 192, 232], "interpret": [80, 82, 88, 89, 98, 232], "yield": [80, 82, 88, 89, 98, 124, 126, 192, 232, 608, 707, 859], "conclus": [80, 82, 232], "nan_to_non": 81, "panda": [81, 90, 97, 103, 189, 232, 462, 521, 843, 844, 859], "index": [81, 84, 103, 130, 136, 137, 142, 148, 161, 167, 169, 178, 190, 196, 202, 232, 240, 252, 253, 254, 255, 256, 257, 258, 264, 274, 317, 400, 401, 402, 403, 404, 406, 407, 408, 421, 432, 443, 458, 474, 521, 551, 552, 557, 578, 591, 600, 616, 617, 618, 619, 620, 621, 623, 624, 630, 640, 690, 755, 783, 795, 806, 817, 833, 859], "datetimeindex": [81, 665, 859], "instal": [81, 88, 89, 91, 95, 97, 103, 188, 189, 232, 577, 600, 842, 859], "nan": [81, 104, 105, 108, 127, 232, 298, 299, 340, 350, 357, 359, 360, 361, 374, 381, 384, 385, 508, 521, 545, 600, 611, 615, 666, 714, 733, 734, 753, 754, 768, 859], "convert": [81, 83, 90, 97, 170, 185, 186, 187, 188, 189, 191, 232, 278, 644, 830, 841, 842, 843, 850, 859], "pd": [81, 90, 97, 232, 462, 521, 844, 859], "pd_df": 81, "pd_seri": 81, "dummi": [83, 187, 232, 839, 859], "subset": [83, 122, 157, 187, 193, 232, 541, 584, 600], "get": [84, 92, 96, 110, 118, 123, 133, 134, 136, 137, 139, 140, 144, 146, 150, 156, 169, 172, 174, 178, 182, 187, 199, 208, 218, 220, 221, 222, 223, 224, 225, 226, 232, 240, 252, 253, 254, 255, 256, 263, 267, 268, 279, 290, 291, 292, 293, 294, 304, 343, 348, 352, 354, 362, 365, 367, 374, 375, 376, 377, 379, 381, 384, 385, 392, 421, 425, 435, 438, 456, 457, 464, 468, 490, 494, 498, 499, 500, 501, 509, 512, 513, 521, 537, 542, 548, 551, 552, 553, 558, 560, 573, 578, 582, 587, 595, 596, 600, 616, 617, 618, 619, 620, 621, 629, 633, 634, 645, 650, 658, 659, 660, 661, 673, 705, 717, 721, 722, 726, 729, 738, 742, 745, 747, 748, 750, 752, 753, 754, 758, 759, 761, 795, 798, 809, 812, 832, 837, 838, 839, 846, 849, 850, 859], "uint32": [84, 103, 124, 232, 254, 256, 257, 258, 268, 302, 305, 308, 310, 312, 314, 315, 318, 319, 321, 327, 328, 396, 428, 435, 438, 458, 462, 521, 619, 623, 624, 634, 646, 671, 674, 680, 682, 685, 687, 688, 691, 692, 694, 700, 701, 707, 781, 802, 844, 859], "regular": [84, 196, 232, 336, 477, 489, 521], "uint64": [84, 138, 232, 257, 258, 347, 395, 521, 623, 624, 720, 764, 859], "polars_u64_idx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 126, 232, 372, 521, 544, 549, 570, 600, 608, 859], "over": [85, 88, 89, 98, 108, 115, 126, 135, 192, 205, 215, 232, 245, 295, 341, 350, 372, 373, 399, 400, 401, 402, 403, 404, 406, 407, 408, 472, 482, 483, 491, 497, 505, 521, 594, 608, 609, 662, 768, 769, 770, 772, 776, 859], "avail": [85, 107, 231, 235, 393, 515, 517, 520, 521, 522, 525, 526, 527, 530, 531, 544, 599, 600, 762, 852, 855, 859, 862, 863, 864], "fetch": [85, 98, 149, 232, 534, 536, 553, 560, 585, 600], "ideal": [85, 215], "read_csv_batch": [85, 531], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 97], "tbl": [85, 89], "parse_d": [85, 88, 89, 98], "new": [86, 112, 115, 120, 122, 141, 142, 157, 158, 165, 166, 183, 195, 200, 232, 241, 338, 344, 350, 373, 439, 440, 445, 446, 453, 454, 459, 521, 530, 571, 583, 594, 600, 605, 609, 667, 712, 755, 765, 813, 814, 819, 820, 827, 829, 834, 840, 851, 859], "In": [86, 102, 108, 109, 112, 115, 124, 126, 136, 137, 157, 232, 245, 377, 422, 423, 521, 551, 552, 600, 608, 707, 763, 859], "probabl": [86, 112, 332, 521, 706, 859], "n_row": [87, 88, 89, 91, 95, 98, 100, 101, 102, 544, 600], "accept": [87, 88, 89, 91, 95, 179, 232], "start": [87, 88, 89, 91, 95, 98, 100, 101, 102, 135, 136, 149, 178, 196, 202, 232, 274, 302, 304, 305, 312, 314, 318, 319, 320, 321, 324, 325, 327, 328, 331, 336, 351, 421, 427, 431, 443, 447, 477, 482, 489, 491, 514, 521, 550, 551, 568, 578, 591, 600, 640, 669, 670, 671, 673, 674, 680, 682, 685, 687, 688, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 704, 795, 805, 817, 821, 859], "stop": [87, 88, 89, 91, 95, 98, 100, 101, 102, 302, 304, 305, 312, 314, 318, 319, 320, 321, 324, 325, 327, 328, 331, 669, 670, 671, 673, 674, 680, 682, 685, 687, 688, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 704], "after": [87, 88, 89, 91, 95, 98, 100, 101, 102, 126, 194, 231, 232, 235, 393, 452, 521, 585, 600, 608, 670, 762, 826, 859], "new_column": [88, 89, 90], "comment_char": [88, 89, 98], "quote_char": [88, 89, 98], "skip_row": [88, 89, 98], "ignore_error": [88, 89, 98], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 98], "low_memori": [88, 89, 95, 98, 101, 102], "storage_opt": [88, 91, 95, 100, 102], "skip_rows_after_head": [88, 89, 98], "row_count_nam": [88, 89, 91, 95, 98, 100, 101, 102], "row_count_offset": [88, 89, 91, 95, 98, 100, 101, 102], "sample_s": [88, 89], "eol_char": [88, 89, 98], "By": [88, 89, 90, 148, 179, 232, 496, 557, 600, 798, 842, 849, 859], "we": [88, 89, 90, 98, 135, 148, 179, 232, 262, 496, 514, 557, 561, 600, 609, 628, 859], "handler": [88, 89, 90], "g": [88, 89, 90, 91, 95, 100, 102, 195, 232, 336, 412, 415, 489, 521, 781, 784, 842, 859], "via": [88, 89, 90, 98, 100, 102, 201, 232, 589, 600], "builtin": [88, 89, 90], "open": [88, 89, 90, 91, 95, 100, 102], "stringio": [88, 89], "fsspec": [88, 89, 91, 95, 100, 102, 103], "remot": [88, 89, 91, 95], "dataset": [88, 89, 98, 99, 364, 521, 530, 740, 859], "autogener": [88, 89, 98], "column_x": [88, 89, 98], "enumer": [88, 89, 98], "everi": [88, 89, 98, 136, 183, 186, 196, 232, 257, 258, 261, 264, 265, 274, 277, 290, 291, 292, 293, 294, 295, 320, 325, 338, 344, 459, 482, 483, 521, 544, 551, 583, 600, 623, 624, 627, 630, 631, 640, 643, 658, 659, 660, 661, 662, 693, 698, 712, 834, 859], "shorter": [88, 89], "remain": [88, 89, 98, 124, 135, 232, 245, 445, 446, 521, 550, 561, 600, 707, 819, 820, 859], "comment": [88, 89, 98], "instanc": [88, 89, 98, 108, 109, 126, 131, 232, 281, 378, 400, 401, 402, 403, 404, 406, 407, 408, 482, 491, 521, 561, 591, 600, 608, 646, 859], "special": [88, 89, 98, 609, 859], "handl": [88, 89, 98, 261, 296, 429, 452, 521, 627, 664, 803, 826, 859], "escap": [88, 89, 98], "dure": [88, 89, 98, 126, 232, 608, 859], "provid": [88, 89, 97, 98, 108, 109, 201, 232, 429, 430, 432, 434, 530, 589, 594, 600, 803, 804, 806, 808, 866], "equal": [88, 89, 98, 104, 105, 111, 132, 136, 148, 232, 399, 400, 401, 402, 403, 404, 406, 407, 408, 435, 436, 441, 452, 473, 521, 551, 557, 600, 768, 769, 770, 771, 772, 773, 775, 776, 777, 781, 809, 810, 815, 826, 859], "some": [88, 89, 98, 122, 232, 541, 600, 731, 859], "check": [88, 89, 98, 104, 105, 132, 145, 232, 242, 243, 260, 351, 355, 427, 431, 447, 521, 561, 600, 606, 607, 626, 724, 725, 727, 730, 731, 737, 739, 781, 801, 805, 821, 859], "might": [88, 89, 98, 377, 465, 521], "issu": [88, 89, 90, 98, 293, 294, 456, 521, 660, 661, 831, 859], "automat": [88, 89, 97, 98, 108, 109, 232, 859], "alwai": [88, 115, 205, 232, 245, 377, 521, 561, 594, 600], "physic": [88, 89, 148, 232, 282, 462, 521, 533, 556, 557, 600, 648, 844, 859], "cpu": [88, 89], "your": [88, 89, 104, 105, 232, 536, 553, 560, 561, 600], "system": [88, 89], "done": [88, 89, 98, 148, 232, 244, 281, 436, 441, 521, 557, 579, 593, 600, 646, 810, 815, 859], "buffer": [88, 89, 124, 232, 707, 859], "onc": [88, 89, 90, 171, 232, 410, 521, 533, 600, 779, 859], "modifi": [88, 89, 98, 141, 198, 232, 301, 329, 670, 702, 765, 824, 825, 859], "multi": [88, 89], "lossi": [88, 89, 98], "replac": [88, 89, 98, 127, 128, 167, 192, 200, 232, 429, 440, 545, 588, 600, 782, 783, 803, 814, 859], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 98, 108, 109, 177, 232, 789, 859], "expens": [88, 89, 95, 98, 101, 102, 135, 192, 232, 550, 600, 608, 859], "nativ": [88, 91, 95, 115, 205, 232, 245, 521, 594], "parser": 88, "even": 88, "possibl": [88, 115, 205, 232, 245, 371, 377, 446, 466, 521, 594, 820, 859], "differ": [88, 126, 136, 137, 192, 232, 261, 296, 301, 302, 317, 318, 327, 384, 385, 449, 465, 490, 498, 501, 521, 551, 552, 600, 608, 627, 664, 670, 671, 690, 691, 700, 753, 754, 781, 823, 859], "regard": [88, 508], "sens": [88, 91, 95, 100, 102, 136, 137, 196, 232, 551, 552, 600], "particular": [88, 91, 95, 100, 102, 124, 232, 707, 859], "storag": [88, 91, 95, 100, 102], "connect": [88, 91, 95, 97, 99, 100, 102, 531], "port": [88, 91, 95, 97, 100, 102], "usernam": [88, 91, 95, 97, 100, 102], "password": [88, 91, 95, 97, 100, 102], "skip": [88, 89, 90, 98, 195, 232, 609, 859], "insert": [88, 89, 91, 95, 98, 100, 101, 102, 142, 166, 192, 194, 232, 411, 426, 452, 521, 585, 600, 780, 800, 826, 859], "count": [88, 89, 91, 95, 98, 100, 101, 102, 119, 136, 137, 148, 157, 158, 161, 192, 196, 202, 205, 214, 232, 290, 317, 366, 383, 386, 400, 401, 402, 403, 404, 406, 407, 408, 428, 465, 467, 502, 521, 551, 552, 557, 591, 594, 600, 663, 690, 751, 756, 802, 847, 848, 859], "offset": [88, 89, 91, 95, 98, 100, 101, 102, 136, 137, 178, 196, 202, 232, 274, 317, 320, 325, 421, 443, 521, 551, 552, 578, 591, 600, 640, 690, 693, 698, 795, 817, 859], "row_count": [88, 89, 91, 95, 98, 100, 101, 102], "sampl": [88, 89, 205, 232, 420, 521, 594, 794, 859], "estim": [88, 89, 124, 232, 334, 335, 364, 521, 707, 709, 710, 740, 859], "alloc": [88, 89, 124, 164, 232, 707, 859], "need": [88, 89, 90, 104, 105, 136, 137, 177, 188, 232, 415, 435, 521, 551, 552, 593, 600, 788, 809, 842, 859], "end": [88, 89, 95, 98, 136, 232, 274, 320, 336, 351, 427, 431, 443, 447, 477, 489, 521, 551, 553, 560, 568, 600, 640, 693, 805, 817, 821], "scan_csv": [88, 89, 593], "glob": [88, 89, 98, 100, 102], "pattern": [88, 89, 98, 100, 102, 427, 428, 432, 433, 439, 440, 782, 783, 801, 802, 806, 807, 813, 814, 859], "store": [88, 95, 126, 232, 608, 859], "continu": [88, 95, 420, 521, 794, 859], "benchmark": [88, 95], "50000": 89, "batchedcsvread": [89, 530], "batch": [89, 101], "upon": 89, "creation": 89, "gather": 89, "work": [89, 90, 135, 137, 166, 193, 232, 262, 283, 284, 285, 286, 345, 438, 454, 464, 521, 550, 552, 584, 600, 628, 649, 652, 653, 654, 718, 812, 846, 859], "next_batch": 89, "call": [89, 108, 109, 149, 231, 232, 235, 531, 599, 600, 609, 859], "sheet_id": 90, "sheet_nam": 90, "xlsx2csv_option": 90, "read_csv_opt": 90, "excel": [90, 530], "xlsx": 90, "sheet": 90, "xlsx2csv": [90, 103], "read_csv": [90, 98], "skip_empty_lin": 90, "my": [90, 99], "datasheet": 90, "excel_fil": 90, "while": [90, 108, 109, 154, 192, 232, 565, 600], "As": [90, 506], "correct": [90, 334, 335, 364, 405, 420, 521, 561, 600, 709, 710, 740, 774, 794, 859], "look": 90, "document": [90, 97, 434, 449, 808, 823], "see": [90, 97, 104, 105, 108, 109, 147, 160, 232, 284, 285, 286, 323, 341, 350, 364, 372, 420, 505, 521, 652, 653, 654, 696, 740, 794, 859, 866], "fix": [90, 107, 108, 329, 400, 401, 402, 403, 404, 406, 407, 408, 521, 702], "For": [90, 126, 137, 147, 148, 179, 205, 232, 281, 378, 395, 420, 482, 491, 492, 521, 552, 557, 594, 600, 608, 764, 794, 842, 859], "whole": [90, 422, 423, 432, 521, 806], "twice": 90, "actual": [90, 108, 109, 789, 859], "With": 90, "1000": [90, 124, 232, 309, 452, 681], "spreadsheet": [90, 161, 232], "xl": 90, "xlsm": 90, "xlsb": 90, "odf": 90, "od": 90, "odt": 90, "from_panda": [90, 97], "memory_map": [91, 95, 100], "v2": [91, 100], "valid": [91, 95, 109, 124, 232, 295, 422, 427, 428, 432, 433, 434, 521, 662, 707, 719, 801, 802, 806, 807, 808, 813, 814, 859], "greatli": [91, 100], "repeat": [91, 100, 394, 396, 521], "o": [91, 100, 295, 344, 463, 521, 662, 845, 859], "page": [91, 100, 232, 521, 530, 600, 859], "give": [91, 95, 100, 101, 102, 154, 232, 304, 364, 396, 521, 530, 565, 600, 673, 740, 859], "read_ndjson": 93, "parallelstrategi": [95, 102], "auto": [95, 102, 192, 232], "directori": 95, "partit": [95, 97, 99, 159, 232], "awar": [95, 326, 699], "stabl": 95, "increas": [95, 295, 521, 662, 859], "row_group": [95, 102], "direct": [95, 97, 102, 195, 232], "keyword": [95, 160, 169, 232, 567, 600, 859], "read_tabl": 95, "connection_uri": 97, "partition_on": 97, "partition_rang": 97, "tupl": [97, 115, 169, 170, 174, 232, 351, 397, 521, 568, 577, 600, 766, 785, 859], "partition_num": 97, "protocol": 97, "postgr": [97, 387, 521], "mysql": 97, "sqlite": 97, "redshift": 97, "through": [97, 859], "clickhous": 97, "databas": 97, "altern": 97, "solut": 97, "load": [97, 530, 553, 560, 600], "engin": [97, 115, 205, 232, 245, 521, 594], "raw": 97, "connectorx": [97, 103], "uri": 97, "postgresql": 97, "server": 97, "backend": 97, "transfer": 97, "detail": [97, 104, 105, 866], "here": [97, 107, 108, 109, 434, 808], "partition_col": 97, "explicitli": [97, 107, 108], "polarsdatatyp": 98, "with_column_nam": 98, "push": [98, 100, 101, 102], "down": [98, 100, 101, 102, 345, 521, 718, 859], "therebi": [98, 100, 101, 102], "potenti": [98, 100, 101, 102], "overhead": [98, 100, 101, 102], "updat": 98, "just": [98, 154, 232, 565, 600], "thu": [98, 126, 232, 508, 608, 859], "befor": [98, 126, 136, 148, 194, 232, 293, 294, 295, 388, 399, 400, 401, 402, 403, 404, 406, 407, 408, 452, 456, 521, 551, 554, 557, 585, 600, 608, 660, 661, 662, 757, 768, 769, 770, 771, 772, 773, 775, 776, 777, 826, 831, 859], "realloc": [98, 100, 101, 126, 232, 608, 859], "my_long_fil": 98, "doesn": [98, 332, 521, 706, 850, 859], "thing": [98, 470, 490], "less": [98, 148, 232, 436, 441, 446, 452, 557, 600, 810, 815, 820, 826], "limit": [98, 128, 232, 280, 284, 285, 286, 341, 346, 521, 546, 553, 600, 652, 653, 654, 715, 859], "breezah": 98, "languag": [98, 136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690, 693, 698], "terribl": 98, "mydf": 98, "write_csv": [98, 232], "lambda": [98, 115, 122, 131, 205, 232, 245, 278, 333, 334, 335, 372, 373, 399, 484, 511, 521, 541, 561, 594, 600, 609, 644, 708, 709, 710, 859], "cloud": 99, "dset": 99, "folder": 99, "out": [99, 103, 137, 232, 264, 353, 356, 521, 552, 600, 630], "1970": 99, "stdout": 103, "14": [103, 115, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 350, 521, 693], "platform": 103, "linux": 103, "microsoft": 103, "standard": [103, 180, 232, 307, 334, 406, 420, 425, 434, 509, 521, 580, 600, 676, 709, 794, 798, 808, 859], "wsl2": 103, "x86_64": 103, "glibc2": 103, "main": 103, "jul": [103, 449, 823], "56": [103, 460, 521], "gcc": 103, "20210110": 103, "23": [103, 136, 137, 232, 235, 305, 320, 486, 551, 552, 600, 674], "check_dtyp": [104, 105], "check_exact": [104, 105], "check_column_nam": 104, "rtol": [104, 105], "1e": [104, 105], "atol": [104, 105], "nans_compare_equ": [104, 105], "assertionerror": [104, 105], "compar": [104, 105, 132, 193, 232, 584, 600, 781, 859], "exactli": [104, 105, 108, 109, 445, 446, 789, 819, 820, 859], "toler": [104, 105, 148, 232, 557, 600], "rel": [104, 105, 215, 317, 333, 334, 335, 521, 690, 708, 709, 710, 859], "inexact": [104, 105], "absolut": [104, 105, 239, 521, 604, 859], "assert": [104, 105, 107, 108, 109, 137, 232, 530, 552, 600, 719, 859], "check_nam": 105, "s1": [105, 131, 232, 851, 859], "searchstrategi": [106, 108, 109], "null_prob": [106, 108, 109], "percentag": [106, 108, 109, 388, 521, 757, 859], "chanc": [106, 108, 109], "hypothesi": [106, 107, 108, 109, 866], "sampled_from": 106, "unique_small_int": 106, "ccy": 106, "gbp": 106, "eur": [106, 119, 232], "jpy": 106, "min_col": [107, 108], "max_col": [107, 108], "_parametr": 107, "suitabl": 107, "standalon": [107, 108], "itself": [107, 559, 600], "explicit": [107, 473, 505], "omit": [107, 108, 109, 157, 232], "random": [107, 108, 109, 138, 171, 232, 347, 393, 410, 416, 521, 720, 762, 779, 790, 859], "mincol": 107, "exact": [107, 108, 109, 177, 232, 449, 823], "control": 107, "especi": 107, "punctuat": 107, "test_special_char_colname_init": 107, "z": [107, 108, 124, 144, 146, 147, 154, 232, 259, 282, 347, 396, 521, 556, 565, 578, 600, 648, 715, 859], "test_unique_xyz": 107, "assert_someth": 107, "min_siz": [108, 109], "max_siz": [108, 109], "include_col": 108, "allow_infin": [108, 109], "allowed_dtyp": [108, 109], "excluded_dtyp": [108, 109], "describ": [108, 232, 593, 859], "desir": 108, "param": [108, 109, 169, 232], "ensur": [108, 109, 111, 169, 232, 467, 521, 561, 600, 842, 848, 859], "n_chunk": [108, 109, 232, 859], "randomis": 108, "individu": [108, 137, 232, 245, 433, 521, 552, 600, 650, 807, 859], "append": [108, 126, 147, 148, 232, 394, 521, 556, 557, 600, 859], "onto": 108, "independ": [108, 109], "either": [108, 137, 149, 152, 169, 181, 232, 552, 559, 600], "basi": 108, "pct": 108, "take": [108, 131, 160, 183, 232, 317, 326, 459, 488, 490, 521, 583, 600, 690, 699, 834, 851, 859], "preced": 108, "disallow": [108, 109], "exclud": [108, 109, 351, 477, 508, 521], "deploi": [108, 109], "characterist": [108, 109], "develop": [108, 109], "directli": [108, 109, 333, 334, 335, 521, 708, 709, 710, 859], "concret": [108, 109], "test_repr": [108, 109], "isinst": [108, 109, 232], "repr": [108, 109], "known": [108, 594], "colnam": [108, 123, 232, 373, 521, 542, 600], "df_strategi": 108, "15836": 108, "1755e": 108, "38": 108, "575050513": 108, "constructor": 109, "op": [109, 396, 521], "max_data_s": 109, "distinct": [109, 159, 232, 279, 393, 485, 486, 487, 521, 645, 762, 859], "54666": 109, "35": 109, "6414": 109, "63290": 109, "pool": 110, "return_dtyp": [115, 232, 245, 372, 472, 497, 521, 609, 859], "inference_s": [115, 232], "256": [115, 232, 757, 859], "user": [115, 160, 205, 232, 245, 412, 472, 521, 567, 594, 600, 609, 784, 859], "udf": [115, 160, 205, 232, 245, 472, 521, 567, 594, 600, 609, 859], "logic": [115, 205, 232, 245, 462, 521, 549, 556, 570, 592, 594, 600, 844, 859], "almost": [115, 205, 232, 245, 521, 594], "_significantly_": [115, 205, 232, 245, 521, 594], "intens": [115, 205, 232, 245, 521, 594], "becaus": [115, 124, 136, 149, 195, 205, 232, 245, 262, 521, 551, 594, 600, 609, 628, 707, 859], "forc": [115, 148, 205, 232, 245, 521, 556, 557, 594, 600], "materi": [115, 205, 232, 245, 521, 568, 594, 600], "parallelis": [115, 205, 232, 245, 521, 594], "optimis": [115, 205, 232, 245, 521, 594, 782, 783, 859], "wherev": [115, 205, 232, 245, 521, 594], "strongli": [115, 205, 232, 245, 521, 594], "prefer": [115, 126, 205, 232, 245, 399, 521, 594, 600, 608, 768, 859], "achiev": [115, 205, 232, 245, 521, 594], "best": [115, 205, 232, 245, 521, 594], "tri": [115, 232], "track": [115, 232], "arbitrarili": [115, 232], "rearrang": [115, 232], "want": [115, 126, 157, 232, 284, 285, 286, 342, 372, 400, 401, 402, 403, 404, 406, 407, 408, 482, 491, 521, 536, 553, 560, 600, 608, 652, 653, 654, 842, 859], "preserv": [115, 232], "syntax": [115, 157, 179, 232, 577, 600, 859], "15": [115, 136, 137, 142, 232, 295, 320, 325, 521, 551, 552, 600, 662, 693, 698, 859], "better": [115, 205, 232, 245, 467, 521, 594, 782, 783, 859], "scalar": [115, 232, 411, 472, 521, 780, 859], "ident": [116, 117, 232, 534, 535, 600, 651, 655, 859], "cheap": [116, 117, 232, 534, 535, 600, 608, 651, 655, 859], "deepcopi": [116, 117, 232, 534, 535, 600, 651, 655, 859], "13": [116, 117, 127, 128, 134, 137, 142, 156, 201, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 235, 399, 401, 478, 521, 534, 535, 545, 546, 552, 559, 589, 600, 609, 693, 698, 700, 859], "clear": [117, 232, 535, 600, 655, 859], "properti": [118, 123, 140, 172, 174, 199, 232, 530, 537, 542, 573, 587, 600, 705, 717, 722, 752, 785, 837, 859], "appl": [118, 141, 147, 165, 167, 185, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 390, 398, 431, 447, 455, 521, 556, 600, 805, 821], "banana": [118, 185, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 232, 390, 398, 455, 521], "summari": [119, 232, 663, 859], "usd": [119, 232], "2020": [119, 137, 232, 303, 306, 309, 311, 313, 316, 322, 330, 552, 600, 670, 672, 675, 681, 683, 686, 689, 695, 703], "2021": [119, 136, 196, 232, 449, 496, 551, 600, 676, 725, 823, 859], "null_count": [119, 122, 232, 295, 521, 662, 663, 859], "266667": [119, 232], "std": [119, 232, 399, 521, 600, 663, 775, 859], "101514": [119, 232], "707107": [119, 232, 334, 521, 709, 859], "median": [119, 161, 232, 402, 521, 600, 771, 859], "snippet": [122, 232, 541, 600], "fold": [122, 232, 378, 476, 482, 483, 505, 511, 541, 600], "acc": [122, 232, 482, 483, 491, 505, 541, 600], "is_nul": [122, 232, 521, 541, 600, 859], "height": [122, 232], "sizeunit": [124, 232, 707, 859], "total": [124, 232, 707, 859], "heap": [124, 232, 707, 859], "its": [124, 194, 232, 320, 325, 585, 600, 693, 698, 707, 859], "bitmap": [124, 232, 707, 859], "therefor": [124, 232, 707, 859], "structarrai": [124, 232, 707, 859], "constant": [124, 137, 232, 552, 600, 707, 859], "unchang": [124, 232, 245, 462, 521, 561, 594, 600, 707, 844, 859], "visibl": [124, 232, 707, 859], "capac": [124, 177, 232, 707, 789, 859], "ffi": [124, 232, 707, 859], "kb": [124, 232, 707, 859], "mb": [124, 232, 707, 859], "gb": [124, 232, 707, 859], "tb": [124, 232, 707, 859], "scale": [124, 232, 707, 859], "1_000_000": [124, 232, 707, 859], "25888898": [124, 232], "689577102661133": [124, 232], "long": [125, 154, 195, 232, 543, 565, 600], "largelist": [125, 232], "letter": [125, 208, 218, 232, 336, 489, 521, 543, 595, 596, 600], "locat": [126, 167, 190, 194, 232, 585, 600, 608, 783, 833, 859], "faster": [126, 195, 232, 399, 438, 465, 521, 608, 609, 768, 812, 859], "onlin": [126, 232, 608, 859], "rerun": [126, 232, 608, 859], "them": [126, 136, 137, 148, 196, 232, 266, 384, 385, 478, 521, 551, 552, 557, 600, 608, 632, 753, 754, 859], "latter": [126, 232, 608, 859], "20": [126, 141, 142, 160, 162, 166, 167, 232, 252, 253, 254, 256, 296, 320, 325, 347, 350, 496, 521, 567, 600, 698], "40": [126, 160, 232, 320, 325, 347, 521, 567, 600, 676, 698], "60": [126, 232, 321, 322, 449, 691, 694, 695, 823], "fill_valu": [127, 176, 195, 232, 340, 414, 521, 545, 576, 600, 714, 787, 859], "Not": [127, 232, 357, 359, 521, 545, 600], "To": [127, 232, 298, 299, 341, 511, 521, 545, 600], "fillnullstrategi": [128, 232, 341, 521, 546, 600, 715, 859], "matches_supertyp": [128, 232, 546, 600], "forward": [128, 148, 232, 341, 346, 521, 546, 557, 600, 715, 859], "consecut": [128, 232, 280, 341, 346, 426, 521, 546, 600, 715, 800, 859], "supertyp": [128, 232, 244, 521, 546, 600], "fill_nan": [128, 232, 521, 600, 859], "reduct": [131, 232], "effect": [131, 232, 591, 600], "supercast": [131, 232], "similar": [131, 148, 232, 387, 521, 557, 600], "parent": [131, 232], "rule": [131, 232, 323, 696], "arithmet": [131, 232], "zip_with": [131, 232, 859], "foo11": [131, 232], "bar22": [131, 232], "null_equ": [132, 232, 781, 859], "retriev": [133, 232, 257, 258, 453, 623, 624, 827], "maintain_ord": [135, 159, 161, 193, 196, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 232, 240, 245, 458, 464, 521, 536, 544, 550, 568, 584, 600, 846, 859], "consist": [135, 232, 550, 600], "agg": [135, 136, 137, 232, 240, 245, 342, 422, 458, 469, 521, 536, 544, 550, 551, 552, 568, 600], "loop": [135, 232], "sub_df": [135, 232], "index_column": [136, 137, 232, 551, 552, 600], "truncat": [136, 232, 551, 568, 600], "include_boundari": [136, 232, 551, 600], "start_bi": [136, 232, 551, 600], "startbi": [136, 232, 551, 600], "dynamicgroupbi": [136, 232], "normal": [136, 232, 332, 364, 420, 521, 551, 600, 706, 740, 794, 859], "groupbi": [136, 137, 157, 232, 235, 240, 245, 262, 295, 342, 387, 422, 423, 458, 469, 472, 521, 536, 544, 551, 552, 568, 600, 628, 662, 859], "member": [136, 232, 551, 600, 731, 859], "seen": [136, 232, 280, 346, 521, 551, 600], "roll": [136, 137, 232, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 478, 521, 551, 552, 600, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 859], "slot": [136, 232, 261, 295, 296, 521, 551, 600, 627, 662, 664, 859], "1n": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690, 693, 698], "nanosecond": [136, 137, 148, 196, 232, 317, 320, 321, 325, 400, 401, 402, 403, 404, 406, 407, 408, 487, 521, 551, 552, 557, 600, 690, 693, 694, 698], "1u": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690, 693, 698], "microsecond": [136, 137, 148, 196, 232, 317, 320, 321, 325, 400, 401, 402, 403, 404, 406, 407, 408, 486, 487, 521, 551, 552, 557, 568, 600, 690, 693, 698], "1m": [136, 137, 148, 196, 232, 309, 311, 316, 317, 320, 322, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 681, 683, 689, 690, 693, 695, 698], "millisecond": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 487, 521, 551, 552, 557, 600, 690, 693, 698], "1h": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 674, 690, 693, 698], "1w": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690, 693, 698], "week": [136, 137, 148, 196, 232, 317, 320, 325, 328, 400, 401, 402, 403, 404, 406, 407, 408, 487, 521, 551, 552, 557, 600, 690, 693, 698, 701], "month": [136, 137, 148, 196, 232, 302, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 485, 486, 521, 551, 552, 557, 600, 671, 690, 693, 698], "1y": [136, 137, 148, 196, 232, 317, 320, 325, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690, 693, 698, 704], "year": [136, 137, 148, 196, 232, 307, 317, 318, 320, 325, 327, 400, 401, 402, 403, 404, 406, 407, 408, 485, 486, 521, 551, 552, 557, 600, 676, 690, 691, 693, 698, 700], "1i": [136, 137, 148, 196, 232, 317, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 552, 557, 600, 690], "Or": [136, 137, 148, 196, 232, 387, 514, 521, 551, 552, 557, 600], "10i": [136, 137, 232, 551, 552, 600], "often": [136, 137, 232, 396, 521, 551, 552, 600], "ascend": [136, 137, 232, 474, 551, 552, 600], "dynam": [136, 232, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 600], "matter": [136, 137, 232, 551, 552, 600], "neg": [136, 175, 176, 178, 232, 273, 274, 413, 414, 421, 443, 521, 551, 575, 576, 578, 591, 600, 639, 640, 786, 787, 795, 817, 859], "_lower_bound": [136, 232, 551, 600], "_upper_bound": [136, 232, 551, 600], "impact": [136, 232, 551, 600], "harder": [136, 232, 551, 600], "datapoint": [136, 232, 551, 600], "mondai": [136, 232, 328, 551, 600, 701], "date_rang": [136, 196, 232, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 551, 600, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704], "30m": [136, 232, 320, 325, 551, 600, 693, 698], "\u03bc": [136, 137, 148, 196, 232, 300, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 551, 552, 600, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704], "time_min": [136, 232, 551, 600], "time_max": [136, 232, 551, 600], "boundari": [136, 232, 284, 285, 286, 521, 551, 600, 652, 653, 654, 859], "ad": [136, 192, 200, 232, 244, 482, 483, 521, 551, 588, 600], "time_count": [136, 232, 551, 600], "_lower_boundari": [136, 232, 551, 600], "_upper_boundari": [136, 232, 551, 600], "lower_bound": [136, 232, 521, 551, 600], "upper_bound": [136, 232, 521, 551, 600], "time_agg_list": [136, 232, 551, 600], "idx": [136, 232, 278, 551, 600, 644, 783, 859], "arang": [136, 195, 205, 232, 551, 594, 600], "2i": [136, 232, 551, 600], "3i": [136, 232, 551, 600], "a_agg_list": [136, 232, 551, 600], "rollinggroupbi": [137, 232], "dynamic_groupbi": [137, 232, 552, 600], "groupby_dynam": [137, 232, 552, 600], "45": [137, 232, 320, 325, 428, 433, 552, 600, 693, 698, 802, 807], "48": [137, 232, 552, 600], "18": [137, 232, 320, 325, 329, 350, 363, 521, 552, 568, 600, 702], "19": [137, 148, 232, 320, 552, 600, 693, 698], "43": [137, 232, 552, 600], "strptime": [137, 232, 323, 552, 600, 696], "2d": [137, 188, 232, 552, 600, 671], "sum_a": [137, 232, 552, 600], "min_a": [137, 232, 552, 600], "max_a": [137, 232, 552, 600], "to_list": [137, 232, 278, 552, 600, 644, 859], "seed": [138, 171, 232, 347, 410, 416, 521, 720, 779, 790, 859], "seed_1": [138, 232, 347, 521, 720, 859], "seed_2": [138, 232, 347, 521, 720, 859], "seed_3": [138, 232, 347, 521, 720, 859], "hash": [138, 232, 521, 859], "u64": [138, 232, 347, 395, 521, 568, 600, 720, 859], "10783150408545073287": [138, 232], "1438741209321515184": [138, 232], "10047419486152048166": [138, 232], "2047317070637311557": [138, 232], "grown": [141, 232], "baz": [142, 143, 161, 194, 215, 232, 444, 446, 555, 585, 600, 820], "intermedi": [143, 232, 555, 600, 723, 859], "linear": [143, 163, 216, 232, 259, 350, 376, 392, 404, 478, 479, 504, 521, 555, 569, 600, 625, 723, 761, 773, 859], "mask": [144, 146, 232, 260, 352, 354, 362, 521, 626, 716, 726, 729, 738, 758, 759, 782, 801, 851, 859], "left_on": [147, 148, 232, 556, 557, 600], "right_on": [147, 148, 232, 556, 557, 600], "joinstrategi": [147, 232, 556, 600], "suffix": [147, 148, 203, 232, 357, 359, 360, 361, 398, 431, 521, 556, 557, 600, 805], "_right": [147, 148, 232, 556, 557, 600], "outer": [147, 232, 556, 600], "semi": [147, 232, 556, 600], "anti": [147, 232, 556, 600, 782, 783, 859], "cross": [147, 232, 556, 600], "join_asof": [147, 232, 556, 600], "stringcach": [147, 232, 530], "other_df": [147, 232, 556, 600], "by_left": [148, 232, 557, 600], "by_right": [148, 232, 557, 600], "asofjoinstrategi": [148, 232, 557, 600], "allow_parallel": [148, 232, 556, 557, 600], "force_parallel": [148, 232, 556, 557, 600], "asof": [148, 232, 557, 600], "rather": [148, 232, 452, 557, 600, 826], "asof_join": [148, 232], "search": [148, 232, 557, 600], "last": [148, 161, 179, 182, 193, 218, 232, 254, 256, 264, 277, 295, 302, 318, 327, 446, 457, 512, 521, 557, 579, 582, 584, 596, 600, 618, 621, 630, 643, 662, 671, 691, 700, 820, 832, 859], "greater": [148, 232, 420, 446, 521, 557, 600, 794, 820, 859], "numer": [148, 152, 232, 284, 285, 286, 396, 415, 521, 530, 557, 600, 652, 653, 654, 737, 781, 788, 859], "distanc": [148, 232, 557, 600], "plan": [148, 149, 232, 533, 538, 539, 549, 556, 557, 570, 577, 592, 600], "gdp": [148, 232], "2016": [148, 232], "2017": [148, 232], "2018": [148, 232], "2019": [148, 232], "record": [148, 232], "jan": [148, 232], "1st": [148, 232], "4164": [148, 232], "4411": [148, 232], "4566": [148, 232], "4696": [148, 232], "popul": [148, 232], "12th": [148, 232], "82": [148, 232], "66": [148, 232, 773, 859], "83": [148, 232], "52": [148, 201, 232, 409, 521, 589, 600], "request": [149, 232], "small": [149, 232, 320, 325, 422, 423, 521, 544, 600], "describe_plan": [149, 232, 600], "unoptim": [149, 232, 539, 600], "describe_optimized_plan": [149, 232, 600], "show_graph": [149, 232, 600], "un": [149, 232], "graphviz": [149, 232, 577, 600], "advis": [149, 232], "thei": [149, 232, 336, 399, 521, 600, 768, 859], "head": [150, 232, 244, 367, 521, 560, 600, 742, 859], "axi": [151, 152, 154, 155, 181, 232, 565, 600], "null_strategi": [152, 181, 232], "nullstrategi": [152, 181, 232], "propag": [152, 181, 232, 384, 385, 521, 753, 754, 859], "panicexcept": [152, 232, 454, 530], "666667": [152, 197, 232, 333, 521, 586, 600], "id_var": [154, 232, 565, 600], "value_var": [154, 232, 565, 600], "variable_nam": [154, 232, 565, 600], "value_nam": [154, 232, 565, 600], "unpivot": [154, 232, 565, 600], "wide": [154, 195, 232, 565, 600], "leav": [154, 232, 565, 600], "identifi": [154, 232, 565, 600], "massag": [154, 232, 565, 600], "measur": [154, 232, 565, 600], "One": [157, 161, 232, 859], "what": [157, 232, 842, 850, 859], "struct": [157, 191, 194, 232, 278, 445, 446, 467, 482, 483, 484, 521, 585, 600, 644, 819, 820], "pack": [157, 232], "expr_unique_subset": [157, 232], "df_nuniqu": [157, 232], "equival": [157, 232, 438, 812, 824, 825], "df_agg_nuniqu": [157, 232], "simpl": [157, 232], "as_dict": [159, 232], "predict": [159, 161, 164, 196, 232], "k": [159, 232, 282, 364, 463, 521, 648, 740, 845, 859], "l": [159, 232, 344, 521], "func": [160, 232, 567, 600, 609, 859], "offer": [160, 232, 567, 600], "wai": [160, 232, 567, 600], "recommend": [160, 232], "fulli": [160, 232], "advantag": [160, 232], "cast_str_to_int": [160, 232, 567, 600], "col_nam": [160, 232, 567, 600], "aggregate_fn": [161, 232], "pivotagg": [161, 232], "sort_column": [161, 232], "well": [161, 232], "predefin": [161, 232], "transpos": [161, 215, 232], "discoveri": [161, 232], "interpol": [163, 216, 232, 341, 376, 392, 404, 504, 521, 569, 600, 761, 773, 859], "interpolationmethod": [163, 216, 232, 392, 404, 504, 521, 569, 600, 761, 773, 859], "midpoint": [163, 216, 232, 392, 404, 504, 521, 569, 600, 761, 773, 859], "subsequ": [164, 232], "pair": [165, 232, 571, 600], "old": [165, 232, 571, 600], "new_col": [166, 232], "val": [168, 232, 282, 462, 521, 648], "by_pred": [169, 232], "accord": [169, 232, 676], "mutual": [169, 232], "exclus": [169, 232], "addition": [169, 232], "clariti": [169, 232], "suppli": [169, 232], "anyth": [169, 232], "toomanyrowsreturn": [169, 232, 530], "norowsreturn": [169, 232, 530], "inherit": [169, 232], "rowsexcept": [169, 232, 530], "frac": [171, 232, 333, 334, 335, 410, 420, 463, 521, 708, 709, 710, 779, 794, 845, 859], "with_replac": [171, 232, 410, 521, 779, 859], "shuffl": [171, 205, 232, 410, 521, 594, 779, 859], "modul": [171, 232, 410, 416, 520, 521, 779, 859], "whenthen": [173, 232, 574, 600], "whenthenthen": [173, 232, 574, 600], "shift_and_fil": [175, 232, 521, 600, 859], "shift": [176, 232, 261, 296, 388, 414, 478, 521, 576, 600, 627, 664, 757, 787, 859], "shrink": [177, 232, 415, 521, 788, 789, 859], "fit": [177, 195, 232, 415, 521, 788, 789, 859], "hold": [177, 232, 477], "nulls_last": [179, 232, 254, 256, 422, 521, 579, 600, 618, 621, 859], "ddof": [180, 197, 232, 425, 468, 503, 508, 509, 513, 521, 580, 586, 600, 798, 849, 859], "deviat": [180, 232, 334, 406, 425, 509, 521, 580, 600, 709, 798, 859], "degre": [180, 197, 232, 425, 468, 503, 508, 521, 798, 849, 859], "freedom": [180, 197, 232, 425, 468, 503, 508, 521, 798, 849, 859], "816497": [180, 232], "21": [181, 232], "16a": [181, 232], "27b": [181, 232], "38c": [181, 232], "nth": [183, 232, 446, 459, 521, 583, 600, 820, 834, 859], "mostli": [184, 232, 342, 521], "categoricaltyp": [184, 232], "large_str": [184, 232], "as_seri": [185, 232], "fruit": [185, 232, 390, 398, 431, 447, 455, 521, 805, 821], "car": [185, 232, 390, 398, 455, 521], "beetl": [185, 232, 390, 398, 455, 521], "audi": [185, 232, 390, 398, 455, 521], "28": [185, 232, 329, 702], "300": [185, 232, 769, 770, 772, 859], "hot": [187, 232], "foo_1": [187, 232], "foo_2": [187, 232], "bar_3": [187, 232], "bar_4": [187, 232], "ham_a": [187, 232], "ham_b": [187, 232], "re": [188, 232, 495], "ll": [188, 232, 842, 859], "numpy_arrai": [188, 232], "date_as_object": [189, 232], "sent": [189, 232, 842, 859], "datetime64": [189, 232], "pandas_df": [189, 232], "three": [191, 232, 411, 510, 521], "four": [191, 232, 510], "five": [191, 232], "num": [191, 232, 351, 354, 452, 521], "include_head": [192, 232], "header_nam": [192, 232], "column_nam": [192, 232], "iter": [192, 232, 295, 521, 662, 859], "veri": [192, 232, 535, 600, 655, 859], "perhap": [192, 232], "column_2": [192, 232], "name_gener": [192, 232, 278, 644], "base_nam": [192, 232], "my_column_": [192, 232], "my_column_0": [192, 232], "my_column_1": [192, 232], "my_column_2": [192, 232], "uniquekeepstrategi": [193, 232, 584, 600], "conjunct": [193, 232], "fail": [193, 232, 449, 584, 600, 609, 823, 859], "decompos": [194, 232, 585, 600], "t_a": [194, 232, 585, 600], "t_b": [194, 232, 585, 600], "t_c": [194, 232, 585, 600], "t_d": [194, 232, 585, 600], "womp": [194, 232, 585, 600], "t_": [194, 232, 585, 600], "t_struct": [194, 232, 585, 600], "step": [195, 232, 473], "unstackdirect": [195, 232], "form": [195, 232, 388, 521, 757, 859], "much": [195, 232, 295, 521, 662, 859], "pivot": [195, 232], "phase": [195, 232], "subject": [195, 232], "ascii_uppercas": [195, 232], "col1": [195, 232], "col2": [195, 232], "h": [195, 232, 344, 415, 521], "col1_0": [195, 232], "col1_1": [195, 232], "col1_2": [195, 232], "col2_0": [195, 232], "col2_1": [195, 232], "col2_2": [195, 232], "time_column": [196, 232], "frequenc": [196, 232], "forward_fil": [196, 232, 521], "06": [196, 232, 319, 331, 693, 701], "varianc": [197, 232, 335, 364, 408, 468, 513, 521, 586, 600, 710, 740, 777, 849, 859], "grow": [198, 232], "b_squar": [200, 232, 588, 600], "36": [200, 232, 588, 600], "named_expr": [201, 232, 589, 600], "is_not": [201, 232, 521, 589, 600], "opt": [201, 232, 589, 600], "with_columns_kwarg": [201, 232, 589, 600], "row_nr": [202, 232, 591, 600, 783, 859], "complet": [203, 842, 859], "idiomat": 203, "_sum": 203, "tail": [203, 232, 244, 420, 521, 600, 794, 859], "_tail_sum": 203, "bar_sum": 203, "bar_tail_sum": 203, "sub": [205, 431, 447, 805, 821], "id": [205, 439, 440, 465, 467, 521, 594, 847, 859], "triangl": [205, 594], "group_df": [205, 594], "nr": [208, 218, 595, 596], "maxim": [210, 222, 252, 521, 616, 859], "833333": 211, "minim": [213, 225, 253, 258, 415, 521, 617, 624, 748, 788, 859], "pivot_column": 215, "values_column": 215, "pivotop": 215, "larg": [215, 422, 423, 521], "overview": [232, 521, 530, 600, 859], "public": [232, 521, 530, 600, 859], "columnstyp": 232, "variou": [232, 521, 600, 859], "lead": [232, 412, 437, 442, 448, 452, 458, 467, 498, 501, 508, 521, 561, 594, 600, 784, 811, 822, 826, 859], "behavior": [232, 245, 472, 498, 501, 521], "mydatafram": 232, "notic": [232, 859], "initi": [232, 482, 491], "df4": 232, "drop_in_plac": 232, "drop_nul": [232, 298, 521, 600, 859], "estimated_s": [232, 859], "explod": [232, 344, 521, 600, 859], "find_idx_by_nam": 232, "frame_equ": [232, 320, 325], "get_column": [232, 511], "groupby_rol": [232, 400, 401, 402, 403, 404, 406, 407, 408, 521, 551, 600], "hash_row": 232, "hstack": 232, "insert_at_idx": 232, "is_dupl": [232, 521, 859], "is_empti": [232, 859], "is_uniqu": [232, 521, 859], "melt": [232, 600], "n_uniqu": [232, 521, 593, 859], "partition_bi": 232, "pearson_corr": 232, "pearson": [232, 364, 420, 503, 521, 740, 794, 859], "correl": [232, 503, 508], "coeffici": [232, 420, 521, 794, 859], "corrcoef": 232, "pipe": [232, 600], "quantil": [232, 404, 521, 600, 773, 859], "replace_at_idx": 232, "shrink_to_fit": [232, 859], "take_everi": [232, 521, 600, 859], "to_arrow": [232, 859], "to_dict": 232, "to_dummi": [232, 859], "to_numpi": [232, 372, 521, 859], "to_panda": [232, 859], "to_struct": [232, 453, 454], "unnest": [232, 445, 446, 600, 819, 820], "unstack": 232, "upsampl": 232, "var": [232, 521, 600, 859], "write_avro": 232, "write_ipc": 232, "write_json": [232, 570, 600], "write_parquet": 232, "sinc": [235, 304, 673], "favor": 235, "futur": 235, "94": [240, 521], "confus": [242, 357, 359, 521], "tt": [242, 521], "tf": [242, 243, 521], "ff": [242, 243, 521], "upcast": [244, 521], "assum": [245, 521, 561, 594, 600], "a_times_2": [245, 521], "invers": [246, 247, 248, 249, 250, 251, 521, 610, 611, 612, 613, 614, 615, 859], "cosin": [246, 247, 287, 288, 372, 521, 610, 611, 656, 657, 859], "570796": [246, 248, 521, 610, 612, 859], "hyperbol": [247, 249, 251, 288, 419, 461, 521, 611, 613, 615, 657, 793, 836, 859], "sine": [248, 249, 372, 418, 419, 521, 612, 613, 792, 793, 859], "881374": [249, 521, 613, 859], "tangent": [250, 251, 460, 461, 521, 614, 615, 835, 836, 859], "785398": [250, 521, 614, 859], "would": [254, 256, 264, 377, 393, 474, 521, 618, 621, 630, 762, 842, 859], "arg_sort": [256, 521, 621, 859], "sublist": [257, 258, 260, 261, 263, 264, 265, 266, 267, 274, 277, 623, 624, 626, 627, 629, 630, 631, 632, 633, 640, 643, 731, 859], "membership": [260, 626], "null_behavior": [261, 296, 521, 627, 664, 859], "nullbehavior": [261, 296, 521, 627, 664, 859], "th": [261, 296, 420, 521, 627, 664, 794, 859], "against": [262, 628, 865], "blindli": [262, 628], "worth": [262, 628], "enough": [262, 420, 521, 628, 794, 859], "concat_list": [262, 488, 628], "rank": [262, 488, 508, 521, 628, 859], "taken": [274, 443, 458, 521, 640, 817], "n_field_strategi": [278, 644], "tostructstrategi": [278, 644], "first_non_nul": [278, 644], "max_width": [278, 644], "field_0": [278, 644], "field_1": [278, 644], "field_n": [278, 644], "col_name_": [278, 644], "col_name_0": [278, 644], "col_name_1": [278, 644], "col_name_2": [278, 644], "strict": [281, 429, 449, 521, 646, 781, 803, 823, 859], "throw": [281, 434, 521, 646, 808, 859], "due": [281, 521, 646, 859], "overflow": [281, 293, 294, 456, 521, 646, 660, 661, 831, 859], "categoricalord": [282, 648], "lexic": [282, 648], "min_val": [284, 286, 521, 652, 654, 859], "max_val": [284, 285, 521, 652, 653, 859], "foo_clip": [284, 285, 286, 521], "clip": [285, 286, 521, 653, 654, 859], "543081": [288, 521, 657, 859], "cumul": [290, 291, 292, 293, 294, 482, 483, 484, 521, 658, 659, 660, 661, 859], "a_revers": [290, 291, 292, 293, 294, 373, 398, 455, 521], "uint16": [293, 294, 456, 521, 660, 661, 831, 859], "prevent": [293, 294, 363, 456, 521, 660, 661, 831, 859], "min_period": [295, 333, 334, 335, 399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 662, 708, 709, 710, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "slide": [295, 521, 662, 859], "anoth": [295, 300, 326, 423, 521, 609, 662, 669, 699, 781, 859], "realli": [295, 521, 662, 859], "complex": [295, 463, 521, 662, 845, 859], "visit": [295, 521, 662, 859], "44": [297, 521], "drop_nan": [299, 521, 859], "tu": [300, 304, 324, 329, 669, 670, 673, 697, 702], "lose": [300, 669], "2001": [300, 302, 304, 305, 312, 314, 317, 318, 319, 320, 321, 324, 325, 327, 328, 329, 331, 449, 669, 671, 673, 674, 677, 678, 679, 680, 682, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 823], "tu_m": [300, 669], "tu_n": [300, 669], "tz": [301, 326, 330, 670, 699, 703], "zone": [301, 326, 330, 670, 699, 703], "with_time_zon": [301, 670], "timestamp": [301, 670], "extract": [302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 327, 328, 331, 433, 434, 671, 672, 674, 675, 676, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 694, 695, 700, 701, 704, 807, 808], "weekdai": [302, 318], "day_of_month": [302, 318, 328], "ordinal_dai": [302, 328], "day_of_year": [302, 318, 328], "diff": [303, 306, 309, 311, 313, 316, 322, 521, 672, 675, 681, 683, 686, 689, 695, 859], "days_diff": 303, "epochtimeunit": [304, 673], "unix": [304, 673], "epoch_n": [304, 673], "epoch_": [304, 673], "978307200000000": [304, 324, 673, 697], "978307200": [304, 673], "978393600000000": [304, 324, 673, 697], "978393600": [304, 673], "978480000000000": [304, 324, 673, 697], "978480000": [304, 673], "hours_diff": 306, "iso": [307, 327, 328, 676, 700, 701], "correspond": [307, 393, 521, 676, 762, 859], "microseconds_diff": 309, "1001": [309, 311, 316], "002": [309, 311, 316, 487, 681, 683, 689], "003": [309, 311, 316], "997": [309, 311, 316], "998": [309, 311, 316], "999": [309, 311, 316], "milliseconds_diff": 311, "59": [312, 321, 486, 685, 694], "minutes_diff": 313, "1440": [313, 686], "nanoseconds_diff": 316, "1000000": [316, 452, 689], "leap": [317, 690], "account": [317, 333, 334, 335, 521, 690, 708, 709, 710, 859], "minu": [317, 690], "dictat": [317, 690], "2000": [317, 690], "2005": [317, 690], "date_plus_1i": [317, 690], "1y2mo": [317, 690], "date_min": 317, "1998": [317, 690], "2002": [317, 319, 331, 690, 704], "1999": [317, 690], "2003": [317, 690], "2004": [317, 690], "2006": [317, 690], "ordin": [318, 393, 521, 691, 762, 859], "366": [318, 691], "180": [319, 331], "divid": [320, 325, 333, 334, 335, 364, 521, 693, 698, 708, 709, 710, 740, 859], "bucket": [320, 325, 693, 698], "half": [320, 333, 334, 335, 521, 693, 708, 709, 710, 859], "seconod": [320, 693], "eg": [320, 325, 449], "225": [320, 325], "to_fram": [320, 325, 449, 453, 454, 782, 783, 819, 820, 823, 859], "10m": [320, 325, 693, 698], "milli": [321, 694], "micro": [321, 694], "compon": [321, 449, 485, 486, 487, 694], "456789": 321, "654321": 321, "111110": 321, "765431": 321, "sec": 321, "11111": 321, "seconds_diff": 322, "fmt": [323, 349, 449, 492, 521, 554, 600, 696, 823], "timestamp_n": [324, 697], "timestamp_m": 324, "978307200000": 324, "978393600000": 324, "978480000000": 324, "naiv": [326, 699], "53": [327, 700], "sundai": [328, 701], "incorrect": [329, 412, 521, 594, 702, 784, 859], "tu_u": [329, 702], "32971": [329, 702], "32974": [329, 702], "32976": [329, 702], "europ": [330, 670, 703], "london": [330, 670, 703], "gmt": [330, 670, 703], "bst": [330, 670, 703], "718281828459045": [332, 369, 521, 706, 743, 859], "formula": [332, 521, 706, 859], "pk": [332, 521, 706, 859], "459148": [332, 521], "754888": [332, 521], "com": [333, 334, 335, 432, 521, 708, 709, 710, 806, 859], "span": [333, 334, 335, 521, 708, 709, 710, 859], "half_lif": [333, 334, 335, 521, 708, 709, 710, 859], "adjust": [333, 334, 335, 420, 521, 708, 709, 710, 794, 859], "exponenti": [333, 334, 335, 337, 521, 708, 709, 710, 711, 859], "weight": [333, 334, 335, 399, 400, 401, 402, 403, 404, 406, 407, 408, 420, 521, 708, 709, 710, 768, 769, 770, 771, 772, 773, 775, 776, 777, 794, 859], "averag": [333, 393, 521, 708, 762, 859], "decai": [333, 334, 335, 521, 708, 709, 710, 859], "term": [333, 334, 335, 435, 438, 521, 708, 709, 710, 809, 812, 859], "mass": [333, 334, 335, 521, 708, 709, 710, 859], "gamma": [333, 334, 335, 521, 708, 709, 710, 859], "foral": [333, 334, 335, 521, 708, 709, 710, 859], "geq": [333, 334, 335, 521, 708, 709, 710, 859], "theta": [333, 334, 335, 521, 708, 709, 710, 859], "life": [333, 334, 335, 521, 708, 709, 710, 859], "exp": [333, 334, 335, 521, 708, 709, 710, 859], "ln": [333, 334, 335, 521, 708, 709, 710, 859], "smooth": [333, 334, 335, 521, 708, 709, 710, 859], "factor": [333, 334, 335, 462, 521, 708, 709, 710, 844, 859], "leq": [333, 334, 335, 521, 708, 709, 710, 859], "begin": [333, 334, 335, 432, 521, 708, 709, 710, 806, 859], "imbal": [333, 334, 335, 521, 708, 709, 710, 859], "ew": [333, 334, 335, 521, 708, 709, 710, 859], "w_i": [333, 334, 335, 521, 708, 709, 710, 859], "recurs": [333, 334, 335, 521, 708, 709, 710, 859], "y_0": [333, 334, 335, 521, 708, 709, 710, 859], "x_0": [333, 334, 335, 521, 708, 709, 710, 859], "y_t": [333, 334, 335, 521, 708, 709, 710, 859], "y_": [333, 334, 335, 521, 708, 709, 710, 859], "x_t": [333, 334, 335, 521, 708, 709, 710, 859], "observ": [333, 334, 335, 521, 708, 709, 710, 859], "428571": [333, 521], "bia": [334, 335, 364, 405, 420, 521, 709, 710, 740, 774, 794, 859], "unbias": [334, 335, 521, 709, 710, 859], "963624": [334, 521, 709, 859], "928571": [335, 521, 710, 859], "wildcard": [336, 470, 477, 482, 483, 489, 491, 505, 521], "regex": [336, 427, 428, 431, 432, 433, 439, 440, 447, 477, 489, 521, 801, 802, 805, 806, 807, 813, 814, 821], "aa": [336, 489, 521], "ba": [336, 489, 521], "cc": [336, 489, 521], "718282": [337, 521], "389056": [337, 521], "54": [337, 521], "59815": [337, 521], "expand": [338, 344, 396, 521, 712, 859], "group_col": [342, 469, 521], "g1": [342, 387, 469, 521], "g2": [342, 387, 469, 521], "lt": [342, 469, 521], "gte": [342, 469, 521], "r": [344, 428, 432, 433, 439, 521, 802, 806, 807, 813], "word": [344, 521], "latest": [346, 378, 521], "9774092659964970114": [347, 521], "13614470193936745724": [347, 521], "1101441246220388612": [347, 521], "11638928888656214026": [347, 521], "13382926553367784577": [347, 521], "cumsum": [349, 521, 554, 600, 859], "regrid": [350, 521], "grid": [350, 521], "df_original_grid": [350, 521], "grid_point": [350, 521], "df_new_grid": [350, 521], "include_bound": [351, 521], "primit": [351, 355, 521, 842, 859], "finit": [353, 508, 521, 728, 859], "optional_memb": [355, 521, 731, 859], "infinit": [356, 521, 732, 859], "_isnan": [357, 521], "b_isnan": [357, 521], "negat": [358, 521], "_is_not_nan": [359, 521], "b_is_not_nan": [359, 521], "_not_nul": [360, 521], "a_not_nul": [360, 521], "b_not_nul": [360, 521], "_isnul": [361, 521], "a_isnul": [361, 521], "b_isnul": [361, 521], "root": [363, 373, 379, 390, 424, 455, 520, 521, 797, 859], "undo": [363, 380, 521], "duplicateerror": [363, 521, 530], "occurr": [363, 521], "333333": [363, 408, 521, 757, 777, 859], "fisher": [364, 420, 521, 740, 794, 859], "fourth": [364, 521, 740, 859], "central": [364, 420, 521, 740, 794, 859], "definit": [364, 521, 740, 859], "subtract": [364, 521, 740, 859], "distribut": [364, 420, 521, 740, 794, 859], "elimin": [364, 521, 740, 859], "come": [364, 521, 531, 599, 740, 859], "bias": [364, 420, 521, 740, 794, 859], "scipi": [364, 420, 521, 740, 794, 859], "stat": [364, 420, 521, 740, 794, 859], "153061": [364, 521], "logarithm": [369, 370, 521, 743, 744, 859], "584963": [369, 521], "30103": [370, 521], "60206": [370, 521], "lowest": [371, 521], "9223372036854775808": [371, 521], "agg_list": [372, 521], "elementwis": [372, 399, 400, 401, 402, 403, 404, 406, 407, 408, 470, 471, 521, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "third": [372, 521], "parti": [372, 521], "book": [372, 521], "argmax": [372, 521], "_revers": [373, 398, 455, 521], "b_revers": [373, 398, 455, 521], "computeerror": [377, 530], "keep_nam": [380, 521], "poison": [384, 385, 521, 753, 754, 859], "nanmax": [384, 385, 521, 753, 754, 859], "wherea": [384, 385, 521, 553, 560, 600, 753, 754, 859], "subgroup": [387, 521], "max_by_group": [387, 521], "recent": [388, 521, 757, 859], "percent": [388, 521, 757, 859], "090909": [388, 521], "expon": [389, 521], "power": [389, 521], "reverse_": [390, 521], "reverse_a": [390, 521], "reverse_fruit": [390, 521], "reverse_b": [390, 521], "reverse_car": [390, 521], "rankmethod": [393, 521, 762, 859], "ti": [393, 521, 762, 859], "appropri": [393, 521, 762, 859], "competit": [393, 521, 762, 859], "highest": [393, 466, 508, 521, 762, 859], "immedi": [393, 510, 521, 762, 859], "64bit": [395, 521, 764, 859], "safe": [395, 521, 764, 842, 859], "coerc": [396, 521], "dim": [397, 521, 766, 859], "flat": [397, 521, 766, 859], "fruits_revers": [398, 455, 521], "cars_revers": [398, 455, 521], "window_s": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 521, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 859], "rolling_min": [399, 521, 768, 859], "rolling_max": [399, 521, 768, 859], "rolling_mean": [399, 521, 768, 859], "rolling_sum": [399, 521, 768, 859], "multipli": [399, 400, 401, 402, 403, 404, 406, 407, 408, 521, 768, 769, 770, 771, 772, 773, 775, 776, 777, 859], "358899": [399, 521], "041452": [399, 521], "567764": [399, 521], "travers": [400, 401, 403, 406, 407, 408, 521, 769, 770, 772, 775, 776, 777, 859], "vector": [400, 401, 403, 406, 407, 408, 521, 769, 770, 772, 775, 776, 777, 859], "5h": [400, 401, 402, 403, 404, 406, 407, 408, 521], "33": [404, 409, 477, 521, 773, 859], "skew": [405, 521, 774, 859], "527525": [406, 521, 775, 859], "digit": [409, 452, 521, 778, 802, 826, 859], "17": [409, 521, 656, 693, 859], "maintain": [411, 464, 521, 780, 846, 859], "six": [411, 521], "downstream": [412, 521, 784, 859], "code": [412, 521, 559, 600, 784, 859], "care": [412, 521, 784, 859], "extrema": [415, 521, 788, 859], "112": [415, 521], "129": [415, 521], "i8": [415, 521, 767, 859], "8589934592": [415, 521], "1073741824": [415, 521], "content": [416, 467, 521, 790, 859], "175201": [419, 521, 793, 859], "unimod": [420, 521, 794, 859], "skewtest": [420, 521, 794, 859], "speak": [420, 521, 794, 859], "g_1": [420, 521, 794, 859], "m_3": [420, 521, 794, 859], "m_2": [420, 521, 794, 859], "m_i": [420, 521, 794, 859], "sum_": [420, 521, 794, 859], "texttt": [420, 521, 794, 859], "k_3": [420, 521, 794, 859], "k_2": [420, 521, 794, 859], "sqrt": [420, 521, 794, 859], "343622": [420, 521], "larger": [422, 508, 521], "414214": [424, 521, 797, 859], "substr": [427, 431, 439, 440, 444, 445, 446, 447, 801, 805, 813, 814, 818, 819, 820, 821], "treat": [427, 439, 440, 801, 813, 814], "ends_with": [427, 447, 821], "crab": [427, 801], "dog": [427, 450, 451, 479, 801], "rab": [427, 801], "success": [428, 433, 802, 807], "overlap": [428, 433, 802, 807], "captur": [428, 432, 433, 802, 806, 807], "123": [428, 433, 440, 802, 807, 814, 840, 859], "bla": [428, 433, 802, 807], "asd": [428, 433, 802, 807], "678": [428, 433, 802, 807], "910t": [428, 433, 802, 807], "count_digit": 428, "transferencod": [429, 430, 803, 804], "hex": [429, 430, 803, 804], "base64": [429, 430, 803, 804], "thrown": [429, 803], "unabl": [429, 803], "unhandl": [429, 803], "666f6f": [429, 430, 803, 804], "626172": [429, 430, 803, 804], "mango": [431, 447, 805, 821], "go": [431, 805], "has_suffix": 431, "group_index": [432, 806], "vote": [432, 806], "ballon_dor": [432, 806], "candid": [432, 806], "messi": [432, 806], "ref": [432, 806], "candidat": [432, 806], "jorginho": [432, 806], "ronaldo": [432, 806], "w": [432, 806], "extracted_nr": 433, "910": [433, 807], "json_path": [434, 808], "jsonpath": [434, 808], "regardless": [434, 808], "json_val": [434, 808], "n_char": [435, 809], "caf\u00e9": [435, 438, 809, 812], "345": [435, 438, 809, 812], "\u6771\u4eac": [435, 438, 809, 812], "nchar": [435, 438], "fillchar": [436, 441, 810, 815], "justifi": [436, 441, 810, 815], "pad": [436, 441, 452, 810, 815, 826], "cow": [436, 441, 810, 815], "monkei": [436, 441, 810, 815], "hippopotamu": [436, 441, 810, 815], "whitespac": [437, 442, 448, 811, 816, 822], "trail": [437, 442, 448, 816, 822], "know": [438, 812, 842, 850, 859], "text": [438, 439, 440, 812], "replace_al": [439, 813], "123abc": [439, 813], "abc456": [439, 813], "abcabc": [440, 814], "123a123": [440, 814], "bc": [440, 814], "trim": [442, 448, 811, 816, 822], "subslic": [443, 817], "pear": [443, 817], "papaya": [443, 817], "dragonfruit": [443, 817], "s_slice": 443, "ear": [443, 817], "aya": [443, 817], "uit": [443, 817], "ya": [443, 817], "onf": [443, 817], "inclus": [444, 445, 818, 819], "a_1": [445, 819, 839, 859], "d_4": [445, 819], "rename_field": [445, 446, 819, 820], "first_part": [445, 446, 819, 820], "second_part": [445, 446, 819, 820], "remaind": [446, 820], "prefix": [447, 452, 521, 821, 826], "app": [447, 821], "has_prefix": 447, "strftime": [449, 823], "convers": [449, 530, 823, 841, 842, 859], "anywher": [449, 823], "3f": 449, "sun": [449, 823], "34": [449, 823], "lowercas": [450, 824], "variant": [450, 451], "uppercas": [451, 825], "10000": 452, "100000": 452, "0010": 452, "0001": 452, "00000": 452, "00001": 452, "my_struct": [453, 454, 510], "NOT": [454, 550, 600], "anymor": 454, "761594": [461, 521, 836, 859], "replic": [462, 521, 844, 859], "vals_phys": [462, 521], "largest": [463, 521, 845, 859], "smallest": [463, 521, 845, 859], "bottom_k": [463, 521], "appear": [465, 521, 847, 859], "value_count": [465, 521, 859], "9223372036854775807": [466, 521], "multithread": [467, 521], "columnwis": [470, 471], "AND": 470, "bitwis": [470, 471], "OR": 471, "returns_scalar": 472, "Be": 473, "argsort": [474, 521, 859], "hamburg": 477, "concat": [478, 479, 650, 750, 859], "lag": 478, "mimic": 478, "a_lag_": 478, "a_rol": 478, "plai": 479, "swim": 479, "walk": 479, "full_sent": 479, "covari": 481, "intoexpr": [482, 491], "include_init": 482, "accumul": [482, 483, 491, 505], "fn": [482, 483, 491, 505], "new_valu": [482, 483, 491, 505], "simpli": [482, 491], "cumreduc": 482, "across": [484, 511], "syntact": [484, 489, 490, 493, 504, 507, 511, 797, 859], "sugar": [484, 489, 490, 493, 504, 507, 511, 797, 859], "cumfold": 484, "999999": 486, "add_week": 487, "add_dai": 487, "add_second": 487, "add_millisecond": 487, "add_hour": 487, "add_millisec": 487, "ond": 487, "eval": 488, "arr": [488, 515, 842, 852, 859], "mathemat": 488, "a_b_doubl": 488, "fstring": 492, "placehold": 492, "hello_": 492, "_world": 492, "foo_": 492, "_bar_": 492, "foo_a_bar_1": 492, "foo_b_bar_2": 492, "foo_c_bar_3": 492, "agg_group": [493, 521], "export": 495, "allow_object": 496, "valueexcept": 496, "mode": [506, 521, 859], "propagate_nan": 508, "spearman": 508, "sever": 510, "a_and_b": 510, "isn": 514, "thens": 514, "chain": 514, "sometim": 520, "ab": [521, 859], "arcco": [521, 859], "arccosh": [521, 859], "arcsin": [521, 859], "arcsinh": [521, 859], "arctan": [521, 859], "arctanh": [521, 859], "arg_max": [521, 859], "arg_min": [521, 859], "arg_uniqu": [521, 859], "backward_fil": 521, "clip_max": [521, 859], "clip_min": [521, 859], "co": [521, 859], "cosh": [521, 859], "cumcount": 521, "cummax": [521, 859], "cummin": [521, 859], "cumprod": [521, 859], "cumulative_ev": [521, 859], "entropi": [521, 859], "ewm_mean": [521, 859], "ewm_std": [521, 859], "ewm_var": [521, 859], "extend_const": [521, 859], "flatten": 521, "inspect": [521, 600], "is_between": 521, "is_finit": [521, 859], "is_first": [521, 859], "is_in": [521, 859], "is_infinit": [521, 859], "is_nan": [521, 859], "is_not_nan": [521, 859], "is_not_nul": [521, 859], "kurtosi": [521, 859], "log10": [521, 859], "map_alia": 521, "nan_max": [521, 859], "nan_min": [521, 859], "pct_chang": [521, 859], "pow": 521, "reinterpret": [521, 859], "repeat_bi": 521, "reshap": [521, 859], "rolling_appli": [521, 859], "rolling_median": [521, 859], "rolling_quantil": [521, 859], "rolling_skew": [521, 859], "rolling_std": [521, 859], "rolling_var": [521, 859], "search_sort": [521, 859], "set_sort": [521, 859], "shrink_dtyp": [521, 859], "sin": [521, 859], "sinh": [521, 859], "sort_bi": 521, "tan": [521, 859], "tanh": [521, 859], "to_phys": [521, 859], "top_k": [521, 859], "unique_count": [521, 859], "expos": 530, "registr": 530, "miscellan": 530, "unset": 530, "arrowerror": 530, "invalidoperationerror": 530, "nodataerror": 530, "notfounderror": 530, "schemaerror": 530, "shapeerror": 530, "build_info": 530, "show_vers": 530, "sqlcontext": [530, 865], "hit": [533, 600], "node": [533, 554, 561, 568, 600], "huge": [536, 600], "saver": [536, 600], "500": [544, 600, 680, 682, 688, 694, 769, 770, 772, 859], "purpos": [544, 600], "help": [544, 600], "influenc": [544, 561, 600], "read_json": [549, 592, 600], "lazygroupbi": [550, 551, 552, 600], "typeerror": [550, 600], "subscript": [550, 600], "validate_output_schema": [561, 600], "past": [561, 600], "paramount": [561, 600], "hard": [561, 600], "bug": [561, 594, 600], "caller": [561, 594, 600], "invari": [561, 600], "upheld": [561, 600], "prune": [561, 600], "show_plot": [568, 600], "truncate_nod": [568, 600], "figsiz": [568, 577, 600], "gantt": [568, 600], "chart": [568, 600], "matplotlib": [568, 577, 600], "plot": [568, 577, 600], "groupby_partit": [568, 600], "470": [568, 600], "475": [568, 600], "1964": [568, 600], "from_json": [570, 600], "output_path": [577, 600], "raw_output": [577, 600], "figur": [577, 600], "290994": [580, 600], "118034": [580, 600], "433013": [580, 600], "1875": [586, 600], "extern": [590, 600], "df_a": [590, 600], "df_other": [590, 600], "afoo": [590, 600], "cfoo": [590, 600], "unique_nam": 593, "againat": 600, "instanti": 600, "profil": 600, "with_context": 600, "sr": [605, 859], "new_aliased_sr": [605, 859], "append_chunk": [608, 859], "super": [608, 859], "skip_nul": [609, 859], "141593": [610, 859], "292432": [611, 859], "549306": [615, 859], "listnamespac": 622, "catnamespac": 647, "12345": [649, 718, 778, 859], "56789": [649, 718, 778, 859], "901234": [649, 718, 778, 859], "pi": [656, 792, 835, 859], "1232e": [656, 859], "quick": [663, 859], "mix": [663, 859], "series_num": [663, 859], "581139": [663, 859], "series_str": [663, 859], "datetimenamespac": 668, "epoch": 670, "1583020800": 670, "1585699200": 670, "1588291200": 670, "america": 670, "new_york": 670, "nyc": 670, "est": 670, "edt": 670, "1583038800": 670, "1585717200": 670, "1588309200": 670, "500m": [680, 682, 688, 694], "500000": 680, "2m": 685, "500000000": 688, "date_minus_1y_2mon": 690, "165": [693, 698], "series_equ": [693, 698, 859], "timestamp_u": 697, "978307200000000000": 697, "978393600000000000": 697, "978480000000000000": 697, "005": [706, 859], "06293300616044681": [706, 859], "65": [706, 859], "8568409950394724": [706, 859], "4000000": [707, 859], "814697265625": [707, 859], "bitmask": [719, 859], "swiftli": [719, 859], "10734580197236529959": [720, 859], "3022416320763508302": [720, 859], "13756996518000038261": [720, 859], "datelik": [725, 859], "166667": [757, 859], "142857": [757, 859], "512": [757, 859], "peak": [758, 759, 859], "nanstd": [768, 859], "858612": [768, 859], "200": [769, 770, 772, 859], "400": [769, 770, 772, 859], "150": [770, 859], "250": [770, 859], "350": [770, 859], "450": [770, 859], "381802": [774, 859], "dev": [775, 859], "57": [778, 859], "frequent": [782, 783, 859], "mutat": [783, 859], "2246e": [792, 835, 859], "divisor": [798, 849, 859], "stringnamespac": 799, "6331e16": [835, 859], "int64arrai": [838, 859], "a_2": [839, 859], "a_3": [839, 859], "456": [840, 859], "zero_copy_onli": [842, 859], "writabl": [842, 859], "view": [842, 859], "presenc": [842, 859], "immut": [842, 859], "made": [842, 859], "ignore_nul": [850, 859], "seriesview": [850, 859], "nan_to_nul": 859, "dtype_if_empti": 859, "arraylik": 859, "position": 859, "posit": 859, "scenario": 859, "arg_tru": 859, "chunk_length": 859, "has_valid": 859, "inner_dtyp": 859, "is_boolean": 859, "is_datelik": 859, "is_float": 859, "is_numer": 859, "is_utf8": 859, "new_from_index": 859, "peak_max": 859, "peak_min": 859, "set_at_idx": 859, "readthedoc": 866}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [865, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [470, 4, 1, "", "all"], [471, 4, 1, "", "any"], [472, 4, 1, "", "apply"], [473, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [474, 4, 1, "", "argsort_by"], [475, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [476, 4, 1, "", "coalesce"], [477, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [478, 4, 1, "", "concat_list"], [479, 4, 1, "", "concat_str"], [480, 4, 1, "", "count"], [481, 4, 1, "", "cov"], [482, 4, 1, "", "cumfold"], [483, 4, 1, "", "cumreduce"], [484, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [485, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [486, 4, 1, "", "datetime"], [487, 4, 1, "", "duration"], [488, 4, 1, "", "element"], [489, 4, 1, "", "exclude"], [490, 4, 1, "", "first"], [491, 4, 1, "", "fold"], [492, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [493, 4, 1, "", "groups"], [494, 4, 1, "", "head"], [495, 4, 1, "", "list"], [496, 4, 1, "", "lit"], [497, 4, 1, "", "map"], [498, 4, 1, "", "max"], [499, 4, 1, "", "mean"], [500, 4, 1, "", "median"], [501, 4, 1, "", "min"], [502, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [503, 4, 1, "", "pearson_corr"], [504, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_excel"], [91, 4, 1, "", "read_ipc"], [92, 4, 1, "", "read_ipc_schema"], [93, 4, 1, "", "read_json"], [94, 4, 1, "", "read_ndjson"], [95, 4, 1, "", "read_parquet"], [96, 4, 1, "", "read_parquet_schema"], [97, 4, 1, "", "read_sql"], [505, 4, 1, "", "reduce"], [506, 4, 1, "", "repeat"], [98, 4, 1, "", "scan_csv"], [99, 4, 1, "", "scan_ds"], [100, 4, 1, "", "scan_ipc"], [101, 4, 1, "", "scan_ndjson"], [102, 4, 1, "", "scan_parquet"], [507, 4, 1, "", "select"], [103, 4, 1, "", "show_versions"], [508, 4, 1, "", "spearman_rank_corr"], [509, 4, 1, "", "std"], [510, 4, 1, "", "struct"], [511, 4, 1, "", "sum"], [512, 4, 1, "", "tail"], [110, 4, 1, "", "threadpool_size"], [111, 4, 1, "", "toggle_string_cache"], [513, 4, 1, "", "var"], [514, 4, 1, "", "when"], [112, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[115, 1, 1, "", "apply"], [116, 1, 1, "", "cleared"], [117, 1, 1, "", "clone"], [118, 2, 1, "", "columns"], [119, 1, 1, "", "describe"], [120, 1, 1, "", "drop"], [121, 1, 1, "", "drop_in_place"], [122, 1, 1, "", "drop_nulls"], [123, 2, 1, "", "dtypes"], [124, 1, 1, "", "estimated_size"], [125, 1, 1, "", "explode"], [126, 1, 1, "", "extend"], [127, 1, 1, "", "fill_nan"], [128, 1, 1, "", "fill_null"], [129, 1, 1, "", "filter"], [130, 1, 1, "", "find_idx_by_name"], [131, 1, 1, "", "fold"], [132, 1, 1, "", "frame_equal"], [133, 1, 1, "", "get_column"], [134, 1, 1, "", "get_columns"], [135, 1, 1, "", "groupby"], [136, 1, 1, "", "groupby_dynamic"], [137, 1, 1, "", "groupby_rolling"], [138, 1, 1, "", "hash_rows"], [139, 1, 1, "", "head"], [140, 2, 1, "", "height"], [141, 1, 1, "", "hstack"], [142, 1, 1, "", "insert_at_idx"], [143, 1, 1, "", "interpolate"], [144, 1, 1, "", "is_duplicated"], [145, 1, 1, "", "is_empty"], [146, 1, 1, "", "is_unique"], [147, 1, 1, "", "join"], [148, 1, 1, "", "join_asof"], [149, 1, 1, "", "lazy"], [150, 1, 1, "", "limit"], [151, 1, 1, "", "max"], [152, 1, 1, "", "mean"], [153, 1, 1, "", "median"], [154, 1, 1, "", "melt"], [155, 1, 1, "", "min"], [156, 1, 1, "", "n_chunks"], [157, 1, 1, "", "n_unique"], [158, 1, 1, "", "null_count"], [159, 1, 1, "", "partition_by"], [160, 1, 1, "", "pipe"], [161, 1, 1, "", "pivot"], [162, 1, 1, "", "product"], [163, 1, 1, "", "quantile"], [164, 1, 1, "", "rechunk"], [165, 1, 1, "", "rename"], [166, 1, 1, "", "replace"], [167, 1, 1, "", "replace_at_idx"], [168, 1, 1, "", "reverse"], [169, 1, 1, "", "row"], [170, 1, 1, "", "rows"], [171, 1, 1, "", "sample"], [172, 2, 1, "", "schema"], [173, 1, 1, "", "select"], [174, 2, 1, "", "shape"], [175, 1, 1, "", "shift"], [176, 1, 1, "", "shift_and_fill"], [177, 1, 1, "", "shrink_to_fit"], [178, 1, 1, "", "slice"], [179, 1, 1, "", "sort"], [180, 1, 1, "", "std"], [181, 1, 1, "", "sum"], [182, 1, 1, "", "tail"], [183, 1, 1, "", "take_every"], [184, 1, 1, "", "to_arrow"], [185, 1, 1, "", "to_dict"], [186, 1, 1, "", "to_dicts"], [187, 1, 1, "", "to_dummies"], [188, 1, 1, "", "to_numpy"], [189, 1, 1, "", "to_pandas"], [190, 1, 1, "", "to_series"], [191, 1, 1, "", "to_struct"], [192, 1, 1, "", "transpose"], [193, 1, 1, "", "unique"], [194, 1, 1, "", "unnest"], [195, 1, 1, "", "unstack"], [196, 1, 1, "", "upsample"], [197, 1, 1, "", "var"], [198, 1, 1, "", "vstack"], [199, 2, 1, "", "width"], [200, 1, 1, "", "with_column"], [201, 1, 1, "", "with_columns"], [202, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[239, 1, 1, "", "abs"], [240, 1, 1, "", "agg_groups"], [241, 1, 1, "", "alias"], [242, 1, 1, "", "all"], [243, 1, 1, "", "any"], [244, 1, 1, "", "append"], [245, 1, 1, "", "apply"], [246, 1, 1, "", "arccos"], [247, 1, 1, "", "arccosh"], [248, 1, 1, "", "arcsin"], [249, 1, 1, "", "arcsinh"], [250, 1, 1, "", "arctan"], [251, 1, 1, "", "arctanh"], [252, 1, 1, "", "arg_max"], [253, 1, 1, "", "arg_min"], [254, 1, 1, "", "arg_sort"], [255, 1, 1, "", "arg_unique"], [256, 1, 1, "", "argsort"], [280, 1, 1, "", "backward_fill"], [281, 1, 1, "", "cast"], [283, 1, 1, "", "ceil"], [284, 1, 1, "", "clip"], [285, 1, 1, "", "clip_max"], [286, 1, 1, "", "clip_min"], [287, 1, 1, "", "cos"], [288, 1, 1, "", "cosh"], [289, 1, 1, "", "count"], [290, 1, 1, "", "cumcount"], [291, 1, 1, "", "cummax"], [292, 1, 1, "", "cummin"], [293, 1, 1, "", "cumprod"], [294, 1, 1, "", "cumsum"], [295, 1, 1, "", "cumulative_eval"], [296, 1, 1, "", "diff"], [297, 1, 1, "", "dot"], [298, 1, 1, "", "drop_nans"], [299, 1, 1, "", "drop_nulls"], [332, 1, 1, "", "entropy"], [333, 1, 1, "", "ewm_mean"], [334, 1, 1, "", "ewm_std"], [335, 1, 1, "", "ewm_var"], [336, 1, 1, "", "exclude"], [337, 1, 1, "", "exp"], [338, 1, 1, "", "explode"], [339, 1, 1, "", "extend_constant"], [340, 1, 1, "", "fill_nan"], [341, 1, 1, "", "fill_null"], [342, 1, 1, "", "filter"], [343, 1, 1, "", "first"], [344, 1, 1, "", "flatten"], [345, 1, 1, "", "floor"], [346, 1, 1, "", "forward_fill"], [347, 1, 1, "", "hash"], [348, 1, 1, "", "head"], [349, 1, 1, "", "inspect"], [350, 1, 1, "", "interpolate"], [351, 1, 1, "", "is_between"], [352, 1, 1, "", "is_duplicated"], [353, 1, 1, "", "is_finite"], [354, 1, 1, "", "is_first"], [355, 1, 1, "", "is_in"], [356, 1, 1, "", "is_infinite"], [357, 1, 1, "", "is_nan"], [358, 1, 1, "", "is_not"], [359, 1, 1, "", "is_not_nan"], [360, 1, 1, "", "is_not_null"], [361, 1, 1, "", "is_null"], [362, 1, 1, "", "is_unique"], [363, 1, 1, "", "keep_name"], [364, 1, 1, "", "kurtosis"], [365, 1, 1, "", "last"], [366, 1, 1, "", "len"], [367, 1, 1, "", "limit"], [368, 1, 1, "", "list"], [369, 1, 1, "", "log"], [370, 1, 1, "", "log10"], [371, 1, 1, "", "lower_bound"], [372, 1, 1, "", "map"], [373, 1, 1, "", "map_alias"], [374, 1, 1, "", "max"], [375, 1, 1, "", "mean"], [376, 1, 1, "", "median"], [381, 1, 1, "", "min"], [382, 1, 1, "", "mode"], [383, 1, 1, "", "n_unique"], [384, 1, 1, "", "nan_max"], [385, 1, 1, "", "nan_min"], [386, 1, 1, "", "null_count"], [387, 1, 1, "", "over"], [388, 1, 1, "", "pct_change"], [389, 1, 1, "", "pow"], [390, 1, 1, "", "prefix"], [391, 1, 1, "", "product"], [392, 1, 1, "", "quantile"], [393, 1, 1, "", "rank"], [394, 1, 1, "", "rechunk"], [395, 1, 1, "", "reinterpret"], [396, 1, 1, "", "repeat_by"], [397, 1, 1, "", "reshape"], [398, 1, 1, "", "reverse"], [399, 1, 1, "", "rolling_apply"], [400, 1, 1, "", "rolling_max"], [401, 1, 1, "", "rolling_mean"], [402, 1, 1, "", "rolling_median"], [403, 1, 1, "", "rolling_min"], [404, 1, 1, "", "rolling_quantile"], [405, 1, 1, "", "rolling_skew"], [406, 1, 1, "", "rolling_std"], [407, 1, 1, "", "rolling_sum"], [408, 1, 1, "", "rolling_var"], [409, 1, 1, "", "round"], [410, 1, 1, "", "sample"], [411, 1, 1, "", "search_sorted"], [412, 1, 1, "", "set_sorted"], [413, 1, 1, "", "shift"], [414, 1, 1, "", "shift_and_fill"], [415, 1, 1, "", "shrink_dtype"], [416, 1, 1, "", "shuffle"], [417, 1, 1, "", "sign"], [418, 1, 1, "", "sin"], [419, 1, 1, "", "sinh"], [420, 1, 1, "", "skew"], [421, 1, 1, "", "slice"], [422, 1, 1, "", "sort"], [423, 1, 1, "", "sort_by"], [424, 1, 1, "", "sqrt"], [425, 1, 1, "", "std"], [455, 1, 1, "", "suffix"], [456, 1, 1, "", "sum"], [457, 1, 1, "", "tail"], [458, 1, 1, "", "take"], [459, 1, 1, "", "take_every"], [460, 1, 1, "", "tan"], [461, 1, 1, "", "tanh"], [462, 1, 1, "", "to_physical"], [463, 1, 1, "", "top_k"], [464, 1, 1, "", "unique"], [465, 1, 1, "", "unique_counts"], [466, 1, 1, "", "upper_bound"], [467, 1, 1, "", "value_counts"], [468, 1, 1, "", "var"], [469, 1, 1, "", "where"]], "polars.Expr.arr": [[257, 1, 1, "", "arg_max"], [258, 1, 1, "", "arg_min"], [259, 1, 1, "", "concat"], [260, 1, 1, "", "contains"], [261, 1, 1, "", "diff"], [262, 1, 1, "", "eval"], [263, 1, 1, "", "first"], [264, 1, 1, "", "get"], [265, 1, 1, "", "head"], [266, 1, 1, "", "join"], [267, 1, 1, "", "last"], [268, 1, 1, "", "lengths"], [269, 1, 1, "", "max"], [270, 1, 1, "", "mean"], [271, 1, 1, "", "min"], [272, 1, 1, "", "reverse"], [273, 1, 1, "", "shift"], [274, 1, 1, "", "slice"], [275, 1, 1, "", "sort"], [276, 1, 1, "", "sum"], [277, 1, 1, "", "tail"], [278, 1, 1, "", "to_struct"], [279, 1, 1, "", "unique"]], "polars.Expr.cat": [[282, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[300, 1, 1, "", "cast_time_unit"], [301, 1, 1, "", "cast_time_zone"], [302, 1, 1, "", "day"], [303, 1, 1, "", "days"], [304, 1, 1, "", "epoch"], [305, 1, 1, "", "hour"], [306, 1, 1, "", "hours"], [307, 1, 1, "", "iso_year"], [308, 1, 1, "", "microsecond"], [309, 1, 1, "", "microseconds"], [310, 1, 1, "", "millisecond"], [311, 1, 1, "", "milliseconds"], [312, 1, 1, "", "minute"], [313, 1, 1, "", "minutes"], [314, 1, 1, "", "month"], [315, 1, 1, "", "nanosecond"], [316, 1, 1, "", "nanoseconds"], [317, 1, 1, "", "offset_by"], [318, 1, 1, "", "ordinal_day"], [319, 1, 1, "", "quarter"], [320, 1, 1, "", "round"], [321, 1, 1, "", "second"], [322, 1, 1, "", "seconds"], [323, 1, 1, "", "strftime"], [324, 1, 1, "", "timestamp"], [325, 1, 1, "", "truncate"], [326, 1, 1, "", "tz_localize"], [327, 1, 1, "", "week"], [328, 1, 1, "", "weekday"], [329, 1, 1, "", "with_time_unit"], [330, 1, 1, "", "with_time_zone"], [331, 1, 1, "", "year"]], "polars.Expr.meta": [[377, 1, 1, "", "output_name"], [378, 1, 1, "", "pop"], [379, 1, 1, "", "root_names"], [380, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[426, 1, 1, "", "concat"], [427, 1, 1, "", "contains"], [428, 1, 1, "", "count_match"], [429, 1, 1, "", "decode"], [430, 1, 1, "", "encode"], [431, 1, 1, "", "ends_with"], [432, 1, 1, "", "extract"], [433, 1, 1, "", "extract_all"], [434, 1, 1, "", "json_path_match"], [435, 1, 1, "", "lengths"], [436, 1, 1, "", "ljust"], [437, 1, 1, "", "lstrip"], [438, 1, 1, "", "n_chars"], [439, 1, 1, "", "replace"], [440, 1, 1, "", "replace_all"], [441, 1, 1, "", "rjust"], [442, 1, 1, "", "rstrip"], [443, 1, 1, "", "slice"], [444, 1, 1, "", "split"], [445, 1, 1, "", "split_exact"], [446, 1, 1, "", "splitn"], [447, 1, 1, "", "starts_with"], [448, 1, 1, "", "strip"], [449, 1, 1, "", "strptime"], [450, 1, 1, "", "to_lowercase"], [451, 1, 1, "", "to_uppercase"], [452, 1, 1, "", "zfill"]], "polars.Expr.struct": [[453, 1, 1, "", "field"], [454, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[533, 1, 1, "", "cache"], [534, 1, 1, "", "cleared"], [535, 1, 1, "", "clone"], [536, 1, 1, "", "collect"], [537, 2, 1, "", "columns"], [538, 1, 1, "", "describe_optimized_plan"], [539, 1, 1, "", "describe_plan"], [540, 1, 1, "", "drop"], [541, 1, 1, "", "drop_nulls"], [542, 2, 1, "", "dtypes"], [543, 1, 1, "", "explode"], [544, 1, 1, "", "fetch"], [545, 1, 1, "", "fill_nan"], [546, 1, 1, "", "fill_null"], [547, 1, 1, "", "filter"], [548, 1, 1, "", "first"], [549, 1, 1, "", "from_json"], [550, 1, 1, "", "groupby"], [551, 1, 1, "", "groupby_dynamic"], [552, 1, 1, "", "groupby_rolling"], [553, 1, 1, "", "head"], [554, 1, 1, "", "inspect"], [555, 1, 1, "", "interpolate"], [556, 1, 1, "", "join"], [557, 1, 1, "", "join_asof"], [558, 1, 1, "", "last"], [559, 1, 1, "", "lazy"], [560, 1, 1, "", "limit"], [561, 1, 1, "", "map"], [562, 1, 1, "", "max"], [563, 1, 1, "", "mean"], [564, 1, 1, "", "median"], [565, 1, 1, "", "melt"], [566, 1, 1, "", "min"], [567, 1, 1, "", "pipe"], [568, 1, 1, "", "profile"], [569, 1, 1, "", "quantile"], [570, 1, 1, "", "read_json"], [571, 1, 1, "", "rename"], [572, 1, 1, "", "reverse"], [573, 2, 1, "", "schema"], [574, 1, 1, "", "select"], [575, 1, 1, "", "shift"], [576, 1, 1, "", "shift_and_fill"], [577, 1, 1, "", "show_graph"], [578, 1, 1, "", "slice"], [579, 1, 1, "", "sort"], [580, 1, 1, "", "std"], [581, 1, 1, "", "sum"], [582, 1, 1, "", "tail"], [583, 1, 1, "", "take_every"], [584, 1, 1, "", "unique"], [585, 1, 1, "", "unnest"], [586, 1, 1, "", "var"], [587, 2, 1, "", "width"], [588, 1, 1, "", "with_column"], [589, 1, 1, "", "with_columns"], [590, 1, 1, "", "with_context"], [591, 1, 1, "", "with_row_count"], [592, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[604, 1, 1, "", "abs"], [605, 1, 1, "", "alias"], [606, 1, 1, "", "all"], [607, 1, 1, "", "any"], [608, 1, 1, "", "append"], [609, 1, 1, "", "apply"], [610, 1, 1, "", "arccos"], [611, 1, 1, "", "arccosh"], [612, 1, 1, "", "arcsin"], [613, 1, 1, "", "arcsinh"], [614, 1, 1, "", "arctan"], [615, 1, 1, "", "arctanh"], [616, 1, 1, "", "arg_max"], [617, 1, 1, "", "arg_min"], [618, 1, 1, "", "arg_sort"], [619, 1, 1, "", "arg_true"], [620, 1, 1, "", "arg_unique"], [621, 1, 1, "", "argsort"], [622, 3, 1, "", "arr"], [646, 1, 1, "", "cast"], [647, 3, 1, "", "cat"], [649, 1, 1, "", "ceil"], [650, 1, 1, "", "chunk_lengths"], [651, 1, 1, "", "cleared"], [652, 1, 1, "", "clip"], [653, 1, 1, "", "clip_max"], [654, 1, 1, "", "clip_min"], [655, 1, 1, "", "clone"], [656, 1, 1, "", "cos"], [657, 1, 1, "", "cosh"], [658, 1, 1, "", "cummax"], [659, 1, 1, "", "cummin"], [660, 1, 1, "", "cumprod"], [661, 1, 1, "", "cumsum"], [662, 1, 1, "", "cumulative_eval"], [663, 1, 1, "", "describe"], [664, 1, 1, "", "diff"], [665, 1, 1, "", "dot"], [666, 1, 1, "", "drop_nans"], [667, 1, 1, "", "drop_nulls"], [668, 3, 1, "", "dt"], [705, 2, 1, "", "dtype"], [706, 1, 1, "", "entropy"], [707, 1, 1, "", "estimated_size"], [708, 1, 1, "", "ewm_mean"], [709, 1, 1, "", "ewm_std"], [710, 1, 1, "", "ewm_var"], [711, 1, 1, "", "exp"], [712, 1, 1, "", "explode"], [713, 1, 1, "", "extend_constant"], [714, 1, 1, "", "fill_nan"], [715, 1, 1, "", "fill_null"], [716, 1, 1, "", "filter"], [717, 2, 1, "", "flags"], [718, 1, 1, "", "floor"], [719, 1, 1, "", "has_validity"], [720, 1, 1, "", "hash"], [721, 1, 1, "", "head"], [722, 2, 1, "", "inner_dtype"], [723, 1, 1, "", "interpolate"], [724, 1, 1, "", "is_boolean"], [725, 1, 1, "", "is_datelike"], [726, 1, 1, "", "is_duplicated"], [727, 1, 1, "", "is_empty"], [728, 1, 1, "", "is_finite"], [729, 1, 1, "", "is_first"], [730, 1, 1, "", "is_float"], [731, 1, 1, "", "is_in"], [732, 1, 1, "", "is_infinite"], [733, 1, 1, "", "is_nan"], [734, 1, 1, "", "is_not_nan"], [735, 1, 1, "", "is_not_null"], [736, 1, 1, "", "is_null"], [737, 1, 1, "", "is_numeric"], [738, 1, 1, "", "is_unique"], [739, 1, 1, "", "is_utf8"], [740, 1, 1, "", "kurtosis"], [741, 1, 1, "", "len"], [742, 1, 1, "", "limit"], [743, 1, 1, "", "log"], [744, 1, 1, "", "log10"], [745, 1, 1, "", "max"], [746, 1, 1, "", "mean"], [747, 1, 1, "", "median"], [748, 1, 1, "", "min"], [749, 1, 1, "", "mode"], [750, 1, 1, "", "n_chunks"], [751, 1, 1, "", "n_unique"], [752, 2, 1, "", "name"], [753, 1, 1, "", "nan_max"], [754, 1, 1, "", "nan_min"], [755, 1, 1, "", "new_from_index"], [756, 1, 1, "", "null_count"], [757, 1, 1, "", "pct_change"], [758, 1, 1, "", "peak_max"], [759, 1, 1, "", "peak_min"], [760, 1, 1, "", "product"], [761, 1, 1, "", "quantile"], [762, 1, 1, "", "rank"], [763, 1, 1, "", "rechunk"], [764, 1, 1, "", "reinterpret"], [765, 1, 1, "", "rename"], [766, 1, 1, "", "reshape"], [767, 1, 1, "", "reverse"], [768, 1, 1, "", "rolling_apply"], [769, 1, 1, "", "rolling_max"], [770, 1, 1, "", "rolling_mean"], [771, 1, 1, "", "rolling_median"], [772, 1, 1, "", "rolling_min"], [773, 1, 1, "", "rolling_quantile"], [774, 1, 1, "", "rolling_skew"], [775, 1, 1, "", "rolling_std"], [776, 1, 1, "", "rolling_sum"], [777, 1, 1, "", "rolling_var"], [778, 1, 1, "", "round"], [779, 1, 1, "", "sample"], [780, 1, 1, "", "search_sorted"], [781, 1, 1, "", "series_equal"], [782, 1, 1, "", "set"], [783, 1, 1, "", "set_at_idx"], [784, 1, 1, "", "set_sorted"], [785, 2, 1, "", "shape"], [786, 1, 1, "", "shift"], [787, 1, 1, "", "shift_and_fill"], [788, 1, 1, "", "shrink_dtype"], [789, 1, 1, "", "shrink_to_fit"], [790, 1, 1, "", "shuffle"], [791, 1, 1, "", "sign"], [792, 1, 1, "", "sin"], [793, 1, 1, "", "sinh"], [794, 1, 1, "", "skew"], [795, 1, 1, "", "slice"], [796, 1, 1, "", "sort"], [797, 1, 1, "", "sqrt"], [798, 1, 1, "", "std"], [799, 3, 1, "", "str"], [831, 1, 1, "", "sum"], [832, 1, 1, "", "tail"], [833, 1, 1, "", "take"], [834, 1, 1, "", "take_every"], [835, 1, 1, "", "tan"], [836, 1, 1, "", "tanh"], [837, 2, 1, "", "time_unit"], [838, 1, 1, "", "to_arrow"], [839, 1, 1, "", "to_dummies"], [840, 1, 1, "", "to_frame"], [841, 1, 1, "", "to_list"], [842, 1, 1, "", "to_numpy"], [843, 1, 1, "", "to_pandas"], [844, 1, 1, "", "to_physical"], [845, 1, 1, "", "top_k"], [846, 1, 1, "", "unique"], [847, 1, 1, "", "unique_counts"], [848, 1, 1, "", "value_counts"], [849, 1, 1, "", "var"], [850, 1, 1, "", "view"], [851, 1, 1, "", "zip_with"]], "polars.Series.arr": [[623, 1, 1, "", "arg_max"], [624, 1, 1, "", "arg_min"], [625, 1, 1, "", "concat"], [626, 1, 1, "", "contains"], [627, 1, 1, "", "diff"], [628, 1, 1, "", "eval"], [629, 1, 1, "", "first"], [630, 1, 1, "", "get"], [631, 1, 1, "", "head"], [632, 1, 1, "", "join"], [633, 1, 1, "", "last"], [634, 1, 1, "", "lengths"], [635, 1, 1, "", "max"], [636, 1, 1, "", "mean"], [637, 1, 1, "", "min"], [638, 1, 1, "", "reverse"], [639, 1, 1, "", "shift"], [640, 1, 1, "", "slice"], [641, 1, 1, "", "sort"], [642, 1, 1, "", "sum"], [643, 1, 1, "", "tail"], [644, 1, 1, "", "to_struct"], [645, 1, 1, "", "unique"]], "polars.Series.cat": [[648, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[669, 1, 1, "", "cast_time_unit"], [670, 1, 1, "", "cast_time_zone"], [671, 1, 1, "", "day"], [672, 1, 1, "", "days"], [673, 1, 1, "", "epoch"], [674, 1, 1, "", "hour"], [675, 1, 1, "", "hours"], [676, 1, 1, "", "iso_year"], [677, 1, 1, "", "max"], [678, 1, 1, "", "mean"], [679, 1, 1, "", "median"], [680, 1, 1, "", "microsecond"], [681, 1, 1, "", "microseconds"], [682, 1, 1, "", "millisecond"], [683, 1, 1, "", "milliseconds"], [684, 1, 1, "", "min"], [685, 1, 1, "", "minute"], [686, 1, 1, "", "minutes"], [687, 1, 1, "", "month"], [688, 1, 1, "", "nanosecond"], [689, 1, 1, "", "nanoseconds"], [690, 1, 1, "", "offset_by"], [691, 1, 1, "", "ordinal_day"], [692, 1, 1, "", "quarter"], [693, 1, 1, "", "round"], [694, 1, 1, "", "second"], [695, 1, 1, "", "seconds"], [696, 1, 1, "", "strftime"], [697, 1, 1, "", "timestamp"], [698, 1, 1, "", "truncate"], [699, 1, 1, "", "tz_localize"], [700, 1, 1, "", "week"], [701, 1, 1, "", "weekday"], [702, 1, 1, "", "with_time_unit"], [703, 1, 1, "", "with_time_zone"], [704, 1, 1, "", "year"]], "polars.Series.str": [[800, 1, 1, "", "concat"], [801, 1, 1, "", "contains"], [802, 1, 1, "", "count_match"], [803, 1, 1, "", "decode"], [804, 1, 1, "", "encode"], [805, 1, 1, "", "ends_with"], [806, 1, 1, "", "extract"], [807, 1, 1, "", "extract_all"], [808, 1, 1, "", "json_path_match"], [809, 1, 1, "", "lengths"], [810, 1, 1, "", "ljust"], [811, 1, 1, "", "lstrip"], [812, 1, 1, "", "n_chars"], [813, 1, 1, "", "replace"], [814, 1, 1, "", "replace_all"], [815, 1, 1, "", "rjust"], [816, 1, 1, "", "rstrip"], [817, 1, 1, "", "slice"], [818, 1, 1, "", "split"], [819, 1, 1, "", "split_exact"], [820, 1, 1, "", "splitn"], [821, 1, 1, "", "starts_with"], [822, 1, 1, "", "strip"], [823, 1, 1, "", "strptime"], [824, 1, 1, "", "to_lowercase"], [825, 1, 1, "", "to_uppercase"], [826, 1, 1, "", "zfill"]], "polars.Series.struct": [[827, 1, 1, "", "field"], [828, 3, 1, "", "fields"], [829, 1, 1, "", "rename_fields"], [830, 1, 1, "", "to_frame"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[203, 1, 1, "", "agg"], [204, 1, 1, "", "agg_list"], [205, 1, 1, "", "apply"], [206, 1, 1, "", "count"], [207, 1, 1, "", "first"], [208, 1, 1, "", "head"], [209, 1, 1, "", "last"], [210, 1, 1, "", "max"], [211, 1, 1, "", "mean"], [212, 1, 1, "", "median"], [213, 1, 1, "", "min"], [214, 1, 1, "", "n_unique"], [215, 1, 1, "", "pivot"], [216, 1, 1, "", "quantile"], [217, 1, 1, "", "sum"], [218, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[219, 1, 1, "", "count"], [220, 1, 1, "", "first"], [221, 1, 1, "", "last"], [222, 1, 1, "", "max"], [223, 1, 1, "", "mean"], [224, 1, 1, "", "median"], [225, 1, 1, "", "min"], [226, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[593, 1, 1, "", "agg"], [594, 1, 1, "", "apply"], [595, 1, 1, "", "head"], [596, 1, 1, "", "tail"]], "polars.testing": [[104, 4, 1, "", "assert_frame_equal"], [105, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[106, 0, 1, "", "column"], [107, 4, 1, "", "columns"], [108, 4, 1, "", "dataframes"], [109, 4, 1, "", "series"]], "polars.testing.parametric.column": [[106, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 126], "api": [1, 55, 56, 57, 58, 530], "provid": 1, "new": 1, "function": [1, 236, 520, 529], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851], "binari": 2, "boolean": [3, 516, 854], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 113], "load": [5, 113], "restore_default": 6, "save": [7, 113], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 113], "datafram": [23, 24, 25, 26, 27, 28, 108, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 592], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 236, 485], "datetim": [31, 486], "durat": [32, 487], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 368, 495], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 529], "struct": [46, 453, 454, 510, 526, 827, 828, 829, 830, 863], "time": [47, 236], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 259, 426, 625, 800], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 237], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 593, 594, 595, 596], "batch": 85, "batchedcsvread": [85, 531], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_excel": 90, "read_ipc": 91, "read_ipc_schema": 92, "read_json": [93, 570], "read_ndjson": 94, "read_parquet": 95, "read_parquet_schema": 96, "read_sql": 97, "scan_csv": 98, "scan_d": 99, "scan_ipc": 100, "scan_ndjson": 101, "scan_parquet": 102, "show_vers": 103, "test": [104, 105, 106, 107, 108, 109, 866], "assert_frame_equ": 104, "assert_series_equ": 105, "parametr": [106, 107, 108, 109], "column": [106, 107, 118, 518, 537], "seri": [109, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859], "threadpool_s": 110, "toggle_string_cach": 111, "zero": 112, "option": 113, "set": [113, 782], "unset": 113, "current": 113, "aggreg": [114, 238, 532, 603], "appli": [115, 205, 245, 472, 594, 609], "clear": [116, 534, 651], "clone": [117, 535, 655], "describ": [119, 663], "drop": [120, 540], "drop_in_plac": 121, "drop_nul": [122, 299, 541, 667], "dtype": [123, 542, 705], "estimated_s": [124, 707], "explod": [125, 338, 543, 712], "fill_nan": [127, 340, 545, 714], "fill_nul": [128, 341, 546, 715], "filter": [129, 342, 547, 716], "find_idx_by_nam": 130, "fold": [131, 491], "frame_equ": 132, "get_column": [133, 134], "groupbi": [135, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 231, 550, 593, 594, 595, 596, 599], "groupby_dynam": [136, 551], "groupby_rol": [137, 552], "hash_row": 138, "head": [139, 208, 265, 348, 494, 553, 595, 631, 721], "height": 140, "hstack": 141, "insert_at_idx": 142, "interpol": [143, 350, 555, 723], "is_dupl": [144, 352, 726], "is_empti": [145, 727], "is_uniqu": [146, 362, 738], "join": [147, 266, 556, 632], "join_asof": [148, 557], "lazi": [149, 529, 559], "limit": [150, 367, 560, 742], "max": [151, 210, 222, 269, 374, 498, 562, 635, 677, 745], "mean": [152, 211, 223, 270, 375, 499, 563, 636, 678, 746], "median": [153, 212, 224, 376, 500, 564, 679, 747], "melt": [154, 565], "min": [155, 213, 225, 271, 381, 501, 566, 637, 684, 748], "n_chunk": [156, 750], "n_uniqu": [157, 214, 383, 502, 751], "null_count": [158, 386, 756], "partition_bi": 159, "pipe": [160, 567], "pivot": [161, 215, 219, 220, 221, 222, 223, 224, 225, 226, 235], "product": [162, 391, 760], "quantil": [163, 216, 392, 504, 569, 761], "rechunk": [164, 394, 763], "renam": [165, 571, 765], "replac": [166, 439, 813], "replace_at_idx": 167, "revers": [168, 272, 398, 572, 638, 767], "row": [169, 170], "sampl": [171, 410, 779], "schema": [172, 573], "select": [173, 234, 507, 524, 574, 602, 861], "shape": [174, 785], "shift": [175, 273, 413, 575, 639, 786], "shift_and_fil": [176, 414, 576, 787], "shrink_to_fit": [177, 789], "slice": [178, 274, 421, 443, 578, 640, 795, 817], "sort": [179, 275, 422, 579, 641, 796], "std": [180, 425, 509, 580, 798], "sum": [181, 217, 226, 276, 456, 511, 581, 642, 831], "tail": [182, 218, 277, 457, 512, 582, 596, 643, 832], "take_everi": [183, 459, 583, 834], "to_arrow": [184, 838], "to_dict": [185, 186], "to_dummi": [187, 839], "to_numpi": [188, 842], "to_panda": [189, 843], "to_seri": 190, "to_struct": [191, 278, 644], "transpos": 192, "uniqu": [193, 279, 464, 584, 645, 846], "unnest": [194, 585], "unstack": 195, "upsampl": 196, "var": [197, 468, 513, 586, 849], "vstack": 198, "width": [199, 587], "with_column": [200, 201, 588, 589], "with_row_count": [202, 591], "agg": [203, 593], "agg_list": 204, "count": [206, 219, 289, 480], "first": [207, 220, 263, 343, 490, 548, 629], "last": [209, 221, 267, 365, 558, 633], "pivotop": [219, 220, 221, 222, 223, 224, 225, 226], "attribut": [227, 597, 853], "comput": [228, 519, 856], "descript": [229, 598, 857], "export": [230, 858], "miscellan": [233, 523, 529, 601, 860], "manipul": [234, 524, 602, 861], "data": 236, "type": 236, "numer": 236, "nest": 236, "other": 236, "expr": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "ab": [239, 604], "agg_group": 240, "alia": [241, 605], "all": [242, 470, 606], "ani": [243, 471, 607], "append": [244, 608], "arcco": [246, 610], "arccosh": [247, 611], "arcsin": [248, 612], "arcsinh": [249, 613], "arctan": [250, 614], "arctanh": [251, 615], "arg_max": [252, 257, 616, 623], "arg_min": [253, 258, 617, 624], "arg_sort": [254, 618], "arg_uniqu": [255, 620], "argsort": [256, 621], "arr": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "contain": [260, 427, 626, 801], "diff": [261, 296, 627, 664], "eval": [262, 628], "get": [264, 630], "length": [268, 435, 634, 809], "backward_fil": 280, "cast": [281, 646], "cat": [282, 647, 648], "set_ord": [282, 648], "ceil": [283, 649], "clip": [284, 652], "clip_max": [285, 653], "clip_min": [286, 654], "co": [287, 656], "cosh": [288, 657], "cumcount": 290, "cummax": [291, 658], "cummin": [292, 659], "cumprod": [293, 660], "cumsum": [294, 484, 661], "cumulative_ev": [295, 662], "dot": [297, 665], "drop_nan": [298, 666], "dt": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704], "cast_time_unit": [300, 669], "cast_time_zon": [301, 670], "dai": [302, 303, 671, 672], "epoch": [304, 673], "hour": [305, 306, 674, 675], "iso_year": [307, 676], "microsecond": [308, 309, 680, 681], "millisecond": [310, 311, 682, 683], "minut": [312, 313, 685, 686], "month": [314, 687], "nanosecond": [315, 316, 688, 689], "offset_bi": [317, 690], "ordinal_dai": [318, 691], "quarter": [319, 692], "round": [320, 409, 693, 778], "second": [321, 322, 694, 695], "strftime": [323, 696], "timestamp": [324, 697], "truncat": [325, 698], "tz_local": [326, 699], "week": [327, 700], "weekdai": [328, 701], "with_time_unit": [329, 702], "with_time_zon": [330, 703], "year": [331, 704], "entropi": [332, 706], "ewm_mean": [333, 708], "ewm_std": [334, 709], "ewm_var": [335, 710], "exclud": [336, 489], "exp": [337, 711], "extend_const": [339, 713], "flatten": 344, "floor": [345, 718], "forward_fil": 346, "hash": [347, 720], "inspect": [349, 554], "is_between": 351, "is_finit": [353, 728], "is_first": [354, 729], "is_in": [355, 731], "is_infinit": [356, 732], "is_nan": [357, 733], "is_not": 358, "is_not_nan": [359, 734], "is_not_nul": [360, 735], "is_nul": [361, 736], "keep_nam": 363, "kurtosi": [364, 740], "len": [366, 741], "log": [369, 743], "log10": [370, 744], "lower_bound": 371, "map": [372, 497, 561], "map_alia": 373, "meta": [377, 378, 379, 380, 522], "output_nam": 377, "pop": 378, "root_nam": 379, "undo_alias": 380, "mode": [382, 749], "nan_max": [384, 753], "nan_min": [385, 754], "over": 387, "pct_chang": [388, 757], "pow": 389, "prefix": 390, "rank": [393, 762], "reinterpret": [395, 764], "repeat_bi": 396, "reshap": [397, 766], "rolling_appli": [399, 768], "rolling_max": [400, 769], "rolling_mean": [401, 770], "rolling_median": [402, 771], "rolling_min": [403, 772], "rolling_quantil": [404, 773], "rolling_skew": [405, 774], "rolling_std": [406, 775], "rolling_sum": [407, 776], "rolling_var": [408, 777], "search_sort": [411, 780], "set_sort": [412, 784], "shrink_dtyp": [415, 788], "shuffl": [416, 790], "sign": [417, 791], "sin": [418, 792], "sinh": [419, 793], "skew": [420, 794], "sort_bi": 423, "sqrt": [424, 797], "str": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826], "count_match": [428, 802], "decod": [429, 803], "encod": [430, 804], "ends_with": [431, 805], "extract": [432, 806], "extract_al": [433, 807], "json_path_match": [434, 808], "ljust": [436, 810], "lstrip": [437, 811], "n_char": [438, 812], "replace_al": [440, 814], "rjust": [441, 815], "rstrip": [442, 816], "split": [444, 818], "split_exact": [445, 819], "splitn": [446, 820], "starts_with": [447, 821], "strip": [448, 822], "strptime": [449, 823], "to_lowercas": [450, 824], "to_uppercas": [451, 825], "zfill": [452, 826], "field": [453, 827, 828], "rename_field": [454, 829], "suffix": 455, "take": [458, 833], "tan": [460, 835], "tanh": [461, 836], "to_phys": [462, 844], "top_k": [463, 845], "unique_count": [465, 847], "upper_bound": 466, "value_count": [467, 848], "where": 469, "arang": 473, "argsort_bi": 474, "avg": 475, "coalesc": 476, "col": 477, "concat_list": 478, "concat_str": 479, "cov": 481, "cumfold": 482, "cumreduc": 483, "element": 488, "format": 492, "group": 493, "lit": 496, "pearson_corr": 503, "reduc": 505, "repeat": 506, "spearman_rank_corr": 508, "when": 514, "arrai": [515, 852], "categori": [517, 855], "name": [518, 752], "express": 521, "string": [525, 862], "tempor": [527, 864], "window": 528, "convers": 529, "eager": 529, "parallel": 529, "refer": 530, "input": 531, "output": 531, "csv": 531, "feather": 531, "ipc": 531, "parquet": 531, "sql": [531, 865], "json": 531, "avro": 531, "excel": 531, "dataset": 531, "lazyfram": [533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600], "cach": 533, "collect": 536, "describe_optimized_plan": 538, "describe_plan": 539, "fetch": 544, "from_json": 549, "profil": 568, "show_graph": 577, "with_context": 590, "lazygroupbi": [593, 594, 595, 596], "read": 601, "write": 601, "logic": 601, "plan": 601, "arg_tru": 619, "chunk_length": 650, "flag": 717, "has_valid": 719, "inner_dtyp": 722, "is_boolean": 724, "is_datelik": 725, "is_float": 730, "is_numer": 737, "is_utf8": 739, "new_from_index": 755, "peak_max": 758, "peak_min": 759, "series_equ": 781, "set_at_idx": 783, "to_fram": [830, 840], "time_unit": 837, "to_list": 841, "view": 850, "zip_with": 851, "method": 865, "assert": 866, "properti": 866, "base": 866, "strategi": 866, "helper": 866, "util": 867}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.testing.parametric.columns": [[107, "polars-testing-parametric-columns"]], "polars.DataFrame.columns": [[118, "polars-dataframe-columns"]], "polars.DataFrame.describe": [[119, "polars-dataframe-describe"]], "polars.testing.assert_series_equal": [[105, "polars-testing-assert-series-equal"]], "polars.scan_ndjson": [[101, "polars-scan-ndjson"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.DataFrame.extend": [[126, "polars-dataframe-extend"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.read_ipc": [[91, "polars-read-ipc"]], "polars.zeros": [[112, "polars-zeros"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "polars.read_excel": [[90, "polars-read-excel"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "polars.read_parquet_schema": [[96, "polars-read-parquet-schema"]], "polars.toggle_string_cache": [[111, "polars-toggle-string-cache"]], "polars.DataFrame.explode": [[125, "polars-dataframe-explode"]], "polars.DataFrame.dtypes": [[123, "polars-dataframe-dtypes"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.ones": [[86, "polars-ones"]], "polars.DataFrame.fill_nan": [[127, "polars-dataframe-fill-nan"]], "polars.DataFrame.clone": [[117, "polars-dataframe-clone"]], "polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.from_records": [[82, "polars-from-records"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.DataFrame.cleared": [[116, "polars-dataframe-cleared"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.read_parquet": [[95, "polars-read-parquet"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.scan_ds": [[99, "polars-scan-ds"]], "Config": [[113, "config"]], "Config options (set/unset)": [[113, "config-options-set-unset"]], "Config load, save, and current state": [[113, "config-load-save-and-current-state"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.DataFrame.drop": [[120, "polars-dataframe-drop"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.read_ndjson": [[94, "polars-read-ndjson"]], "polars.threadpool_size": [[110, "polars-threadpool-size"]], "polars.DataFrame.filter": [[129, "polars-dataframe-filter"]], "polars.read_json": [[93, "polars-read-json"]], "polars.read_sql": [[97, "polars-read-sql"]], "polars.scan_ipc": [[100, "polars-scan-ipc"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.testing.parametric.series": [[109, "polars-testing-parametric-series"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.drop_in_place": [[121, "polars-dataframe-drop-in-place"]], "polars.scan_csv": [[98, "polars-scan-csv"]], "polars.show_versions": [[103, "polars-show-versions"]], "polars.testing.parametric.column": [[106, "polars-testing-parametric-column"]], "polars.testing.assert_frame_equal": [[104, "polars-testing-assert-frame-equal"]], "polars.DataFrame.drop_nulls": [[122, "polars-dataframe-drop-nulls"]], "Aggregation": [[114, "aggregation"], [603, "aggregation"], [532, "aggregation"], [238, "aggregation"]], "polars.DataFrame.estimated_size": [[124, "polars-dataframe-estimated-size"]], "polars.scan_parquet": [[102, "polars-scan-parquet"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.DataFrame.apply": [[115, "polars-dataframe-apply"]], "polars.DataFrame.fill_null": [[128, "polars-dataframe-fill-null"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.read_ipc_schema": [[92, "polars-read-ipc-schema"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "polars.testing.parametric.dataframes": [[108, "polars-testing-parametric-dataframes"]], "polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.Struct": [[46, "polars-struct"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Float32": [[33, "polars-float32"]], "polars.List": [[39, "polars-list"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.date_range": [[64, "polars-date-range"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.Time": [[47, "polars-time"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.build_info": [[60, "polars-build-info"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Date": [[30, "polars-date"]], "polars.Int32": [[36, "polars-int32"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.Int64": [[37, "polars-int64"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Null": [[40, "polars-null"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.Object": [[41, "polars-object"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.Int16": [[35, "polars-int16"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.Duration": [[32, "polars-duration"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.Float64": [[34, "polars-float64"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.Int8": [[38, "polars-int8"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.concat": [[62, "polars-concat"]], "polars.cut": [[63, "polars-cut"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.DataType": [[29, "polars-datatype"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.Series.sign": [[791, "polars-series-sign"]], "polars.Series.tan": [[835, "polars-series-tan"]], "polars.Series.time_unit": [[837, "polars-series-time-unit"]], "polars.Series.str.split": [[818, "polars-series-str-split"]], "polars.Series.to_physical": [[844, "polars-series-to-physical"]], "polars.Series.str.count_match": [[802, "polars-series-str-count-match"]], "polars.Series.str.n_chars": [[812, "polars-series-str-n-chars"]], "polars.Series.take": [[833, "polars-series-take"]], "polars.Series.str.to_uppercase": [[825, "polars-series-str-to-uppercase"]], "polars.Series.str.extract_all": [[807, "polars-series-str-extract-all"]], "polars.Series.tail": [[832, "polars-series-tail"]], "polars.Series.shuffle": [[790, "polars-series-shuffle"]], "polars.Series.struct.fields": [[828, "polars-series-struct-fields"]], "polars.Series.str.rjust": [[815, "polars-series-str-rjust"]], "polars.Series.str.extract": [[806, "polars-series-str-extract"]], "polars.Series.to_frame": [[840, "polars-series-to-frame"]], "polars.Series.str.slice": [[817, "polars-series-str-slice"]], "polars.Series.slice": [[795, "polars-series-slice"]], "polars.Series.str.split_exact": [[819, "polars-series-str-split-exact"]], "polars.Series.tanh": [[836, "polars-series-tanh"]], "polars.Series.to_list": [[841, "polars-series-to-list"]], "polars.Series.str.lengths": [[809, "polars-series-str-lengths"]], "polars.Series.str.replace": [[813, "polars-series-str-replace"]], "polars.Series.series_equal": [[781, "polars-series-series-equal"]], "polars.Series.shift_and_fill": [[787, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[788, "polars-series-shrink-dtype"]], "polars.Series.str.splitn": [[820, "polars-series-str-splitn"]], "polars.Series.str.decode": [[803, "polars-series-str-decode"]], "polars.Series.shrink_to_fit": [[789, "polars-series-shrink-to-fit"]], "polars.Series.str.encode": [[804, "polars-series-str-encode"]], "polars.Series.str.lstrip": [[811, "polars-series-str-lstrip"]], "polars.Series.str.replace_all": [[814, "polars-series-str-replace-all"]], "polars.Series.str.to_lowercase": [[824, "polars-series-str-to-lowercase"]], "polars.Series.str": [[799, "polars-series-str"]], "polars.Series.sqrt": [[797, "polars-series-sqrt"]], "polars.Series.str.contains": [[801, "polars-series-str-contains"]], "polars.Series.std": [[798, "polars-series-std"]], "polars.Series.to_numpy": [[842, "polars-series-to-numpy"]], "polars.Series.skew": [[794, "polars-series-skew"]], "polars.Series.str.json_path_match": [[808, "polars-series-str-json-path-match"]], "polars.Series.struct.rename_fields": [[829, "polars-series-struct-rename-fields"]], "polars.Series.shape": [[785, "polars-series-shape"]], "polars.Series.to_pandas": [[843, "polars-series-to-pandas"]], "polars.Series.search_sorted": [[780, "polars-series-search-sorted"]], "polars.Series.str.strptime": [[823, "polars-series-str-strptime"]], "polars.Series.str.ljust": [[810, "polars-series-str-ljust"]], "polars.Series.take_every": [[834, "polars-series-take-every"]], "polars.Series.str.ends_with": [[805, "polars-series-str-ends-with"]], "polars.Series.struct.field": [[827, "polars-series-struct-field"]], "polars.Series.str.starts_with": [[821, "polars-series-str-starts-with"]], "polars.Series.sinh": [[793, "polars-series-sinh"]], "polars.Series.to_arrow": [[838, "polars-series-to-arrow"]], "polars.Series.set": [[782, "polars-series-set"]], "polars.Series.str.zfill": [[826, "polars-series-str-zfill"]], "polars.Series.str.strip": [[822, "polars-series-str-strip"]], "polars.Series.to_dummies": [[839, "polars-series-to-dummies"]], "polars.Series.shift": [[786, "polars-series-shift"]], "polars.Series.set_at_idx": [[783, "polars-series-set-at-idx"]], "polars.Series.str.rstrip": [[816, "polars-series-str-rstrip"]], "polars.Series.sum": [[831, "polars-series-sum"]], "polars.Series.struct.to_frame": [[830, "polars-series-struct-to-frame"]], "polars.Series.set_sorted": [[784, "polars-series-set-sorted"]], "polars.Series.sin": [[792, "polars-series-sin"]], "polars.Series.sort": [[796, "polars-series-sort"]], "polars.Series.str.concat": [[800, "polars-series-str-concat"]], "polars.Series.pct_change": [[757, "polars-series-pct-change"]], "polars.Series.floor": [[718, "polars-series-floor"]], "polars.Series.rolling_median": [[771, "polars-series-rolling-median"]], "polars.Series.rank": [[762, "polars-series-rank"]], "polars.Series.is_null": [[736, "polars-series-is-null"]], "polars.Series.is_finite": [[728, "polars-series-is-finite"]], "polars.Series.is_empty": [[727, "polars-series-is-empty"]], "polars.Series.new_from_index": [[755, "polars-series-new-from-index"]], "polars.Series.is_unique": [[738, "polars-series-is-unique"]], "polars.Series.is_in": [[731, "polars-series-is-in"]], "polars.Series.limit": [[742, "polars-series-limit"]], "polars.Series.is_utf8": [[739, "polars-series-is-utf8"]], "polars.Series.rolling_min": [[772, "polars-series-rolling-min"]], "polars.Series.rename": [[765, "polars-series-rename"]], "polars.Series.n_unique": [[751, "polars-series-n-unique"]], "polars.Series.hash": [[720, "polars-series-hash"]], "polars.Series.is_not_nan": [[734, "polars-series-is-not-nan"]], "polars.Series.len": [[741, "polars-series-len"]], "polars.Series.flags": [[717, "polars-series-flags"]], "polars.Series.is_duplicated": [[726, "polars-series-is-duplicated"]], "polars.Series.nan_max": [[753, "polars-series-nan-max"]], "polars.Series.rechunk": [[763, "polars-series-rechunk"]], "polars.Series.is_boolean": [[724, "polars-series-is-boolean"]], "polars.Series.rolling_sum": [[776, "polars-series-rolling-sum"]], "polars.Series.round": [[778, "polars-series-round"]], "polars.Series.peak_max": [[758, "polars-series-peak-max"]], "polars.Series.rolling_std": [[775, "polars-series-rolling-std"]], "polars.Series.log": [[743, "polars-series-log"]], "polars.Series.is_float": [[730, "polars-series-is-float"]], "polars.Series.head": [[721, "polars-series-head"]], "polars.Series.filter": [[716, "polars-series-filter"]], "polars.Series.mode": [[749, "polars-series-mode"]], "polars.Series.null_count": [[756, "polars-series-null-count"]], "polars.Series.is_numeric": [[737, "polars-series-is-numeric"]], "polars.Series.sample": [[779, "polars-series-sample"]], "polars.Series.kurtosis": [[740, "polars-series-kurtosis"]], "polars.Series.nan_min": [[754, "polars-series-nan-min"]], "polars.Series.inner_dtype": [[722, "polars-series-inner-dtype"]], "polars.Series.min": [[748, "polars-series-min"]], "polars.Series.is_infinite": [[732, "polars-series-is-infinite"]], "polars.Series.interpolate": [[723, "polars-series-interpolate"]], "polars.Series.reinterpret": [[764, "polars-series-reinterpret"]], "polars.Series.reverse": [[767, "polars-series-reverse"]], "polars.Series.mean": [[746, "polars-series-mean"]], "polars.Series.rolling_max": [[769, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[770, "polars-series-rolling-mean"]], "polars.Series.rolling_apply": [[768, "polars-series-rolling-apply"]], "polars.Series.has_validity": [[719, "polars-series-has-validity"]], "polars.Series.rolling_quantile": [[773, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[774, "polars-series-rolling-skew"]], "polars.Series.n_chunks": [[750, "polars-series-n-chunks"]], "polars.Series.product": [[760, "polars-series-product"]], "polars.Series.is_first": [[729, "polars-series-is-first"]], "polars.Series.name": [[752, "polars-series-name"]], "polars.Series.is_not_null": [[735, "polars-series-is-not-null"]], "polars.Series.rolling_var": [[777, "polars-series-rolling-var"]], "polars.Series.median": [[747, "polars-series-median"]], "polars.Series.quantile": [[761, "polars-series-quantile"]], "polars.Series.reshape": [[766, "polars-series-reshape"]], "polars.Series.peak_min": [[759, "polars-series-peak-min"]], "polars.Series.is_datelike": [[725, "polars-series-is-datelike"]], "polars.Series.log10": [[744, "polars-series-log10"]], "polars.Series.fill_null": [[715, "polars-series-fill-null"]], "polars.Series.max": [[745, "polars-series-max"]], "polars.Series.is_nan": [[733, "polars-series-is-nan"]], "polars.Series.clip": [[652, "polars-series-clip"]], "polars.Series.cumsum": [[661, "polars-series-cumsum"]], "polars.Series.clone": [[655, "polars-series-clone"]], "polars.Series.cummax": [[658, "polars-series-cummax"]], "polars.Series.drop_nulls": [[667, "polars-series-drop-nulls"]], "polars.Series.dt.minutes": [[686, "polars-series-dt-minutes"]], "polars.Series.cos": [[656, "polars-series-cos"]], "polars.Series.dtype": [[705, "polars-series-dtype"]], "polars.Series.dt.hour": [[674, "polars-series-dt-hour"]], "polars.Series.dt": [[668, "polars-series-dt"]], "polars.Series.extend_constant": [[713, "polars-series-extend-constant"]], "polars.Series.ewm_std": [[709, "polars-series-ewm-std"]], "polars.Series.clip_max": [[653, "polars-series-clip-max"]], "polars.Series.dt.cast_time_zone": [[670, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.ordinal_day": [[691, "polars-series-dt-ordinal-day"]], "polars.Series.dt.cast_time_unit": [[669, "polars-series-dt-cast-time-unit"]], "polars.Series.clip_min": [[654, "polars-series-clip-min"]], "polars.Series.dt.year": [[704, "polars-series-dt-year"]], "polars.Series.dt.truncate": [[698, "polars-series-dt-truncate"]], "polars.Series.dt.weekday": [[701, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[702, "polars-series-dt-with-time-unit"]], "polars.Series.estimated_size": [[707, "polars-series-estimated-size"]], "polars.Series.dt.with_time_zone": [[703, "polars-series-dt-with-time-zone"]], "polars.Series.dt.hours": [[675, "polars-series-dt-hours"]], "polars.Series.dt.milliseconds": [[683, "polars-series-dt-milliseconds"]], "polars.Series.cosh": [[657, "polars-series-cosh"]], "polars.Series.dt.second": [[694, "polars-series-dt-second"]], "polars.Series.explode": [[712, "polars-series-explode"]], "polars.Series.dt.month": [[687, "polars-series-dt-month"]], "polars.Series.dt.quarter": [[692, "polars-series-dt-quarter"]], "polars.Series.dt.millisecond": [[682, "polars-series-dt-millisecond"]], "polars.Series.dt.tz_localize": [[699, "polars-series-dt-tz-localize"]], "polars.Series.entropy": [[706, "polars-series-entropy"]], "polars.Series.ewm_var": [[710, "polars-series-ewm-var"]], "polars.Series.dt.day": [[671, "polars-series-dt-day"]], "polars.Series.cleared": [[651, "polars-series-cleared"]], "polars.Series.dt.days": [[672, "polars-series-dt-days"]], "polars.Series.dt.nanosecond": [[688, "polars-series-dt-nanosecond"]], "polars.Series.dot": [[665, "polars-series-dot"]], "polars.Series.dt.epoch": [[673, "polars-series-dt-epoch"]], "polars.Series.dt.max": [[677, "polars-series-dt-max"]], "polars.Series.cumulative_eval": [[662, "polars-series-cumulative-eval"]], "polars.Series.dt.minute": [[685, "polars-series-dt-minute"]], "polars.Series.dt.timestamp": [[697, "polars-series-dt-timestamp"]], "polars.Series.dt.offset_by": [[690, "polars-series-dt-offset-by"]], "polars.Series.dt.round": [[693, "polars-series-dt-round"]], "polars.Series.fill_nan": [[714, "polars-series-fill-nan"]], "polars.Series.dt.min": [[684, "polars-series-dt-min"]], "polars.Series.exp": [[711, "polars-series-exp"]], "polars.Series.dt.median": [[679, "polars-series-dt-median"]], "polars.Series.dt.week": [[700, "polars-series-dt-week"]], "polars.Series.cumprod": [[660, "polars-series-cumprod"]], "polars.Series.dt.strftime": [[696, "polars-series-dt-strftime"]], "polars.Series.cummin": [[659, "polars-series-cummin"]], "polars.Series.dt.microseconds": [[681, "polars-series-dt-microseconds"]], "polars.Series.ewm_mean": [[708, "polars-series-ewm-mean"]], "polars.Series.describe": [[663, "polars-series-describe"]], "polars.Series.drop_nans": [[666, "polars-series-drop-nans"]], "polars.Series.dt.iso_year": [[676, "polars-series-dt-iso-year"]], "polars.Series.chunk_lengths": [[650, "polars-series-chunk-lengths"]], "polars.Series.dt.nanoseconds": [[689, "polars-series-dt-nanoseconds"]], "polars.Series.dt.mean": [[678, "polars-series-dt-mean"]], "polars.Series.dt.seconds": [[695, "polars-series-dt-seconds"]], "polars.Series.dt.microsecond": [[680, "polars-series-dt-microsecond"]], "polars.Series.diff": [[664, "polars-series-diff"]], "Computation": [[856, "computation"], [519, "computation"], [228, "computation"]], "Attributes": [[853, "attributes"], [597, "attributes"], [227, "attributes"]], "Temporal": [[864, "temporal"], [527, "temporal"]], "Strings": [[862, "strings"], [525, "strings"]], "Struct": [[863, "struct"], [526, "struct"]], "Array": [[852, "array"], [515, "array"]], "Boolean": [[854, "boolean"], [516, "boolean"]], "polars.Series.unique_counts": [[847, "polars-series-unique-counts"]], "polars.Series.value_counts": [[848, "polars-series-value-counts"]], "polars.Series.top_k": [[845, "polars-series-top-k"]], "Miscellaneous": [[860, "miscellaneous"], [601, "miscellaneous"], [523, "miscellaneous"], [529, "miscellaneous"], [233, "miscellaneous"]], "SQL": [[865, "sql"], [531, "sql"]], "Methods": [[865, "methods"]], "polars.Series.zip_with": [[851, "polars-series-zip-with"]], "Series": [[859, "series"]], "polars.Series.unique": [[846, "polars-series-unique"]], "polars.Series.view": [[850, "polars-series-view"]], "polars.Series.var": [[849, "polars-series-var"]], "Descriptive": [[857, "descriptive"], [598, "descriptive"], [229, "descriptive"]], "Manipulation/selection": [[861, "manipulation-selection"], [602, "manipulation-selection"], [524, "manipulation-selection"], [234, "manipulation-selection"]], "Utils": [[867, "utils"]], "Categories": [[855, "categories"], [517, "categories"]], "Export": [[858, "export"], [230, "export"]], "Testing": [[866, "testing"]], "Asserts": [[866, "asserts"]], "Property-based testing": [[866, "property-based-testing"]], "Strategies": [[866, "strategies"]], "Strategy helpers": [[866, "strategy-helpers"]], "polars.Series.append": [[608, "polars-series-append"]], "polars.Series.arccosh": [[611, "polars-series-arccosh"]], "polars.Series.arr.first": [[629, "polars-series-arr-first"]], "polars.Series.abs": [[604, "polars-series-abs"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[594, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arr.mean": [[636, "polars-series-arr-mean"]], "polars.Series.apply": [[609, "polars-series-apply"]], "polars.Series.arr.eval": [[628, "polars-series-arr-eval"]], "polars.Series.cat": [[647, "polars-series-cat"]], "polars.Series.arg_min": [[617, "polars-series-arg-min"]], "polars.Series.arg_unique": [[620, "polars-series-arg-unique"]], "polars.Series.arr.slice": [[640, "polars-series-arr-slice"]], "polars.Series.arr.sort": [[641, "polars-series-arr-sort"]], "polars.Series.any": [[607, "polars-series-any"]], "polars.Series.arccos": [[610, "polars-series-arccos"]], "polars.Series.arcsin": [[612, "polars-series-arcsin"]], "polars.Series.arr.lengths": [[634, "polars-series-arr-lengths"]], "polars.Series.arctanh": [[615, "polars-series-arctanh"]], "polars.Series.arr.min": [[637, "polars-series-arr-min"]], "polars.Series.arr.reverse": [[638, "polars-series-arr-reverse"]], "polars.Series.arr.tail": [[643, "polars-series-arr-tail"]], "polars.Series.arr.head": [[631, "polars-series-arr-head"]], "polars.Series.arr.last": [[633, "polars-series-arr-last"]], "polars.LazyFrame.width": [[587, "polars-lazyframe-width"]], "polars.Series.arr.max": [[635, "polars-series-arr-max"]], "polars.Series.arr.get": [[630, "polars-series-arr-get"]], "polars.Series.alias": [[605, "polars-series-alias"]], "polars.Series.all": [[606, "polars-series-all"]], "LazyFrame": [[600, "lazyframe"]], "polars.LazyFrame.var": [[586, "polars-lazyframe-var"]], "polars.Series.arr.to_struct": [[644, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[645, "polars-series-arr-unique"]], "polars.Series.arr.diff": [[627, "polars-series-arr-diff"]], "polars.Series.arr.arg_max": [[623, "polars-series-arr-arg-max"]], "polars.Series.arr.shift": [[639, "polars-series-arr-shift"]], "polars.LazyFrame.with_column": [[588, "polars-lazyframe-with-column"]], "polars.LazyFrame.unnest": [[585, "polars-lazyframe-unnest"]], "polars.Series.arg_max": [[616, "polars-series-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[595, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arg_true": [[619, "polars-series-arg-true"]], "polars.Series.arr.concat": [[625, "polars-series-arr-concat"]], "polars.Series.cat.set_ordering": [[648, "polars-series-cat-set-ordering"]], "polars.LazyFrame.with_row_count": [[591, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.write_json": [[592, "polars-lazyframe-write-json"]], "GroupBy": [[599, "groupby"], [231, "groupby"]], "polars.Series.arg_sort": [[618, "polars-series-arg-sort"]], "polars.Series.argsort": [[621, "polars-series-argsort"]], "polars.Series.cast": [[646, "polars-series-cast"]], "polars.Series.arr.sum": [[642, "polars-series-arr-sum"]], "polars.LazyFrame.with_columns": [[589, "polars-lazyframe-with-columns"]], "polars.Series.arctan": [[614, "polars-series-arctan"]], "polars.Series.arr.arg_min": [[624, "polars-series-arr-arg-min"]], "polars.LazyFrame.with_context": [[590, "polars-lazyframe-with-context"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[593, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[596, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.ceil": [[649, "polars-series-ceil"]], "polars.Series.arr.contains": [[626, "polars-series-arr-contains"]], "polars.Series.arr": [[622, "polars-series-arr"]], "polars.Series.arr.join": [[632, "polars-series-arr-join"]], "polars.Series.arcsinh": [[613, "polars-series-arcsinh"]], "Read/write logical plan": [[601, "read-write-logical-plan"]], "polars.exclude": [[489, "polars-exclude"]], "polars.concat_str": [[479, "polars-concat-str"]], "polars.element": [[488, "polars-element"]], "polars.format": [[492, "polars-format"]], "polars.Expr.tan": [[460, "polars-expr-tan"]], "polars.Expr.value_counts": [[467, "polars-expr-value-counts"]], "polars.date": [[485, "polars-date"]], "polars.n_unique": [[502, "polars-n-unique"]], "polars.sum": [[511, "polars-sum"]], "polars.Expr.tanh": [[461, "polars-expr-tanh"]], "polars.spearman_rank_corr": [[508, "polars-spearman-rank-corr"]], "polars.Expr.top_k": [[463, "polars-expr-top-k"]], "polars.when": [[514, "polars-when"]], "polars.all": [[470, "polars-all"]], "polars.argsort_by": [[474, "polars-argsort-by"]], "polars.list": [[495, "polars-list"]], "polars.Expr.unique": [[464, "polars-expr-unique"]], "polars.duration": [[487, "polars-duration"]], "polars.Expr.where": [[469, "polars-expr-where"]], "polars.cov": [[481, "polars-cov"]], "polars.coalesce": [[476, "polars-coalesce"]], "polars.any": [[471, "polars-any"]], "polars.Expr.take": [[458, "polars-expr-take"]], "polars.count": [[480, "polars-count"]], "polars.std": [[509, "polars-std"]], "polars.Expr.var": [[468, "polars-expr-var"]], "polars.reduce": [[505, "polars-reduce"]], "polars.Expr.to_physical": [[462, "polars-expr-to-physical"]], "polars.Expr.take_every": [[459, "polars-expr-take-every"]], "polars.max": [[498, "polars-max"]], "polars.cumreduce": [[483, "polars-cumreduce"]], "Columns / names": [[518, "columns-names"]], "polars.quantile": [[504, "polars-quantile"]], "polars.Expr.unique_counts": [[465, "polars-expr-unique-counts"]], "polars.var": [[513, "polars-var"]], "polars.min": [[501, "polars-min"]], "polars.lit": [[496, "polars-lit"]], "polars.Expr.upper_bound": [[466, "polars-expr-upper-bound"]], "polars.arange": [[473, "polars-arange"]], "polars.mean": [[499, "polars-mean"]], "polars.map": [[497, "polars-map"]], "polars.groups": [[493, "polars-groups"]], "polars.fold": [[491, "polars-fold"]], "polars.struct": [[510, "polars-struct"]], "polars.cumfold": [[482, "polars-cumfold"]], "polars.Expr.tail": [[457, "polars-expr-tail"]], "polars.Expr.suffix": [[455, "polars-expr-suffix"]], "polars.first": [[490, "polars-first"]], "polars.tail": [[512, "polars-tail"]], "polars.concat_list": [[478, "polars-concat-list"]], "polars.apply": [[472, "polars-apply"]], "polars.avg": [[475, "polars-avg"]], "polars.head": [[494, "polars-head"]], "polars.select": [[507, "polars-select"]], "polars.datetime": [[486, "polars-datetime"]], "polars.col": [[477, "polars-col"]], "polars.median": [[500, "polars-median"]], "polars.repeat": [[506, "polars-repeat"]], "polars.pearson_corr": [[503, "polars-pearson-corr"]], "polars.Expr.sum": [[456, "polars-expr-sum"]], "polars.cumsum": [[484, "polars-cumsum"]], "polars.Expr.sinh": [[419, "polars-expr-sinh"]], "polars.Expr.rolling_max": [[400, "polars-expr-rolling-max"]], "polars.Expr.sqrt": [[424, "polars-expr-sqrt"]], "polars.Expr.str.to_lowercase": [[450, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_median": [[402, "polars-expr-rolling-median"]], "polars.Expr.str.replace_all": [[440, "polars-expr-str-replace-all"]], "polars.Expr.str.n_chars": [[438, "polars-expr-str-n-chars"]], "polars.Expr.str.starts_with": [[447, "polars-expr-str-starts-with"]], "polars.Expr.str.strip": [[448, "polars-expr-str-strip"]], "polars.Expr.struct.field": [[453, "polars-expr-struct-field"]], "polars.Expr.rolling_min": [[403, "polars-expr-rolling-min"]], "polars.Expr.str.zfill": [[452, "polars-expr-str-zfill"]], "polars.Expr.prefix": [[390, "polars-expr-prefix"]], "polars.Expr.str.ljust": [[436, "polars-expr-str-ljust"]], "polars.Expr.sin": [[418, "polars-expr-sin"]], "polars.Expr.str.splitn": [[446, "polars-expr-str-splitn"]], "polars.Expr.str.to_uppercase": [[451, "polars-expr-str-to-uppercase"]], "polars.Expr.shift": [[413, "polars-expr-shift"]], "polars.Expr.reshape": [[397, "polars-expr-reshape"]], "polars.Expr.skew": [[420, "polars-expr-skew"]], "polars.Expr.sample": [[410, "polars-expr-sample"]], "polars.Expr.rank": [[393, "polars-expr-rank"]], "polars.Expr.slice": [[421, "polars-expr-slice"]], "polars.Expr.search_sorted": [[411, "polars-expr-search-sorted"]], "polars.Expr.shrink_dtype": [[415, "polars-expr-shrink-dtype"]], "polars.Expr.rechunk": [[394, "polars-expr-rechunk"]], "polars.Expr.str.concat": [[426, "polars-expr-str-concat"]], "polars.Expr.str.count_match": [[428, "polars-expr-str-count-match"]], "polars.Expr.str.lstrip": [[437, "polars-expr-str-lstrip"]], "polars.Expr.str.rstrip": [[442, "polars-expr-str-rstrip"]], "polars.Expr.str.slice": [[443, "polars-expr-str-slice"]], "polars.Expr.reverse": [[398, "polars-expr-reverse"]], "polars.Expr.quantile": [[392, "polars-expr-quantile"]], "polars.Expr.shuffle": [[416, "polars-expr-shuffle"]], "polars.Expr.sort": [[422, "polars-expr-sort"]], "polars.Expr.rolling_quantile": [[404, "polars-expr-rolling-quantile"]], "polars.Expr.str.encode": [[430, "polars-expr-str-encode"]], "polars.Expr.str.replace": [[439, "polars-expr-str-replace"]], "polars.Expr.rolling_mean": [[401, "polars-expr-rolling-mean"]], "polars.Expr.set_sorted": [[412, "polars-expr-set-sorted"]], "polars.Expr.str.ends_with": [[431, "polars-expr-str-ends-with"]], "polars.Expr.repeat_by": [[396, "polars-expr-repeat-by"]], "polars.Expr.rolling_skew": [[405, "polars-expr-rolling-skew"]], "polars.Expr.shift_and_fill": [[414, "polars-expr-shift-and-fill"]], "polars.Expr.sign": [[417, "polars-expr-sign"]], "polars.Expr.struct.rename_fields": [[454, "polars-expr-struct-rename-fields"]], "polars.Expr.str.extract": [[432, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[433, "polars-expr-str-extract-all"]], "polars.Expr.str.decode": [[429, "polars-expr-str-decode"]], "polars.Expr.str.contains": [[427, "polars-expr-str-contains"]], "polars.Expr.str.split": [[444, "polars-expr-str-split"]], "polars.Expr.rolling_var": [[408, "polars-expr-rolling-var"]], "polars.Expr.str.rjust": [[441, "polars-expr-str-rjust"]], "polars.Expr.round": [[409, "polars-expr-round"]], "polars.Expr.str.lengths": [[435, "polars-expr-str-lengths"]], "polars.Expr.str.split_exact": [[445, "polars-expr-str-split-exact"]], "polars.Expr.str.json_path_match": [[434, "polars-expr-str-json-path-match"]], "polars.Expr.str.strptime": [[449, "polars-expr-str-strptime"]], "polars.Expr.rolling_apply": [[399, "polars-expr-rolling-apply"]], "polars.Expr.rolling_std": [[406, "polars-expr-rolling-std"]], "polars.Expr.reinterpret": [[395, "polars-expr-reinterpret"]], "polars.Expr.product": [[391, "polars-expr-product"]], "polars.Expr.rolling_sum": [[407, "polars-expr-rolling-sum"]], "polars.Expr.sort_by": [[423, "polars-expr-sort-by"]], "polars.Expr.std": [[425, "polars-expr-std"]], "polars.Expr.meta.pop": [[378, "polars-expr-meta-pop"]], "polars.Expr.dt.with_time_zone": [[330, "polars-expr-dt-with-time-zone"]], "polars.Expr.keep_name": [[363, "polars-expr-keep-name"]], "polars.Expr.last": [[365, "polars-expr-last"]], "polars.Expr.pow": [[389, "polars-expr-pow"]], "polars.Expr.first": [[343, "polars-expr-first"]], "polars.Expr.fill_nan": [[340, "polars-expr-fill-nan"]], "polars.Expr.head": [[348, "polars-expr-head"]], "polars.Expr.nan_min": [[385, "polars-expr-nan-min"]], "polars.Expr.is_nan": [[357, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[359, "polars-expr-is-not-nan"]], "polars.Expr.dt.year": [[331, "polars-expr-dt-year"]], "polars.Expr.exp": [[337, "polars-expr-exp"]], "polars.Expr.entropy": [[332, "polars-expr-entropy"]], "polars.Expr.limit": [[367, "polars-expr-limit"]], "polars.Expr.meta.root_names": [[379, "polars-expr-meta-root-names"]], "polars.Expr.is_between": [[351, "polars-expr-is-between"]], "polars.Expr.median": [[376, "polars-expr-median"]], "polars.Expr.over": [[387, "polars-expr-over"]], "polars.Expr.meta.undo_aliases": [[380, "polars-expr-meta-undo-aliases"]], "polars.Expr.nan_max": [[384, "polars-expr-nan-max"]], "polars.Expr.mode": [[382, "polars-expr-mode"]], "polars.Expr.ewm_mean": [[333, "polars-expr-ewm-mean"]], "polars.Expr.is_in": [[355, "polars-expr-is-in"]], "polars.Expr.flatten": [[344, "polars-expr-flatten"]], "polars.Expr.dt.tz_localize": [[326, "polars-expr-dt-tz-localize"]], "polars.Expr.max": [[374, "polars-expr-max"]], "polars.Expr.fill_null": [[341, "polars-expr-fill-null"]], "polars.Expr.map": [[372, "polars-expr-map"]], "polars.Expr.inspect": [[349, "polars-expr-inspect"]], "polars.Expr.is_duplicated": [[352, "polars-expr-is-duplicated"]], "polars.Expr.log": [[369, "polars-expr-log"]], "polars.Expr.null_count": [[386, "polars-expr-null-count"]], "polars.Expr.dt.weekday": [[328, "polars-expr-dt-weekday"]], "polars.Expr.ewm_var": [[335, "polars-expr-ewm-var"]], "polars.Expr.is_unique": [[362, "polars-expr-is-unique"]], "polars.Expr.hash": [[347, "polars-expr-hash"]], "polars.Expr.is_finite": [[353, "polars-expr-is-finite"]], "polars.Expr.is_not_null": [[360, "polars-expr-is-not-null"]], "polars.Expr.interpolate": [[350, "polars-expr-interpolate"]], "polars.Expr.min": [[381, "polars-expr-min"]], "polars.Expr.is_null": [[361, "polars-expr-is-null"]], "polars.Expr.is_infinite": [[356, "polars-expr-is-infinite"]], "polars.Expr.extend_constant": [[339, "polars-expr-extend-constant"]], "polars.Expr.log10": [[370, "polars-expr-log10"]], "polars.Expr.pct_change": [[388, "polars-expr-pct-change"]], "polars.Expr.dt.with_time_unit": [[329, "polars-expr-dt-with-time-unit"]], "polars.Expr.lower_bound": [[371, "polars-expr-lower-bound"]], "polars.Expr.map_alias": [[373, "polars-expr-map-alias"]], "polars.Expr.len": [[366, "polars-expr-len"]], "polars.Expr.mean": [[375, "polars-expr-mean"]], "polars.Expr.filter": [[342, "polars-expr-filter"]], "polars.Expr.exclude": [[336, "polars-expr-exclude"]], "polars.Expr.forward_fill": [[346, "polars-expr-forward-fill"]], "polars.Expr.kurtosis": [[364, "polars-expr-kurtosis"]], "polars.Expr.explode": [[338, "polars-expr-explode"]], "polars.Expr.dt.truncate": [[325, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[327, "polars-expr-dt-week"]], "polars.Expr.ewm_std": [[334, "polars-expr-ewm-std"]], "polars.Expr.list": [[368, "polars-expr-list"]], "polars.Expr.is_not": [[358, "polars-expr-is-not"]], "polars.Expr.meta.output_name": [[377, "polars-expr-meta-output-name"]], "polars.Expr.n_unique": [[383, "polars-expr-n-unique"]], "polars.Expr.is_first": [[354, "polars-expr-is-first"]], "polars.Expr.floor": [[345, "polars-expr-floor"]], "polars.LazyFrame.describe_optimized_plan": [[538, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.max": [[562, "polars-lazyframe-max"]], "polars.LazyFrame.reverse": [[572, "polars-lazyframe-reverse"]], "polars.LazyFrame.pipe": [[567, "polars-lazyframe-pipe"]], "Functions": [[529, "functions"], [520, "functions"], [236, "functions"]], "Conversion": [[529, "conversion"]], "Eager/Lazy functions": [[529, "eager-lazy-functions"]], "Parallelization": [[529, "parallelization"]], "StringCache": [[529, "stringcache"]], "polars.LazyFrame.columns": [[537, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby": [[550, "polars-lazyframe-groupby"]], "polars.LazyFrame.median": [[564, "polars-lazyframe-median"]], "polars.LazyFrame.profile": [[568, "polars-lazyframe-profile"]], "polars.LazyFrame.mean": [[563, "polars-lazyframe-mean"]], "polars.LazyFrame.read_json": [[570, "polars-lazyframe-read-json"]], "polars.LazyFrame.drop_nulls": [[541, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.melt": [[565, "polars-lazyframe-melt"]], "polars.LazyFrame.groupby_rolling": [[552, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.cache": [[533, "polars-lazyframe-cache"]], "polars.LazyFrame.shift": [[575, "polars-lazyframe-shift"]], "polars.LazyFrame.drop": [[540, "polars-lazyframe-drop"]], "polars.LazyFrame.cleared": [[534, "polars-lazyframe-cleared"]], "API reference": [[530, "api-reference"]], "polars.LazyFrame.groupby_dynamic": [[551, "polars-lazyframe-groupby-dynamic"]], "Expressions": [[521, "expressions"]], "polars.LazyFrame.inspect": [[554, "polars-lazyframe-inspect"]], "polars.LazyFrame.join": [[556, "polars-lazyframe-join"]], "polars.LazyFrame.tail": [[582, "polars-lazyframe-tail"]], "polars.LazyFrame.quantile": [[569, "polars-lazyframe-quantile"]], "polars.LazyFrame.dtypes": [[542, "polars-lazyframe-dtypes"]], "polars.LazyFrame.unique": [[584, "polars-lazyframe-unique"]], "polars.LazyFrame.slice": [[578, "polars-lazyframe-slice"]], "polars.LazyFrame.map": [[561, "polars-lazyframe-map"]], "polars.LazyFrame.sum": [[581, "polars-lazyframe-sum"]], "polars.LazyFrame.clone": [[535, "polars-lazyframe-clone"]], "polars.LazyFrame.shift_and_fill": [[576, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fill_nan": [[545, "polars-lazyframe-fill-nan"]], "Input/output": [[531, "input-output"]], "CSV": [[531, "csv"]], "Feather/ IPC": [[531, "feather-ipc"]], "Parquet": [[531, "parquet"]], "JSON": [[531, "json"]], "AVRO": [[531, "avro"]], "Excel": [[531, "excel"]], "Datasets": [[531, "datasets"]], "BatchedCsvReader": [[531, "batchedcsvreader"]], "polars.LazyFrame.limit": [[560, "polars-lazyframe-limit"]], "polars.LazyFrame.rename": [[571, "polars-lazyframe-rename"]], "polars.LazyFrame.schema": [[573, "polars-lazyframe-schema"]], "polars.LazyFrame.first": [[548, "polars-lazyframe-first"]], "polars.LazyFrame.take_every": [[583, "polars-lazyframe-take-every"]], "polars.LazyFrame.explode": [[543, "polars-lazyframe-explode"]], "polars.LazyFrame.lazy": [[559, "polars-lazyframe-lazy"]], "polars.LazyFrame.sort": [[579, "polars-lazyframe-sort"]], "polars.LazyFrame.show_graph": [[577, "polars-lazyframe-show-graph"]], "polars.LazyFrame.min": [[566, "polars-lazyframe-min"]], "Meta": [[522, "meta"]], "polars.LazyFrame.fetch": [[544, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[546, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[547, "polars-lazyframe-filter"]], "polars.LazyFrame.std": [[580, "polars-lazyframe-std"]], "polars.LazyFrame.head": [[553, "polars-lazyframe-head"]], "polars.LazyFrame.describe_plan": [[539, "polars-lazyframe-describe-plan"]], "Window": [[528, "window"]], "polars.LazyFrame.from_json": [[549, "polars-lazyframe-from-json"]], "polars.LazyFrame.interpolate": [[555, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[557, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[558, "polars-lazyframe-last"]], "polars.LazyFrame.select": [[574, "polars-lazyframe-select"]], "polars.LazyFrame.collect": [[536, "polars-lazyframe-collect"]], "polars.Expr.clip_max": [[285, "polars-expr-clip-max"]], "polars.Expr.diff": [[296, "polars-expr-diff"]], "polars.Expr.dt.iso_year": [[307, "polars-expr-dt-iso-year"]], "polars.Expr.cummax": [[291, "polars-expr-cummax"]], "polars.Expr.dt.quarter": [[319, "polars-expr-dt-quarter"]], "polars.Expr.clip_min": [[286, "polars-expr-clip-min"]], "polars.Expr.arr.join": [[266, "polars-expr-arr-join"]], "polars.Expr.dt.nanoseconds": [[316, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.ordinal_day": [[318, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.seconds": [[322, "polars-expr-dt-seconds"]], "polars.Expr.dt.days": [[303, "polars-expr-dt-days"]], "polars.Expr.dt.microsecond": [[308, "polars-expr-dt-microsecond"]], "polars.Expr.dt.minute": [[312, "polars-expr-dt-minute"]], "polars.Expr.arr.reverse": [[272, "polars-expr-arr-reverse"]], "polars.Expr.cumulative_eval": [[295, "polars-expr-cumulative-eval"]], "polars.Expr.arr.contains": [[260, "polars-expr-arr-contains"]], "polars.Expr.arr.first": [[263, "polars-expr-arr-first"]], "polars.Expr.arr.head": [[265, "polars-expr-arr-head"]], "polars.Expr.dt.minutes": [[313, "polars-expr-dt-minutes"]], "polars.Expr.arr.mean": [[270, "polars-expr-arr-mean"]], "polars.Expr.dt.strftime": [[323, "polars-expr-dt-strftime"]], "polars.Expr.clip": [[284, "polars-expr-clip"]], "polars.Expr.dt.epoch": [[304, "polars-expr-dt-epoch"]], "polars.Expr.cumsum": [[294, "polars-expr-cumsum"]], "polars.Expr.cosh": [[288, "polars-expr-cosh"]], "polars.Expr.arr.shift": [[273, "polars-expr-arr-shift"]], "polars.Expr.cumprod": [[293, "polars-expr-cumprod"]], "polars.Expr.dt.cast_time_zone": [[301, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.hour": [[305, "polars-expr-dt-hour"]], "polars.Expr.cat.set_ordering": [[282, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.microseconds": [[309, "polars-expr-dt-microseconds"]], "polars.Expr.dt.timestamp": [[324, "polars-expr-dt-timestamp"]], "polars.Expr.arr.to_struct": [[278, "polars-expr-arr-to-struct"]], "polars.Expr.dt.second": [[321, "polars-expr-dt-second"]], "polars.Expr.dt.month": [[314, "polars-expr-dt-month"]], "polars.Expr.cumcount": [[290, "polars-expr-cumcount"]], "polars.Expr.dt.day": [[302, "polars-expr-dt-day"]], "polars.Expr.arr.last": [[267, "polars-expr-arr-last"]], "polars.Expr.arr.diff": [[261, "polars-expr-arr-diff"]], "polars.Expr.count": [[289, "polars-expr-count"]], "polars.Expr.cast": [[281, "polars-expr-cast"]], "polars.Expr.cummin": [[292, "polars-expr-cummin"]], "polars.Expr.arr.eval": [[262, "polars-expr-arr-eval"]], "polars.Expr.arr.lengths": [[268, "polars-expr-arr-lengths"]], "polars.Expr.arr.tail": [[277, "polars-expr-arr-tail"]], "polars.Expr.drop_nulls": [[299, "polars-expr-drop-nulls"]], "polars.Expr.dot": [[297, "polars-expr-dot"]], "polars.Expr.dt.round": [[320, "polars-expr-dt-round"]], "polars.Expr.dt.millisecond": [[310, "polars-expr-dt-millisecond"]], "polars.Expr.arr.max": [[269, "polars-expr-arr-max"]], "polars.Expr.drop_nans": [[298, "polars-expr-drop-nans"]], "polars.Expr.arr.unique": [[279, "polars-expr-arr-unique"]], "polars.Expr.cos": [[287, "polars-expr-cos"]], "polars.Expr.dt.offset_by": [[317, "polars-expr-dt-offset-by"]], "polars.Expr.arr.sum": [[276, "polars-expr-arr-sum"]], "polars.Expr.dt.nanosecond": [[315, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.hours": [[306, "polars-expr-dt-hours"]], "polars.Expr.arr.slice": [[274, "polars-expr-arr-slice"]], "polars.Expr.arr.get": [[264, "polars-expr-arr-get"]], "polars.Expr.backward_fill": [[280, "polars-expr-backward-fill"]], "polars.Expr.dt.milliseconds": [[311, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.cast_time_unit": [[300, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.min": [[271, "polars-expr-arr-min"]], "polars.Expr.arr.sort": [[275, "polars-expr-arr-sort"]], "polars.Expr.ceil": [[283, "polars-expr-ceil"]], "polars.DataFrame.is_unique": [[146, "polars-dataframe-is-unique"]], "polars.DataFrame.fold": [[131, "polars-dataframe-fold"]], "polars.DataFrame.join_asof": [[148, "polars-dataframe-join-asof"]], "polars.DataFrame.pivot": [[161, "polars-dataframe-pivot"]], "polars.DataFrame.rechunk": [[164, "polars-dataframe-rechunk"]], "polars.DataFrame.shrink_to_fit": [[177, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.max": [[151, "polars-dataframe-max"]], "polars.DataFrame.groupby_dynamic": [[136, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.shift": [[175, "polars-dataframe-shift"]], "polars.DataFrame.to_arrow": [[184, "polars-dataframe-to-arrow"]], "polars.DataFrame.shift_and_fill": [[176, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shape": [[174, "polars-dataframe-shape"]], "polars.DataFrame.unnest": [[194, "polars-dataframe-unnest"]], "polars.DataFrame.to_dummies": [[187, "polars-dataframe-to-dummies"]], "polars.DataFrame.quantile": [[163, "polars-dataframe-quantile"]], "polars.DataFrame.n_unique": [[157, "polars-dataframe-n-unique"]], "polars.DataFrame.join": [[147, "polars-dataframe-join"]], "polars.DataFrame.select": [[173, "polars-dataframe-select"]], "polars.DataFrame.n_chunks": [[156, "polars-dataframe-n-chunks"]], "polars.DataFrame.row": [[169, "polars-dataframe-row"]], "polars.DataFrame.std": [[180, "polars-dataframe-std"]], "polars.DataFrame.rows": [[170, "polars-dataframe-rows"]], "polars.DataFrame.get_columns": [[134, "polars-dataframe-get-columns"]], "polars.DataFrame.get_column": [[133, "polars-dataframe-get-column"]], "polars.DataFrame.insert_at_idx": [[142, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hash_rows": [[138, "polars-dataframe-hash-rows"]], "polars.DataFrame.schema": [[172, "polars-dataframe-schema"]], "polars.DataFrame.sort": [[179, "polars-dataframe-sort"]], "polars.DataFrame.to_numpy": [[188, "polars-dataframe-to-numpy"]], "polars.DataFrame.groupby": [[135, "polars-dataframe-groupby"]], "polars.DataFrame.to_pandas": [[189, "polars-dataframe-to-pandas"]], "polars.DataFrame.melt": [[154, "polars-dataframe-melt"]], "polars.DataFrame.unique": [[193, "polars-dataframe-unique"]], "polars.DataFrame.rename": [[165, "polars-dataframe-rename"]], "polars.DataFrame.find_idx_by_name": [[130, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.head": [[139, "polars-dataframe-head"]], "polars.DataFrame.groupby_rolling": [[137, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.replace_at_idx": [[167, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_series": [[190, "polars-dataframe-to-series"]], "polars.DataFrame.height": [[140, "polars-dataframe-height"]], "polars.DataFrame.mean": [[152, "polars-dataframe-mean"]], "polars.DataFrame.lazy": [[149, "polars-dataframe-lazy"]], "polars.DataFrame.median": [[153, "polars-dataframe-median"]], "polars.DataFrame.take_every": [[183, "polars-dataframe-take-every"]], "polars.DataFrame.product": [[162, "polars-dataframe-product"]], "polars.DataFrame.interpolate": [[143, "polars-dataframe-interpolate"]], "polars.DataFrame.min": [[155, "polars-dataframe-min"]], "polars.DataFrame.sample": [[171, "polars-dataframe-sample"]], "polars.DataFrame.frame_equal": [[132, "polars-dataframe-frame-equal"]], "polars.DataFrame.replace": [[166, "polars-dataframe-replace"]], "polars.DataFrame.limit": [[150, "polars-dataframe-limit"]], "polars.DataFrame.null_count": [[158, "polars-dataframe-null-count"]], "polars.DataFrame.is_duplicated": [[144, "polars-dataframe-is-duplicated"]], "polars.DataFrame.reverse": [[168, "polars-dataframe-reverse"]], "polars.DataFrame.to_dict": [[185, "polars-dataframe-to-dict"]], "polars.DataFrame.slice": [[178, "polars-dataframe-slice"]], "polars.DataFrame.tail": [[182, "polars-dataframe-tail"]], "polars.DataFrame.to_dicts": [[186, "polars-dataframe-to-dicts"]], "polars.DataFrame.transpose": [[192, "polars-dataframe-transpose"]], "polars.DataFrame.to_struct": [[191, "polars-dataframe-to-struct"]], "polars.DataFrame.partition_by": [[159, "polars-dataframe-partition-by"]], "polars.DataFrame.sum": [[181, "polars-dataframe-sum"]], "polars.DataFrame.is_empty": [[145, "polars-dataframe-is-empty"]], "polars.DataFrame.pipe": [[160, "polars-dataframe-pipe"]], "polars.DataFrame.hstack": [[141, "polars-dataframe-hstack"]], "polars.DataFrame.width": [[199, "polars-dataframe-width"]], "polars.Expr.arctan": [[250, "polars-expr-arctan"]], "polars.Expr.arg_min": [[253, "polars-expr-arg-min"]], "polars.Expr.all": [[242, "polars-expr-all"]], "polars.DataFrame.vstack": [[198, "polars-dataframe-vstack"]], "polars.internals.dataframe.groupby.GroupBy.max": [[210, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[226, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.DataFrame.unstack": [[195, "polars-dataframe-unstack"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[223, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.Expr.arg_sort": [[254, "polars-expr-arg-sort"]], "Exceptions": [[237, "exceptions"]], "polars.Expr.arg_max": [[252, "polars-expr-arg-max"]], "polars.Expr.arg_unique": [[255, "polars-expr-arg-unique"]], "polars.DataFrame.with_row_count": [[202, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[203, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arctanh": [[251, "polars-expr-arctanh"]], "polars.internals.dataframe.groupby.GroupBy.head": [[208, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.pivot.PivotOps.first": [[220, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.groupby.GroupBy.median": [[212, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[216, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.last": [[209, "polars-internals-dataframe-groupby-groupby-last"]], "polars.internals.dataframe.groupby.GroupBy.first": [[207, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.pivot.PivotOps.max": [[222, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.groupby.GroupBy.count": [[206, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.argsort": [[256, "polars-expr-argsort"]], "polars.Expr.alias": [[241, "polars-expr-alias"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[214, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.pivot.PivotOps.median": [[224, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.internals.dataframe.pivot.PivotOps.last": [[221, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.Expr.agg_groups": [[240, "polars-expr-agg-groups"]], "polars.Expr.arr.arg_min": [[258, "polars-expr-arr-arg-min"]], "polars.Expr.arr.concat": [[259, "polars-expr-arr-concat"]], "Data types": [[236, "data-types"]], "Numeric": [[236, "numeric"]], "Date / Time": [[236, "date-time"]], "Nested": [[236, "nested"]], "Other": [[236, "other"]], "polars.Expr.arccosh": [[247, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[248, "polars-expr-arcsin"]], "Pivot": [[235, "pivot"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[205, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[215, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.DataFrame.with_columns": [[201, "polars-dataframe-with-columns"]], "polars.DataFrame.upsample": [[196, "polars-dataframe-upsample"]], "polars.Expr.arr.arg_max": [[257, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[204, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.Expr.append": [[244, "polars-expr-append"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[218, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.apply": [[245, "polars-expr-apply"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[211, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.DataFrame.with_column": [[200, "polars-dataframe-with-column"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[217, "polars-internals-dataframe-groupby-groupby-sum"]], "DataFrame": [[232, "dataframe"]], "polars.Expr.abs": [[239, "polars-expr-abs"]], "polars.internals.dataframe.pivot.PivotOps.min": [[225, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.Expr.any": [[243, "polars-expr-any"]], "polars.Expr.arccos": [[246, "polars-expr-arccos"]], "polars.Expr.arcsinh": [[249, "polars-expr-arcsinh"]], "polars.internals.dataframe.groupby.GroupBy.min": [[213, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.pivot.PivotOps.count": [[219, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.DataFrame.var": [[197, "polars-dataframe-var"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_excel() (in module polars)": [[90, "polars.read_excel"]], "read_ipc() (in module polars)": [[91, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[92, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[93, "polars.read_json"]], "read_ndjson() (in module polars)": [[94, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[95, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[96, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[97, "polars.read_sql"]], "scan_csv() (in module polars)": [[98, "polars.scan_csv"]], "scan_ds() (in module polars)": [[99, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[100, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[101, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[102, "polars.scan_parquet"]], "show_versions() (in module polars)": [[103, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[104, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[105, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[106, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[106, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[107, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[108, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[110, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[111, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[112, "polars.zeros"]], "apply() (polars.dataframe method)": [[115, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[116, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[117, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[118, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[119, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[120, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[121, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[122, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[123, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[124, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[125, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[126, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[127, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[128, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[129, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[130, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[131, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[132, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[133, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[134, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[135, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[136, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[137, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[138, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[139, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[140, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[141, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[142, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[143, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[144, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[145, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[146, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[147, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[148, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[149, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[150, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[151, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[152, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[153, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[154, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[155, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[156, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[157, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[158, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[159, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[160, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[161, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[162, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[163, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[164, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[165, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[166, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[167, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[168, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[169, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[170, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[171, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[172, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[173, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[174, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[175, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[176, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[177, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[178, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[179, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[180, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[181, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[182, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[183, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[184, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[185, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[186, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[187, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[188, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[189, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[190, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[191, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[192, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[193, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[194, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[195, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[196, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[197, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[198, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[199, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[200, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[201, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[202, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[203, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[204, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[205, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[206, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[207, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[208, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[209, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[219, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[220, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[221, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[222, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[223, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[224, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[225, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[239, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[240, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[241, "polars.Expr.alias"]], "all() (polars.expr method)": [[242, "polars.Expr.all"]], "any() (polars.expr method)": [[243, "polars.Expr.any"]], "append() (polars.expr method)": [[244, "polars.Expr.append"]], "apply() (polars.expr method)": [[245, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[246, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[247, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[248, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[249, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[250, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[251, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[252, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[253, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[254, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[255, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[256, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[257, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[258, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[259, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[260, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[261, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[262, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[263, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[264, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[265, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[266, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[267, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[268, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[269, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[270, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[271, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[272, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[273, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[274, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[275, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[276, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[277, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[278, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[279, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[280, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[281, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[282, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[283, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[284, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[285, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[286, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[287, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[288, "polars.Expr.cosh"]], "count() (polars.expr method)": [[289, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[290, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[291, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[292, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[293, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[294, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[295, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[296, "polars.Expr.diff"]], "dot() (polars.expr method)": [[297, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[298, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[299, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[300, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[301, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[302, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[303, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[304, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[305, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[306, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[307, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[308, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[309, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[310, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[311, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[312, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[313, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[314, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[315, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[316, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[317, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[318, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[319, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[320, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[321, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[322, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[323, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[324, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[325, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[326, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[327, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[328, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[329, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[330, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[331, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[332, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[333, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[334, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[335, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[336, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[337, "polars.Expr.exp"]], "explode() (polars.expr method)": [[338, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[339, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[340, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[341, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[342, "polars.Expr.filter"]], "first() (polars.expr method)": [[343, "polars.Expr.first"]], "flatten() (polars.expr method)": [[344, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[345, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[346, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[347, "polars.Expr.hash"]], "head() (polars.expr method)": [[348, "polars.Expr.head"]], "inspect() (polars.expr method)": [[349, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[350, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[351, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[352, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[353, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[354, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[355, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[356, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[357, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[358, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[359, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[360, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[361, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[362, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[363, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[364, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[365, "polars.Expr.last"]], "len() (polars.expr method)": [[366, "polars.Expr.len"]], "limit() (polars.expr method)": [[367, "polars.Expr.limit"]], "list() (polars.expr method)": [[368, "polars.Expr.list"]], "log() (polars.expr method)": [[369, "polars.Expr.log"]], "log10() (polars.expr method)": [[370, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[371, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[372, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[373, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[374, "polars.Expr.max"]], "mean() (polars.expr method)": [[375, "polars.Expr.mean"]], "median() (polars.expr method)": [[376, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[377, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[378, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[379, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[380, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[381, "polars.Expr.min"]], "mode() (polars.expr method)": [[382, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[383, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[384, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[385, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[386, "polars.Expr.null_count"]], "over() (polars.expr method)": [[387, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[388, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[389, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[390, "polars.Expr.prefix"]], "product() (polars.expr method)": [[391, "polars.Expr.product"]], "quantile() (polars.expr method)": [[392, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[393, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[394, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[395, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[396, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[397, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[398, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[399, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[400, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[401, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[402, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[403, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[404, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[405, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[406, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[407, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[408, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[409, "polars.Expr.round"]], "sample() (polars.expr method)": [[410, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[411, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[412, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[413, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[414, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[415, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[416, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[417, "polars.Expr.sign"]], "sin() (polars.expr method)": [[418, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[419, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[420, "polars.Expr.skew"]], "slice() (polars.expr method)": [[421, "polars.Expr.slice"]], "sort() (polars.expr method)": [[422, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[423, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[424, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[425, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[426, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[427, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[428, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[429, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[430, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[431, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[432, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[433, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[434, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[435, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[436, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[437, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[438, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[439, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[440, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[441, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[442, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[443, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[444, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[445, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[446, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[447, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[448, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[449, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[450, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[451, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[452, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[453, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[454, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[455, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[456, "polars.Expr.sum"]], "tail() (polars.expr method)": [[457, "polars.Expr.tail"]], "take() (polars.expr method)": [[458, "polars.Expr.take"]], "take_every() (polars.expr method)": [[459, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[460, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[461, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[462, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[463, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[464, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[465, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[466, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[467, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[468, "polars.Expr.var"]], "where() (polars.expr method)": [[469, "polars.Expr.where"]], "all() (in module polars)": [[470, "polars.all"]], "any() (in module polars)": [[471, "polars.any"]], "apply() (in module polars)": [[472, "polars.apply"]], "arange() (in module polars)": [[473, "polars.arange"]], "argsort_by() (in module polars)": [[474, "polars.argsort_by"]], "avg() (in module polars)": [[475, "polars.avg"]], "coalesce() (in module polars)": [[476, "polars.coalesce"]], "col() (in module polars)": [[477, "polars.col"]], "concat_list() (in module polars)": [[478, "polars.concat_list"]], "concat_str() (in module polars)": [[479, "polars.concat_str"]], "count() (in module polars)": [[480, "polars.count"]], "cov() (in module polars)": [[481, "polars.cov"]], "cumfold() (in module polars)": [[482, "polars.cumfold"]], "cumreduce() (in module polars)": [[483, "polars.cumreduce"]], "cumsum() (in module polars)": [[484, "polars.cumsum"]], "date() (in module polars)": [[485, "polars.date"]], "datetime() (in module polars)": [[486, "polars.datetime"]], "duration() (in module polars)": [[487, "polars.duration"]], "element() (in module polars)": [[488, "polars.element"]], "exclude() (in module polars)": [[489, "polars.exclude"]], "first() (in module polars)": [[490, "polars.first"]], "fold() (in module polars)": [[491, "polars.fold"]], "format() (in module polars)": [[492, "polars.format"]], "groups() (in module polars)": [[493, "polars.groups"]], "head() (in module polars)": [[494, "polars.head"]], "list() (in module polars)": [[495, "polars.list"]], "lit() (in module polars)": [[496, "polars.lit"]], "map() (in module polars)": [[497, "polars.map"]], "max() (in module polars)": [[498, "polars.max"]], "mean() (in module polars)": [[499, "polars.mean"]], "median() (in module polars)": [[500, "polars.median"]], "min() (in module polars)": [[501, "polars.min"]], "n_unique() (in module polars)": [[502, "polars.n_unique"]], "pearson_corr() (in module polars)": [[503, "polars.pearson_corr"]], "quantile() (in module polars)": [[504, "polars.quantile"]], "reduce() (in module polars)": [[505, "polars.reduce"]], "repeat() (in module polars)": [[506, "polars.repeat"]], "select() (in module polars)": [[507, "polars.select"]], "spearman_rank_corr() (in module polars)": [[508, "polars.spearman_rank_corr"]], "std() (in module polars)": [[509, "polars.std"]], "struct() (in module polars)": [[510, "polars.struct"]], "sum() (in module polars)": [[511, "polars.sum"]], "tail() (in module polars)": [[512, "polars.tail"]], "var() (in module polars)": [[513, "polars.var"]], "when() (in module polars)": [[514, "polars.when"]], "cache() (polars.lazyframe method)": [[533, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[534, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[535, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[536, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[537, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[538, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[539, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[540, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[541, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[542, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[543, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[544, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[545, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[546, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[547, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[548, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[549, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[550, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[551, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[552, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[553, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[554, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[555, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[556, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[557, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[558, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[559, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[560, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[561, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[562, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[563, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[564, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[565, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[566, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[567, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[568, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[569, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[570, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[571, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[572, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[573, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[574, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[575, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[576, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[577, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[578, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[579, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[580, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[581, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[582, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[583, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[584, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[585, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[586, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[587, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[588, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[589, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[590, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[591, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[592, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[593, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[594, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[595, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[596, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[604, "polars.Series.abs"]], "alias() (polars.series method)": [[605, "polars.Series.alias"]], "all() (polars.series method)": [[606, "polars.Series.all"]], "any() (polars.series method)": [[607, "polars.Series.any"]], "append() (polars.series method)": [[608, "polars.Series.append"]], "apply() (polars.series method)": [[609, "polars.Series.apply"]], "arccos() (polars.series method)": [[610, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[611, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[612, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[613, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[614, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[615, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[616, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[617, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[618, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[619, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[620, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[621, "polars.Series.argsort"]], "arr (polars.series attribute)": [[622, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[623, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[624, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[625, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[626, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[627, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[628, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[629, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[630, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[631, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[632, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[633, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[634, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[635, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[636, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[637, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[638, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[639, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[640, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[641, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[642, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[643, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[644, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[645, "polars.Series.arr.unique"]], "cast() (polars.series method)": [[646, "polars.Series.cast"]], "cat (polars.series attribute)": [[647, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[648, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[649, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[650, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[651, "polars.Series.cleared"]], "clip() (polars.series method)": [[652, "polars.Series.clip"]], "clip_max() (polars.series method)": [[653, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[654, "polars.Series.clip_min"]], "clone() (polars.series method)": [[655, "polars.Series.clone"]], "cos() (polars.series method)": [[656, "polars.Series.cos"]], "cosh() (polars.series method)": [[657, "polars.Series.cosh"]], "cummax() (polars.series method)": [[658, "polars.Series.cummax"]], "cummin() (polars.series method)": [[659, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[660, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[661, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[662, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[663, "polars.Series.describe"]], "diff() (polars.series method)": [[664, "polars.Series.diff"]], "dot() (polars.series method)": [[665, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[666, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[667, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[668, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[669, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[670, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[671, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[672, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[673, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[674, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[675, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[676, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[677, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[678, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[679, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[680, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[681, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[682, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[683, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[684, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[685, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[686, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[687, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[688, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[689, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[690, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[691, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[692, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[693, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[694, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[695, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[696, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[697, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[698, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[699, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[700, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[701, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[702, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[703, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[704, "polars.Series.dt.year"]], "dtype (polars.series property)": [[705, "polars.Series.dtype"]], "entropy() (polars.series method)": [[706, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[707, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[708, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[709, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[710, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[711, "polars.Series.exp"]], "explode() (polars.series method)": [[712, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[713, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[714, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[715, "polars.Series.fill_null"]], "filter() (polars.series method)": [[716, "polars.Series.filter"]], "flags (polars.series property)": [[717, "polars.Series.flags"]], "floor() (polars.series method)": [[718, "polars.Series.floor"]], "has_validity() (polars.series method)": [[719, "polars.Series.has_validity"]], "hash() (polars.series method)": [[720, "polars.Series.hash"]], "head() (polars.series method)": [[721, "polars.Series.head"]], "inner_dtype (polars.series property)": [[722, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[723, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[724, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[725, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[726, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[727, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[728, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[729, "polars.Series.is_first"]], "is_float() (polars.series method)": [[730, "polars.Series.is_float"]], "is_in() (polars.series method)": [[731, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[732, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[733, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[734, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[735, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[736, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[737, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[738, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[739, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[740, "polars.Series.kurtosis"]], "len() (polars.series method)": [[741, "polars.Series.len"]], "limit() (polars.series method)": [[742, "polars.Series.limit"]], "log() (polars.series method)": [[743, "polars.Series.log"]], "log10() (polars.series method)": [[744, "polars.Series.log10"]], "max() (polars.series method)": [[745, "polars.Series.max"]], "mean() (polars.series method)": [[746, "polars.Series.mean"]], "median() (polars.series method)": [[747, "polars.Series.median"]], "min() (polars.series method)": [[748, "polars.Series.min"]], "mode() (polars.series method)": [[749, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[750, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[751, "polars.Series.n_unique"]], "name (polars.series property)": [[752, "polars.Series.name"]], "nan_max() (polars.series method)": [[753, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[754, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[755, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[756, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[757, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[758, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[759, "polars.Series.peak_min"]], "product() (polars.series method)": [[760, "polars.Series.product"]], "quantile() (polars.series method)": [[761, "polars.Series.quantile"]], "rank() (polars.series method)": [[762, "polars.Series.rank"]], "rechunk() (polars.series method)": [[763, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[764, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[765, "polars.Series.rename"]], "reshape() (polars.series method)": [[766, "polars.Series.reshape"]], "reverse() (polars.series method)": [[767, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[768, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[769, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[770, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[771, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[772, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[773, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[774, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[775, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[776, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[777, "polars.Series.rolling_var"]], "round() (polars.series method)": [[778, "polars.Series.round"]], "sample() (polars.series method)": [[779, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[780, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[781, "polars.Series.series_equal"]], "set() (polars.series method)": [[782, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[783, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[784, "polars.Series.set_sorted"]], "shape (polars.series property)": [[785, "polars.Series.shape"]], "shift() (polars.series method)": [[786, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[787, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[788, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[789, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[790, "polars.Series.shuffle"]], "sign() (polars.series method)": [[791, "polars.Series.sign"]], "sin() (polars.series method)": [[792, "polars.Series.sin"]], "sinh() (polars.series method)": [[793, "polars.Series.sinh"]], "skew() (polars.series method)": [[794, "polars.Series.skew"]], "slice() (polars.series method)": [[795, "polars.Series.slice"]], "sort() (polars.series method)": [[796, "polars.Series.sort"]], "sqrt() (polars.series method)": [[797, "polars.Series.sqrt"]], "std() (polars.series method)": [[798, "polars.Series.std"]], "str (polars.series attribute)": [[799, "polars.Series.str"]], "concat() (polars.series.str method)": [[800, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[801, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[802, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[803, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[804, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[805, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[806, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[807, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[808, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[809, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[810, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[811, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[812, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[813, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[814, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[815, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[816, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[817, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[818, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[819, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[820, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[821, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[822, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[823, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[824, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[825, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[826, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[827, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[828, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[829, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[830, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[831, "polars.Series.sum"]], "tail() (polars.series method)": [[832, "polars.Series.tail"]], "take() (polars.series method)": [[833, "polars.Series.take"]], "take_every() (polars.series method)": [[834, "polars.Series.take_every"]], "tan() (polars.series method)": [[835, "polars.Series.tan"]], "tanh() (polars.series method)": [[836, "polars.Series.tanh"]], "time_unit (polars.series property)": [[837, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[838, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[839, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[840, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[841, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[842, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[843, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[844, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[845, "polars.Series.top_k"]], "unique() (polars.series method)": [[846, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[847, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[848, "polars.Series.value_counts"]], "var() (polars.series method)": [[849, "polars.Series.var"]], "view() (polars.series method)": [[850, "polars.Series.view"]], "zip_with() (polars.series method)": [[851, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[865, "polars.SQLContext"]]}})